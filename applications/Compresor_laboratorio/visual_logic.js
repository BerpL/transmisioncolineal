/**
 * Generated by Verge3D Puzzles v.3.2.0
 * Mon Aug 10 2020 12:56:47 GMT-0500 (hora de verano central)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions
var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.objClickCallbacks = [];
_pGlob.pickedObject = '';
_pGlob.objHoverCallbacks = [];
_pGlob.hoveredObject = '';
_pGlob.objMovementInfos = {};
_pGlob.objDragOverCallbacks = [];
_pGlob.objDragOverInfoByBlock = {}
_pGlob.dragMoveOrigins = {};
_pGlob.dragScaleOrigins = {};
_pGlob.mediaElements = {};
_pGlob.loadedFiles = {};
_pGlob.loadedFile = '';
_pGlob.animMixerCallbacks = [];
_pGlob.arHitPoint = new v3d.Vector3(0, 0, 0);
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.animateParamUpdate = null;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.gamepadIndex = 0;

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();
_pGlob.intervals = {};

_pGlob.wooProductInfo = {};

var _pPhysics = {};

_pPhysics.tickCallbacks = [];
_pPhysics.syncList = [];

// internal info
_pPhysics.collisionData = [];

// goes to collision callback
_pPhysics.collisionInfo = {
    objectA: '',
    objectB: '',
    distance: 0,
    positionOnA: [0, 0, 0],
    positionOnB: [0, 0, 0],
    normalOnB: [0, 0, 0]
};

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};

PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    
// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem[attr] = value;
    }
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}




// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemAttribute('innerHTML', String(Math.round(_initGlob.percentage)) + '%', 'loading_percentage', true);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemStyle('display', 'none', 'preloader_screen', true);
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {
initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["reset_montaje"] = reset_montaje;
this.procedures["reset_desmontaje"] = reset_desmontaje;
this.procedures["sounds_volume_mute"] = sounds_volume_mute;
this.procedures["sounds_volume_reset"] = sounds_volume_reset;
this.procedures["d-paso1"] = d_paso1;
this.procedures["d-paso2"] = d_paso2;
this.procedures["d-paso3"] = d_paso3;
this.procedures["d-paso4"] = d_paso4;
this.procedures["d-paso5"] = d_paso5;
this.procedures["d-paso6"] = d_paso6;
this.procedures["d-paso8"] = d_paso8;
this.procedures["d-paso7"] = d_paso7;
this.procedures["d-paso10"] = d_paso10;
this.procedures["d-paso11"] = d_paso11;
this.procedures["d-paso12"] = d_paso12;
this.procedures["d-paso9"] = d_paso9;
this.procedures["d-paso13"] = d_paso13;
this.procedures["d-paso15"] = d_paso15;
this.procedures["d-paso18"] = d_paso18;
this.procedures["d-paso17"] = d_paso17;
this.procedures["d-paso14"] = d_paso14;
this.procedures["d-paso16"] = d_paso16;
this.procedures["d-paso19"] = d_paso19;
this.procedures["d-paso20"] = d_paso20;
this.procedures["d-paso21"] = d_paso21;
this.procedures["reset_inspeccion"] = reset_inspeccion;
this.procedures["m-paso1"] = m_paso1;
this.procedures["m-paso3"] = m_paso3;
this.procedures["m-paso6"] = m_paso6;
this.procedures["m-paso8"] = m_paso8;
this.procedures["m-paso9"] = m_paso9;
this.procedures["m-paso13"] = m_paso13;
this.procedures["m-paso18"] = m_paso18;
this.procedures["m-paso16"] = m_paso16;
this.procedures["m-paso4"] = m_paso4;
this.procedures["m-paso2"] = m_paso2;
this.procedures["m-paso10"] = m_paso10;
this.procedures["m-paso19"] = m_paso19;
this.procedures["m-paso7"] = m_paso7;
this.procedures["m-paso17"] = m_paso17;
this.procedures["m-paso5"] = m_paso5;
this.procedures["m-paso11"] = m_paso11;
this.procedures["m-paso14"] = m_paso14;
this.procedures["m-paso20"] = m_paso20;
this.procedures["m-paso12"] = m_paso12;
this.procedures["m-paso15"] = m_paso15;
this.procedures["m-paso21"] = m_paso21;

var obj_animaci_C3_B3n1, animated_objects, animation1, torques, torq_anm_1, animation_counter, audio_list_desmontaje, audio_list_montaje, torq_anm_2, tapa_var, sound_is_playing, torq_anm_3, torq_anm_4, animation2, torq_anm_5, torq_anm_6, animation3, animation8, animation18, animation6, animation17, animation5, animation10, animation11, animation13, animation15, animation16, animation19, animation20, animation24, animation22, animation4, animation21, animation12, animation7, animation14, animation23, animation9;


// dictSet puzzle
function dictSet(dict, key, value) {
    if (dict && typeof dict == 'object')
        dict[key] = value;
}



/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}



/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && "v3d" in scene.userData && "animFrameRate" in scene.userData.v3d) {
        return scene.userData.v3d.animFrameRate;
    }
    return 24;
}



var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished))
            appInstance.mixer.addEventListener('finished', onMixerFinished);
    };

}();



// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, isPlayAnimCompat, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                // compatibility reasons: deprecated playAnimation puzzles don't
                // change repetitions
                if (!isPlayAnimCompat) {
                    action.repetitions = Infinity;
                }

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}




// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return (obj.type !== "AmbientLight" && obj.name !== ""
            && !(obj.isMesh && obj.isMaterialGeneratedMesh));
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc;
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// tweenCamera puzzle
function tweenCamera(posObjName, targetObjName, duration, doSlot) {

    duration = Math.max(0, duration);

    if (!targetObjName)
        return;
    if (posObjName)
        var posObj = getObjectByName(posObjName);
    else
        var posObj = appInstance.camera;
    var targetObj = getObjectByName(targetObjName);
    if (!posObj || !targetObj)
        return;

    var wPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    var wTarget = targetObj.getWorldPosition(_pGlob.vec3Tmp2);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween)
            appInstance.controls.tween(wPos, wTarget, duration, doSlot);
    } else { // TODO: static camera, just position it for now
        if (appInstance.camera.parent)
            appInstance.camera.parent.worldToLocal(wPos);
        appInstance.camera.position.copy(wPos);
        appInstance.camera.lookAt(wTarget);
        doSlot();
    }
}


// Describe this function...
function reset_montaje() {
  reset_inspeccion();

  operateAnimation('STOP', animated_objects, null, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'Armature', 8040, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'caja_de_dados_tapa', 0, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'torquimetro_1', 0, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'torquimetro_2', 0, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'torquimetro_3', 0, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'torquimetro_4', 0, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'torquimetro_5', 0, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'torquimetro_6', 0, null, 'AUTO', 1,
          function() {}, undefined, false);

      tweenCamera('vista_4_position', 'vista_4_direction', 4, function() {});
}

// Describe this function...
function reset_desmontaje() {
  reset_inspeccion();

  operateAnimation('STOP', animated_objects, null, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'Armature', 0, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'caja_de_dados_tapa', 0, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'torquimetro_1', 0, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'torquimetro_2', 0, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'torquimetro_3', 0, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'torquimetro_4', 0, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'torquimetro_5', 0, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'torquimetro_6', 0, null, 'AUTO', 1,
          function() {}, undefined, false);

      tweenCamera('vista_3_position', 'vista_3_direction', 4, function() {});
}


// loadSound puzzle
function loadSoundAdv(url) {
    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = document.createElement('audio');
        elems[url].src = url;
    }
    return elems[url];
}



// volume puzzle
function volume(audioElem, volume) {
    if (!audioElem)
        return;
    if (typeof volume != "number")
        return;
    audioElem.volume = v3d.Math.clamp(volume, 0.0, 1.0);
}


// Describe this function...
function sounds_volume_mute() {
  volume(loadSoundAdv('./sounds/desmontaje/0.0.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/0.1.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/0.2.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/0.3.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/0.4.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/0.5.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/1.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/2.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/3.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/4.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/5.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/6.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/7.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/8.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/9.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/10.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/11.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/12.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/13.mp3'), 0);
  volume(loadSoundAdv(loadSoundAdv('./sounds/desmontaje/15.mp3')), 0);
  volume(loadSoundAdv('./sounds/desmontaje/16.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/17.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/18.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/19.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/20.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/21.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/22.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/23.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/24.mp3'), 0);
  volume(loadSoundAdv('./sounds/desmontaje/25.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/1.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/2.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/3.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/4.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/5.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/6.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/7.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/8.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/9.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/10.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/11.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/12.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/13.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/14.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/15.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/16.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/17.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/18.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/19.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/20.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/21.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/22.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/23.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/24.mp3'), 0);
  volume(loadSoundAdv('./sounds/montaje/25.mp3'), 0);
}

// Describe this function...
function sounds_volume_reset() {
  volume(loadSoundAdv('./sounds/desmontaje/0.0.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/0.1.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/0.2.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/0.3.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/0.4.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/0.5.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/1.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/2.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/3.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/4.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/5.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/6.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/7.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/8.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/9.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/10.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/11.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/12.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/13.mp3'), 1);
  volume(loadSoundAdv(loadSoundAdv('./sounds/desmontaje/15.mp3')), 1);
  volume(loadSoundAdv('./sounds/desmontaje/16.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/17.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/18.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/19.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/20.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/21.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/22.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/23.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/24.mp3'), 1);
  volume(loadSoundAdv('./sounds/desmontaje/25.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/1.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/2.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/3.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/4.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/5.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/6.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/7.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/8.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/9.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/10.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/11.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/12.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/13.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/14.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/15.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/16.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/17.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/18.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/19.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/20.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/21.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/22.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/23.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/24.mp3'), 1);
  volume(loadSoundAdv('./sounds/montaje/25.mp3'), 1);
}


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// initFullscreen puzzle
function initFullscreen(id, isParent, cb_enter, cb_exit, cb_unavail) {
    var elem = getElement(id, isParent);
    if (!elem)
        return;
    var doc = isParent ? parent.document: document;
    if (!(doc.fullscreenEnabled ||
        doc.webkitFullscreenEnabled ||
        doc.mozFullScreenEnabled ||
        doc.msFullscreenEnabled)) {
            cb_unavail();
            return;
    }
    elem.addEventListener("click", function(event) {
        event.stopPropagation();
        if (doc.fullscreenElement ||
            doc.webkitFullscreenElement ||
            doc.mozFullScreenElement ||
            doc.msFullscreenElement) {
            exitFullscreen();
        } else {
            requestFullscreen(doc.body);
        }
    });
    function changeFullscreen() {
        if (doc.fullscreenElement ||
            doc.webkitFullscreenElement ||
            doc.mozFullScreenElement ||
            doc.msFullscreenElement)
            cb_enter();
        else
            cb_exit();
    }
    doc.addEventListener("webkitfullscreenchange", changeFullscreen);
    doc.addEventListener("mozfullscreenchange", changeFullscreen);
    doc.addEventListener("msfullscreenchange", changeFullscreen);
    doc.addEventListener("fullscreenchange", changeFullscreen);
    function requestFullscreen(fselem) {
        if (fselem.requestFullscreen)
            fselem.requestFullscreen();
        else if (fselem.mozRequestFullScreen)
            fselem.mozRequestFullScreen();
        else if (fselem.webkitRequestFullscreen)
            fselem.webkitRequestFullscreen();
        else if (fselem.msRequestFullscreen)
            fselem.msRequestFullscreen();
    }
    function exitFullscreen() {
        if (doc.exitFullscreen)
            doc.exitFullscreen();
        else if (doc.mozCancelFullScreen)
            doc.mozCancelFullScreen();
        else if (doc.webkitExitFullscreen)
            doc.webkitExitFullscreen();
        else if (doc.msExitFullscreen)
            doc.msExitFullscreen();
    }
}



// isAnimationPlaying puzzle
function isAnimationPlaying(animations) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];
    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (!animName)
            continue;
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (action && action.isRunning())
            return true;
    }
    return false;
}



// playSound puzzle
function playSound(audioElem, loop) {
    if (!audioElem)
        return;
    audioElem.loop = loop;
    audioElem.play();
}



// outline puzzle
function outline(objNames, doWhat) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}



// show and hide puzzles
function changeVis(objNames, bool) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}




/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();




// dragRotate puzzle
function dragRotate(objNames, mode, isParentSpace, blockId, parentDragOverBlockId) {
    if (!appInstance.camera) return;

    objNames = retrieveObjectNames(objNames);
    if (!objNames) return;

    var info = _pGlob.objDragOverInfoByBlock[parentDragOverBlockId];
    if (!info) return;

    var coordSystem = getCoordSystem();

    for (var i = 0; i < objNames.length; i++) {
        var obj = getObjectByName(objNames[i]);
        if (!obj) {
            continue;
        }

        if (mode == "X" || mode == "Y" || mode == "Z") {
            var objPos = obj.getWorldPosition(_pGlob.vec3Tmp);
            objPos.project(appInstance.camera);

            var objX = (objPos.x + 1) / 2 * appInstance.getWidth();
            var objY = (-objPos.y + 1) / 2 * appInstance.getHeight();
            var vecFrom = _pGlob.vec2Tmp.set(info.prevX - objX, objY - info.prevY);
            var vecTo = _pGlob.vec2Tmp2.set(info.currX - objX, objY - info.currY);

            if (coordSystem == 'Z_UP_RIGHT')
                var axis = _pGlob.vec3Tmp.copy(mode == "X" ? _pGlob.AXIS_X
                        : (mode == "Y" ? _pGlob.AXIS_Z : _pGlob.AXIS_Y));
            else
                var axis = _pGlob.vec3Tmp.copy(mode == "X" ? _pGlob.AXIS_X
                        : (mode == "Y" ? _pGlob.AXIS_Y : _pGlob.AXIS_Z));

            var quat = _pGlob.quatTmp.setFromAxisAngle(axis, vecTo.angle() - vecFrom.angle());

            // a rotation axis pointing backwards (i.e. co-directionally
            // aligned with the view vector) should have inverted rotation
            var objToCalcSpace = isParentSpace && obj.parent ? obj.parent : obj;
            axis.applyQuaternion(objToCalcSpace.getWorldQuaternion(_pGlob.quatTmp2));

            var viewVec = appInstance.camera.getWorldDirection(_pGlob.vec3Tmp2);
            if (viewVec.dot(axis) > 0) {
                quat.conjugate();
            }

            if (isParentSpace) {
                obj.quaternion.premultiply(quat);
            } else {
                obj.quaternion.multiply(quat);
            }
            obj.updateMatrixWorld(true);
        }
    }
}



// objConstraintAddLimit puzzle
function objConstraintAddLimit(constraintName, objNames, mode, min, max) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames) return;

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName) continue;

        var obj = getObjectByName(objName);
        if (!obj || !obj.constraints) continue;

        for (var j = obj.constraints.length - 1; j >= 0; j--) {
            if (obj.constraints[j].name == constraintName) {
                obj.constraints.splice(j, 1);
            }
        }

        var coordSystem = getCoordSystem();

        switch (mode) {
            case 'POS_X':
            case 'POS_Y':
            case 'POS_Z':
                var cons = new v3d.LimitLocationConstraint();
                cons.name = constraintName;

                if (coordSystem == 'Z_UP_RIGHT')
                    var compIndex = mode == 'POS_X' ? 0 : (mode == 'POS_Y' ? 2 : 1);
                else
                    var compIndex = mode == 'POS_X' ? 0 : (mode == 'POS_Y' ? 1 : 2);

                // swizzle sign and limits order
                if (coordSystem == 'Z_UP_RIGHT' && mode == 'POS_Y') {
                    cons.min.setComponent(compIndex, -max);
                    cons.max.setComponent(compIndex, -min);
                } else {
                    cons.min.setComponent(compIndex, min);
                    cons.max.setComponent(compIndex, max);
                }
                obj.constraints.push(cons);
                break;

            case 'ROT_X':
            case 'ROT_Y':
            case 'ROT_Z':
                var cons = new v3d.LimitRotationConstraint();
                cons.name = constraintName;

                if (coordSystem == 'Z_UP_RIGHT')
                    cons.axis = mode == 'ROT_X' ? 'X' : (mode == 'ROT_Y' ? 'Z' : 'Y');
                else
                    cons.axis = mode == 'ROT_X' ? 'X' : (mode == 'ROT_Y' ? 'Y' : 'Z');

                // swizzle sign and limits order
                if (coordSystem == 'Z_UP_RIGHT' && mode == 'ROT_Y') {
                    cons.min = v3d.Math.degToRad(-max);
                    cons.max = v3d.Math.degToRad(-min);
                } else {
                    cons.min = v3d.Math.degToRad(min);
                    cons.max = v3d.Math.degToRad(max);
                }

                obj.constraints.push(cons);
                break;

            case 'SCALE_X':
            case 'SCALE_Y':
            case 'SCALE_Z':
                var cons = new v3d.LimitScaleConstraint();
                cons.name = constraintName;

                if (coordSystem == 'Z_UP_RIGHT')
                    var compIndex = mode == 'SCALE_X' ? 0 : (mode == 'SCALE_Y' ? 2 : 1);
                else
                    var compIndex = mode == 'SCALE_X' ? 0 : (mode == 'SCALE_Y' ? 1 : 2);

                cons.min.setComponent(compIndex, min);
                cons.max.setComponent(compIndex, max);
                obj.constraints.push(cons);
                break;
        }
    }
}



// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);
    if (eventType == "mousedown") {
        var touchEventName = mouseDownUseTouchStart ? "touchstart" : "touchend";
        elem.addEventListener(touchEventName, pickListener);
    }

    var raycaster = new v3d.Raycaster();
    function pickListener(event) {
        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.camera);
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        if (intersects.length > 0) {
            var obj = intersects[0].object;
            callback(obj, event);
        } else {
            callback(null, event);
        }
    }
}

// utility function used by the whenDraggedOver puzzles
function fireObjectPickingCallbacks(objName, source, index, cbParam) {
    for (var i = 0; i < source.length; i++) {
        var cb = source[i];
        if (objectsIncludeObj([cb[0]], objName)) {
            cb[index](cbParam);
        }
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}



function eventGetOffsetCoords(e, touchId, dest) {
    if (e instanceof MouseEvent) {
        dest.set(e.offsetX, e.offsetY);
    } else if (window.TouchEvent && e instanceof TouchEvent) {
        var rect = e.target.getBoundingClientRect();
        var touches = e.touches;
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            touches = e.changedTouches;
        }

        var touch = touches[0];
        for (var i = 0; i < touches.length; i++) {
            if (touches[i].identifier == touchId) {
                touch = touches[i];
                break;
            }
        }

        dest.set(touch.clientX - rect.left, touch.clientY - rect.top);
    }
    return dest;
}



function eventTouchIdGetFirst(e) {
    if (e instanceof MouseEvent) {
        return -1;
    } else if (window.TouchEvent && e instanceof TouchEvent) {
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            return e.changedTouches[0].identifier;
        } else {
            return e.touches[0].identifier;
        }
    }
    return -1;
}



/**
 * For "touchstart", "touchend" and "touchmove" events returns true if a touch
 * object with the provided touch id is in the changedTouches array, otherwise
 * - false. For other events returns true.
 */
function eventTouchIdChangedFilter(e, touchId) {
    if (window.TouchEvent && e instanceof TouchEvent) {
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            var isChanged = false;
            for (var i = 0; i < e.changedTouches.length; i++) {
                if (e.changedTouches[i].identifier == touchId) {
                    isChanged = true;
                    break;
                }
            }
            return isChanged;
        }
    }

    return true;
}



function initDragOverInfo() {
    return {
        draggedObjName: '',
        downX: 0, downY: 0,
        prevX: 0, prevY: 0,
        currX: 0, currY: 0,
        isDowned: false,
        isMoved: false,
        touchId: -1
    };
}



// whenDraggedOver puzzle
initObjectPicking(function(obj, downEvent) {
    if (!obj) {
        return;
    }

    var objName = getPickedObjectName(obj);
    fireObjectPickingCallbacks(objName, _pGlob.objDragOverCallbacks, 1,
            { downEvent: downEvent, draggedObjName: objName });
}, "mousedown", true);



// whenDraggedOver puzzle
function registerOnDrag(objNames, callback_start, callback_move, callback_drop, blockId) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    var cb = function(cbParam) {

        if (appInstance.controls) {
            appInstance.controls.enabled = false;
        }

        if (!(blockId in _pGlob.objDragOverInfoByBlock)) {
            _pGlob.objDragOverInfoByBlock[blockId] = initDragOverInfo();
        }
        var info = _pGlob.objDragOverInfoByBlock[blockId];

        // NOTE: don't use more than one pointing event, e.g. don't process
        // some events related to multitouch actions
        if (info.isDowned) {
            return;
        }

        var touchId = eventTouchIdGetFirst(cbParam.downEvent);
        var coords = eventGetOffsetCoords(cbParam.downEvent, touchId,
                _pGlob.vec2Tmp);

        info.downX = info.prevX = info.currX = coords.x;
        info.downY = info.prevY = info.currY = coords.y;
        info.touchId = touchId;
        info.isDowned = true;
        info.isMoved = false;
        info.draggedObjName = cbParam.draggedObjName;

        callback_start();

        var elem = appInstance.container;

        var moveCb = function(e) {
            if (!eventTouchIdChangedFilter(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.prevX = info.currX;
            info.prevY = info.currY;
            info.currX = coords.x;
            info.currY = coords.y;
            callback_move();
            info.isMoved = true;
        }
        var upCb = function(e) {
            if (!eventTouchIdChangedFilter(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.currX = coords.x;
            info.currY = coords.y;
            info.prevX = info.currX;
            info.prevY = info.currY;
            callback_drop();
            info.isDowned = false;

            elem.removeEventListener("mousemove", moveCb, false);
            elem.removeEventListener("touchmove", moveCb, false);
            elem.removeEventListener("mouseup", upCb, false);
            elem.removeEventListener("touchend", upCb, false);
            if (appInstance.controls) {
                appInstance.controls.enabled = true;
            }
        }

        elem.addEventListener("mousemove", moveCb, false);
        elem.addEventListener("touchmove", moveCb, false);
        elem.addEventListener("mouseup", upCb, false);
        elem.addEventListener("touchend", upCb, false);
    }
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName) continue;
        _pGlob.objDragOverCallbacks.push([objName, cb]);
    }
}



// dictGet puzzle
function dictGet(dict, key) {
    if (dict && typeof dict == 'object')
        return dict[key];
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem[attr] = value;
    }
}



// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}



// whenClicked puzzle
initObjectPicking(function(obj) {

    // save the object for the pickedObject block
    _pGlob.pickedObject = obj ? getPickedObjectName(obj) : '';

    _pGlob.objClickCallbacks.forEach(function(el) {
        var isPicked = obj && objectsIncludeObj(el.objNames, getPickedObjectName(obj));
        el.callbacks[isPicked ? 0 : 1]();
    });
}, 'mousedown');



// whenClicked puzzle
function registerOnClick(objNames, cbDo, cbIfMissedDo) {
    objNames = retrieveObjectNames(objNames) || [];
    var objNamesFiltered = objNames.filter(function(name) {
        return name;
    });
    _pGlob.objClickCallbacks.push({
        objNames: objNamesFiltered,
        callbacks: [cbDo, cbIfMissedDo]
    });
}


// Describe this function...Desmontaje de Compresor:
//
//
// 0.1.- Mantener orden y limpieza en tu zona
// de trabajo antes de retirar los componentes
// 0.2.- Las llaves a utilizar son llave ratchet
// y llave mixta de número 19 y 22 cada una
// 	Retiro de la conexion de descarga
//
// 0.3 .- Para esta tarea se utilizarán las llaves de número 19
//
// 1.- Retirar los 2 pernos que sujetan la conexión de descarga
// 		---- Animacion 1 ----
// 2.- Retira la conexion de descarga y observa
// la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 2 ----
//
// 	Retiro de valvulas Y Gobernador de Aire
// 0.4.- Para esta tarea se utilizarán las llaves de número 19 y 22
//
// 3.-Las valvulas se encuentran en los extremos de la tapa frontal del compresor
//
// 4.-El gobernador de Aire se encuentra al medio de las valvulas
//
// 5.- Retira los 3 pernos y observa las piezas ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 3 ----
//
// 6.- Retira el gobernador de aire y observa la pieza ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 4 ----
//
// 7.-Antes de retirar las valvulas, recordar
// presionarlas mientras desajusta los pernos
//
// // mostrar la imagen de la mano del profesor sujetando
// la valvula mientras lo desajusta para quitarlo.
//
// 8.-Retira los 2 pernos y observa las piezas ubicarse en la mesa de trabajo
//
//
// 9.-Retira la valvula y observa las piezas ubicarse en la mesa de trabajo
//
//
// 10.- Realizar el mismo procedimiento con la siguiente valvula
//
// 		---- Animacion 5 ----
//
// 		---- Animacion 6 ----
//
// 	Desmontaje de la Tapa Frontal
//
// 0.5 .- Para esta tarea se utilizarán las llaves de número 22
//
// 11.- Retira los 8 pernos que sujetan la tapa frontal
// y observa las piezas ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 7 ----
//
// 12.- Retira la tapa frontal y observa la pieza ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 8 ----
//
// 13.- Retira la carcasa y observa la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 9 ----
//
// 14.-Retira los cilindros incrustados en la
// pieza anterior y ubicalos junto a las valvulas.
//
// 		---- Animacion 10 ----
//
// 15.-Retira el empaque y observa la pieza ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 11 ----
//
// 		//girar la camara
// 	Retiro de tapa trasera
// 		0.5. Audio 0.5
//
// 15.- Retira los 6 pernos de la tapa trasera y
// observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 14 ----
//
// 16.- Retira la tapa trasera y observa la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 15 -----
//
// 	Retiro de las valvulas
//
// 		0.3. Audio 0.3
//
// 17.- Recuerda que las piezas tienen marcas que las
// diferencian de otras piezas iguales o parecidas.
//
// 18.- Retira los 2 pernos y arandelas de la valvula izquierda
// y observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 16 ----
//
// //Mostrar una imagen de las marcas del seguro mostrando su numero (1 o 2)
//
// 19.- Retira el seguro y observa la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 17 ----
//
// 20. Retira la valvula y observa la pieza ubicarse en la mesa de trabajo
//
// //Mostrar una imagen de las marcas del seguro mostrando su numero (1 o 2)
//
// 		---- Animacion 18 ----
//
// 21.- Retira la valvula siguiente con sus componentes igual que
// la anterior y observa las piezas ubicarse en la mesa de trabajo.
//
// 		---- Animacion 19 ----
// 		---- Animacion 20 ----
// 		---- Animacion 21 ----
// 	Retiro de la viela
//
// 22.-Retira los 4 pernos que sujetan la viela y
// observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 22 ----
//
// 23.- Retira la viela y observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 23 ----
//
// 		24.- Felicidades, Terminaste el desmontaje con exito
//
//
//
function d_paso1() {
  if (animation_counter == 0) {
    if (isAnimationPlaying(animated_objects) == false) {
      playSound(loadSoundAdv('./sounds/desmontaje/0.3.mp3'), false);
      registerSetTimeout(6, function() {
        playSound(loadSoundAdv('./sounds/desmontaje/1.mp3'), false);
        tweenCamera('vista_1_position', 'vista_1_direction', 3, function() {});
        outline('perno_05_a', 'ENABLE');
        outline('perno_05_b', 'ENABLE');
        registerOnClick('perno_05_a', function() {
          if (animation_counter == 0) {
            if (torq_anm_1 == false) {
              outline('perno_05_a', 'DISABLE');
              outline('perno_05_b', 'DISABLE');
              changeVis(torques, false);
              changeVis('torquimetro_1', true);
              changeVis('cabezal_n18_a', true);

              operateAnimation('SET_FRAME', 'torquimetro_1', 1, null, 'AUTO', 1,
                      function() {}, undefined, false);


              operateAnimation('SET_FRAME', 'Armature', 1, null, 'AUTO', 1,
                      function() {}, undefined, false);


              operateAnimation('PLAY', 'torquimetro_1', 1, 160, 'LoopOnce', 1,
                      function() {
                changeVis('instance_rotator_torquimetro_1', true);
                registerOnDrag('instance_rotator_torquimetro_1', function() {},
                            function() {
                  dragRotate('torquimetro_1', 'Z', true, 'Q8vI}_NBOmF8GnBNhgA]', 'y2$BQ4UWd^K0%_Bn``qM');
                  objConstraintAddLimit('torque_1', 'torquimetro_1', 'ROT_Z', 90, 150);
                },
                            function() {
                  objConstraintAddLimit('torque_1', 'torquimetro_1', 'ROT_Z', 0, 360);
                }, 'y2$BQ4UWd^K0%_Bn``qM');
              }, undefined, false);

                  torq_anm_1 = true;
              registerSetTimeout(12, function() {
                changeVis('instance_rotator_torquimetro_1', false);

                operateAnimation('PLAY', 'torquimetro_1', 1, 160, 'LoopOnce', 1,
                        function() {
                  changeVis(torques, true);
                  torq_anm_1 = false;
                }, undefined, true);

                    registerSetTimeout(2, function() {

                  operateAnimation('PLAY', 'Armature', dictGet(animation1, 'ini'), dictGet(animation1, 'end'), 'LoopOnce', 1,
                          function() {
                    animation_counter = 1;
                    console.log(animation_counter);
                    setHTMLElemAttribute('value', false, 'estado-animacion', true);
                  }, undefined, false);

                      });
              });
            }
          }
        }, function() {});
      });
    }
  }
}

// Describe this function...
function d_paso2() {
  if (animation_counter == 1) {
    setHTMLElemAttribute('value', true, 'estado-animacion', true);
    playSound(loadSoundAdv('./sounds/desmontaje/2.mp3'), false);
    outline('tubo_compresor', 'ENABLE');
    tweenCamera('vista_1_position', 'vista_1_direction', 3, function() {});
    registerOnClick('tubo_compresor', function() {
      if (animation_counter == 1) {
        outline('tubo_compresor', 'DISABLE');

        operateAnimation('PLAY', 'Armature', dictGet(animation2, 'ini'), dictGet(animation2, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 2;
          console.log(animation_counter);
          setHTMLElemAttribute('value', false, 'estado-animacion', true);
        }, undefined, false);

            }
    }, function() {});
  }
}

// Describe this function...
function d_paso3() {
  if (animation_counter == 2) {
    setHTMLElemAttribute('value', true, 'estado-animacion', true);
    playSound(loadSoundAdv('./sounds/desmontaje/0.4.mp3'), false);
    registerSetTimeout(6, function() {
      playSound(loadSoundAdv('./sounds/desmontaje/4.mp3'), false);
      outline('entrada', 'ENABLE');
      tweenCamera('vista_1_position', 'vista_1_direction', 3, function() {});
      registerSetTimeout(5, function() {
        outline('entrada', 'DISABLE');
        playSound(loadSoundAdv('./sounds/desmontaje/5.mp3'), false);
        outline('perno_13cm_a', 'ENABLE');
        outline('perno_13cm_b', 'ENABLE');
        outline('perno_13cm_c', 'ENABLE');
        registerOnClick('perno_13cm_a', function() {
          if (animation_counter == 2) {
            if (torq_anm_2 == false) {
              outline('perno_13cm_a', 'DISABLE');
              outline('perno_13cm_b', 'DISABLE');
              outline('perno_13cm_c', 'DISABLE');
              changeVis(torques, false);
              changeVis('torquimetro_2', true);
              changeVis('cabezal_n18_b', true);

              operateAnimation('SET_FRAME', 'torquimetro_2', 1, null, 'AUTO', 1,
                      function() {}, undefined, false);


              operateAnimation('PLAY', 'torquimetro_2', 1, 160, 'LoopOnce', 1,
                      function() {
                changeVis('instance_rotator_torquimetro_2', true);
                registerOnDrag('instance_rotator_torquimetro_2', function() {},
                            function() {
                  dragRotate('torquimetro_2', 'Y', true, '~wRxgN55b!2/mOQ}C7cJ', '+!iIO0!ZVJa70C!r4AK9');
                  objConstraintAddLimit('torque_2', 'torquimetro_2', 'ROT_Y', -120, -45);
                },
                            function() {
                  objConstraintAddLimit('torque_2', 'torquimetro_2', 'ROT_Y', 0, 360);
                }, '+!iIO0!ZVJa70C!r4AK9');
              }, undefined, false);

                  torq_anm_2 = true;
              registerSetTimeout(12, function() {
                changeVis('instance_rotator_torquimetro_2', false);

                operateAnimation('PLAY', 'torquimetro_2', 1, 160, 'LoopOnce', 1,
                        function() {
                  changeVis(torques, true);
                  torq_anm_2 = false;
                }, undefined, true);

                    registerSetTimeout(2, function() {

                  operateAnimation('PLAY', 'Armature', dictGet(animation3, 'ini'), dictGet(animation3, 'end'), 'LoopOnce', 1,
                          function() {
                    setHTMLElemAttribute('value', false, 'estado-animacion', true);
                    animation_counter = 3;
                    console.log(animation_counter);
                  }, undefined, false);

                      });
              });
            }
          }
        }, function() {});
      });
    });
  }
}

// Describe this function...
function d_paso4() {
  if (animation_counter == 3) {
    setHTMLElemAttribute('value', true, 'estado-animacion', true);
    playSound(loadSoundAdv('./sounds/desmontaje/6.mp3'), false);
    outline('entrada', 'ENABLE');
    tweenCamera('vista_1_position', 'vista_1_direction', 3, function() {});
    registerOnClick('entrada', function() {
      if (animation_counter == 3) {
        outline('entrada', 'DISABLE');

        operateAnimation('PLAY', 'Armature', dictGet(animation4, 'ini'), dictGet(animation4, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 4;
          console.log(animation_counter);
          setHTMLElemAttribute('value', false, 'estado-animacion', true);
        }, undefined, false);

            }
    }, function() {});
  }
}


// whenHovered puzzle
initObjectPicking(function(obj) {

    var prevHovered = _pGlob.hoveredObject;
    var currHovered = obj ? getPickedObjectName(obj) : "";

    if (prevHovered == currHovered) return;

    // first - all "out" callbacks, then - all "over"
    _pGlob.objHoverCallbacks.forEach(function(el) {
        if (objectsIncludeObj(el.objNames, prevHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = prevHovered;
            el.callbacks[1]();
        }
    });

    _pGlob.objHoverCallbacks.forEach(function(el) {
        if (objectsIncludeObj(el.objNames, currHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = currHovered;
            el.callbacks[0]();
        }
    });

    _pGlob.hoveredObject = currHovered;
}, 'mousemove');



// whenHovered puzzle
function registerOnHover(objNames, callback_over, callback_out) {
    objNames = retrieveObjectNames(objNames) || [];
    var objNamesFiltered = objNames.filter(function(name) {
        return name;
    });

    _pGlob.objHoverCallbacks.push({
        objNames: objNamesFiltered,
        callbacks: [callback_over, callback_out]
    });
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback, false);
    }
}


// Describe this function...
function d_paso5() {
  if (animation_counter == 4) {
    playSound(loadSoundAdv('./sounds/desmontaje/7.mp3'), false);
    tweenCamera('vista_1_position', 'vista_1_direction', 3, function() {});
    registerSetTimeout(6, function() {
      playSound(loadSoundAdv('./sounds/desmontaje/8.mp3'), false);
      outline('perno_05_d', 'ENABLE');
      outline('perno_05_c', 'ENABLE');
      registerOnClick('perno_05_c', function() {
        console.log('perno 05 c');
        if (animation_counter == 4) {
          if (torq_anm_3 == false) {
            outline('perno_05_d', 'DISABLE');
            outline('perno_05_c', 'DISABLE');
            changeVis(torques, false);
            changeVis('torquimetro_3', true);
            changeVis('cabezal_n18_c', true);

            operateAnimation('SET_FRAME', 'torquimetro_3', 1, null, 'AUTO', 1,
                    function() {}, undefined, false);


            operateAnimation('PLAY', 'torquimetro_3', 1, 160, 'LoopOnce', 1,
                    function() {
              changeVis('instance_rotator_torquimetro_3', true);
              registerOnDrag('instance_rotator_torquimetro_3', function() {},
                          function() {
                dragRotate('torquimetro_3', 'Y', true, 'Ol!xhD-mnvE|.fp`3.D7', '$ms^)-jR_HRA]D*|YK@p');
                objConstraintAddLimit('torque_3', 'torquimetro_3', 'ROT_Y', -120, -30);
              },
                          function() {
                objConstraintAddLimit('torque_3', 'torquimetro_3', 'ROT_Y', 0, 360);
              }, '$ms^)-jR_HRA]D*|YK@p');
            }, undefined, false);

                torq_anm_3 = true;
            registerSetTimeout(12, function() {
              changeVis('instance_rotator_torquimetro_3', false);

              operateAnimation('PLAY', 'torquimetro_3', 1, 160, 'LoopOnce', 1,
                      function() {
                changeVis(torques, true);
                torq_anm_3 = false;
              }, undefined, true);

                  registerSetTimeout(2, function() {

                operateAnimation('PLAY', 'Armature', dictGet(animation5, 'ini'), dictGet(animation5, 'end'), 'LoopOnce', 1,
                        function() {
                  animation_counter = 5;
                  console.log(animation_counter);
                }, undefined, false);

                    });
            });
          }
        }
      }, function() {});
    });
  }
}

// Describe this function...
function d_paso6() {
  if (animation_counter == 5) {
    playSound(loadSoundAdv('./sounds/desmontaje/9.mp3'), false);
    outline('seguro_alum_a', 'ENABLE');
    tweenCamera('vista_1_position', 'vista_1_direction', 3, function() {});
    registerOnClick('seguro_alum_a', function() {
      if (animation_counter == 5) {

        operateAnimation('PLAY', 'Armature', dictGet(animation6, 'ini'), dictGet(animation6, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 6;
          console.log(animation_counter);
        }, undefined, false);

            }
      outline('seguro_alum_a', 'DISABLE');
    }, function() {});
  }
}

// Describe this function...
function d_paso8() {
  if (animation_counter == 7) {
    outline('seguro_alum_b', 'ENABLE');
    tweenCamera('vista_1_position', 'vista_1_direction', 3, function() {});
    registerOnClick('seguro_alum_b', function() {
      if (animation_counter == 7) {

        operateAnimation('PLAY', 'Armature', dictGet(animation8, 'ini'), dictGet(animation8, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 8;
          console.log(animation_counter);
        }, undefined, false);

            }
      outline('seguro_alum_b', 'DISABLE');
    }, function() {});
  }
}

// Describe this function...
function d_paso7() {
  if (animation_counter == 6) {
    playSound(loadSoundAdv('./sounds/desmontaje/10.mp3'), false);
    outline('perno_05_e', 'ENABLE');
    outline('perno_05_f', 'ENABLE');
    tweenCamera('vista_1_position', 'vista_1_direction', 3, function() {});
    registerOnClick('perno_05_e', function() {
      if (animation_counter == 6) {
        outline('perno_05_e', 'DISABLE');
        outline('perno_05_f', 'DISABLE');

        operateAnimation('PLAY', 'Armature', dictGet(animation7, 'ini'), dictGet(animation7, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 7;
          console.log(animation_counter);
        }, undefined, false);

            }
    }, function() {});
  }
}

// Describe this function...
function d_paso10() {
  if (animation_counter == 9) {
    playSound(loadSoundAdv('./sounds/desmontaje/12.mp3'), false);
    outline('tapa_frontal', 'ENABLE');
    tweenCamera('vista_6_position', 'vista_6_direction', 3, function() {});
    registerOnClick('tapa_frontal', function() {
      if (animation_counter == 9) {
        outline('tapa_frontal', 'DISABLE');

        operateAnimation('PLAY', 'Armature', dictGet(animation10, 'ini'), dictGet(animation10, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 10;
          console.log(animation_counter);
        }, undefined, false);

            }
    }, function() {});
  }
}

// Describe this function...
function d_paso11() {
  if (animation_counter == 10) {
    playSound(loadSoundAdv('./sounds/desmontaje/13.mp3'), false);
    outline('carcasa_b', 'ENABLE');
    tweenCamera('vista_1_position', 'vista_1_direction', 3, function() {});
    registerOnClick('carcasa_b', function() {
      if (animation_counter == 10) {
        outline('carcasa_b', 'DISABLE');

        operateAnimation('PLAY', 'Armature', dictGet(animation11, 'ini'), dictGet(animation11, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 11;
          console.log(animation_counter);
        }, undefined, false);

            }
    }, function() {});
  }
}

// Describe this function...
function d_paso12() {
  if (animation_counter == 11) {
    playSound(loadSoundAdv('./sounds/desmontaje/14.mp3'), false);
    outline('seguro_resorte_a', 'ENABLE');
    outline('seguro_resorte_b', 'ENABLE');
    tweenCamera('vista_7_position', 'vista_7_direction', 3, function() {});
    registerOnClick('seguro_resorte_b', function() {
      if (animation_counter == 11) {
        outline('seguro_resorte_a', 'DISABLE');
        outline('seguro_resorte_b', 'DISABLE');

        operateAnimation('PLAY', 'Armature', dictGet(animation12, 'ini'), dictGet(animation12, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 12;
          console.log(animation_counter);
        }, undefined, false);

            }
    }, function() {});
  }
}

// Describe this function...Desmontaje de Compresor:
//
//
// 0.1.- Mantener orden y limpieza en tu zona
// de trabajo antes de retirar los componentes
// 0.2.- Las llaves a utilizar son llave ratchet
// y llave mixta de número 19 y 22 cada una
// 	Retiro de la conexion de descarga
//
// 0.3 .- Para esta tarea se utilizarán las llaves de número 19
//
// 1.- Retirar los 2 pernos que sujetan la conexión de descarga
// 		---- Animacion 1 ----
// 2.- Retira la conexion de descarga y observa
// la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 2 ----
//
// 	Retiro de valvulas Y Gobernador de Aire
// 0.4.- Para esta tarea se utilizarán las llaves de número 19 y 22
//
// 3.-Las valvulas se encuentran en los extremos de la tapa frontal del compresor
//
// 4.-El gobernador de Aire se encuentra al medio de las valvulas
//
// 5.- Retira los 3 pernos y observa las piezas ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 3 ----
//
// 6.- Retira el gobernador de aire y observa la pieza ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 4 ----
//
// 7.-Antes de retirar las valvulas, recordar
// presionarlas mientras desajusta los pernos
//
// // mostrar la imagen de la mano del profesor sujetando
// la valvula mientras lo desajusta para quitarlo.
//
// 8.-Retira los 2 pernos y observa las piezas ubicarse en la mesa de trabajo
//
//
// 9.-Retira la valvula y observa las piezas ubicarse en la mesa de trabajo
//
//
// 10.- Realizar el mismo procedimiento con la siguiente valvula
//
// 		---- Animacion 5 ----
//
// 		---- Animacion 6 ----
//
// 	Desmontaje de la Tapa Frontal
//
// 0.5 .- Para esta tarea se utilizarán las llaves de número 22
//
// 11.- Retira los 8 pernos que sujetan la tapa frontal
// y observa las piezas ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 7 ----
//
// 12.- Retira la tapa frontal y observa la pieza ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 8 ----
//
// 13.- Retira la carcasa y observa la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 9 ----
//
// 14.-Retira los cilindros incrustados en la
// pieza anterior y ubicalos junto a las valvulas.
//
// 		---- Animacion 10 ----
//
// 15.-Retira el empaque y observa la pieza ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 11 ----
//
// 		//girar la camara
// 	Retiro de tapa trasera
// 		0.5. Audio 0.5
//
// 15.- Retira los 6 pernos de la tapa trasera y
// observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 14 ----
//
// 16.- Retira la tapa trasera y observa la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 15 -----
//
// 	Retiro de las valvulas
//
// 		0.3. Audio 0.3
//
// 17.- Recuerda que las piezas tienen marcas que las
// diferencian de otras piezas iguales o parecidas.
//
// 18.- Retira los 2 pernos y arandelas de la valvula izquierda
// y observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 16 ----
//
// //Mostrar una imagen de las marcas del seguro mostrando su numero (1 o 2)
//
// 19.- Retira el seguro y observa la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 17 ----
//
// 20. Retira la valvula y observa la pieza ubicarse en la mesa de trabajo
//
// //Mostrar una imagen de las marcas del seguro mostrando su numero (1 o 2)
//
// 		---- Animacion 18 ----
//
// 21.- Retira la valvula siguiente con sus componentes igual que
// la anterior y observa las piezas ubicarse en la mesa de trabajo.
//
// 		---- Animacion 19 ----
// 		---- Animacion 20 ----
// 		---- Animacion 21 ----
// 	Retiro de la viela
//
// 22.-Retira los 4 pernos que sujetan la viela y
// observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 22 ----
//
// 23.- Retira la viela y observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 23 ----
//
// 		24.- Felicidades, Terminaste el desmontaje con exito
//
//
//
function d_paso9() {
  if (animation_counter == 8) {
    if (isAnimationPlaying(animated_objects) == false) {
      tweenCamera('vista_1_position', 'vista_1_direction', 3, function() {});
      playSound(loadSoundAdv('./sounds/desmontaje/0.5.mp3'), false);
      registerSetTimeout(6, function() {
        playSound(loadSoundAdv('./sounds/desmontaje/11.mp3'), false);
        outline('perno_10cm_a', 'ENABLE');
        registerOnClick('perno_10cm_a', function() {
          outline('perno_10cm_a', 'DISABLE');
          if (animation_counter == 8) {
            if (torq_anm_4 == false) {
              changeVis(torques, false);
              changeVis('torquimetro_4', true);
              changeVis('cabezal_n18_d', true);

              operateAnimation('SET_FRAME', 'torquimetro_4', 1, null, 'AUTO', 1,
                      function() {}, undefined, false);


              operateAnimation('PLAY', 'torquimetro_4', 1, 160, 'LoopOnce', 1,
                      function() {
                changeVis('instance_rotator_torquimetro_4', true);
                registerOnDrag('instance_rotator_torquimetro_4', function() {},
                            function() {
                  dragRotate('torquimetro_4', 'Y', true, 'Ps!idwM[)Aju~*C1I1_K', 'C92?C0%A:fu?U%Y@YS9i');
                  objConstraintAddLimit('torque_4', 'torquimetro_4', 'ROT_Y', -120, -45);
                },
                            function() {
                  objConstraintAddLimit('torque_4', 'torquimetro_4', 'ROT_Y', 0, 360);
                }, 'C92?C0%A:fu?U%Y@YS9i');
              }, undefined, false);

                  torq_anm_4 = true;
              registerSetTimeout(12, function() {
                changeVis('instance_rotator_torquimetro_4', false);

                operateAnimation('PLAY', 'torquimetro_4', 1, 160, 'LoopOnce', 1,
                        function() {
                  changeVis(torques, true);
                  torq_anm_4 = false;
                }, undefined, true);

                    registerSetTimeout(2, function() {

                  operateAnimation('PLAY', 'Armature', dictGet(animation9, 'ini'), dictGet(animation9, 'end'), 'LoopOnce', 1,
                          function() {
                    animation_counter = 9;
                    console.log(animation_counter);
                  }, undefined, false);

                      });
              });
            }
          }
        }, function() {});
      });
    }
  }
}

// Describe this function...
function d_paso13() {
  if (animation_counter == 12) {
    playSound(loadSoundAdv('./sounds/desmontaje/15.mp3'), false);
    outline('empaque', 'ENABLE');
    tweenCamera('vista_1_position', 'vista_1_direction', 3, function() {});
    registerOnClick('empaque', function() {
      if (animation_counter == 12) {
        outline('empaque', 'DISABLE');

        operateAnimation('PLAY', 'Armature', dictGet(animation13, 'ini'), dictGet(animation13, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 13;
          console.log(animation_counter);
        }, undefined, false);

            }
    }, function() {});
  }
}

// Describe this function...
function d_paso15() {
  if (animation_counter == 14) {
    playSound(loadSoundAdv('./sounds/desmontaje/17.mp3'), false);
    outline('tapa_pernos_frontales', 'ENABLE');
    tweenCamera('vista_2_position', 'vista_2_direction', 3, function() {});
    registerOnClick('tapa_pernos_frontales', function() {
      if (animation_counter == 14) {
        outline('tapa_pernos_frontales', 'DISABLE');

        operateAnimation('PLAY', 'Armature', dictGet(animation15, 'ini'), dictGet(animation15, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 15;
          console.log(animation_counter);
        }, undefined, false);

            registerSetTimeout(2, function() {
          tweenCamera('vista_3_position', 'vista_3_direction', 3, function() {});
        });
      }
    }, function() {});
  }
}

// Describe this function...
function d_paso18() {
  if (animation_counter == 17) {
    playSound(loadSoundAdv('./sounds/desmontaje/21.mp3'), false);
    outline('piston_a', 'ENABLE');
    tweenCamera('vista_1_position', 'vista_1_direction', 3, function() {});
    registerOnClick('piston_a', function() {
      if (animation_counter == 17) {
        outline('piston_a', 'ENABLE');
        outline('piston_a', 'DISABLE');

        operateAnimation('PLAY', 'Armature', dictGet(animation18, 'ini'), dictGet(animation18, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 18;
          console.log(animation_counter);
        }, undefined, false);

            }
    }, function() {});
  }
}

// Describe this function...
function d_paso17() {
  if (animation_counter == 16) {
    playSound(loadSoundAdv('./sounds/desmontaje/20.mp3'), false);
    outline('seguro_piston_a', 'ENABLE');
    tweenCamera('vista_2_position', 'vista_2_direction', 3, function() {});
    registerOnClick('seguro_piston_a', function() {
      if (animation_counter == 16) {
        outline('seguro_piston_a', 'DISABLE');

        operateAnimation('PLAY', 'Armature', dictGet(animation17, 'ini'), dictGet(animation17, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 17;
          console.log(animation_counter);
        }, undefined, false);

            registerSetTimeout(4, function() {
          tweenCamera('vista_3_position', 'vista_3_direction', 3, function() {});
        });
      }
    }, function() {});
  }
}

// Describe this function...Desmontaje de Compresor:
//
//
// 0.1.- Mantener orden y limpieza en tu zona
// de trabajo antes de retirar los componentes
// 0.2.- Las llaves a utilizar son llave ratchet
// y llave mixta de número 19 y 22 cada una
// 	Retiro de la conexion de descarga
//
// 0.3 .- Para esta tarea se utilizarán las llaves de número 19
//
// 1.- Retirar los 2 pernos que sujetan la conexión de descarga
// 		---- Animacion 1 ----
// 2.- Retira la conexion de descarga y observa
// la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 2 ----
//
// 	Retiro de valvulas Y Gobernador de Aire
// 0.4.- Para esta tarea se utilizarán las llaves de número 19 y 22
//
// 3.-Las valvulas se encuentran en los extremos de la tapa frontal del compresor
//
// 4.-El gobernador de Aire se encuentra al medio de las valvulas
//
// 5.- Retira los 3 pernos y observa las piezas ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 3 ----
//
// 6.- Retira el gobernador de aire y observa la pieza ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 4 ----
//
// 7.-Antes de retirar las valvulas, recordar
// presionarlas mientras desajusta los pernos
//
// // mostrar la imagen de la mano del profesor sujetando
// la valvula mientras lo desajusta para quitarlo.
//
// 8.-Retira los 2 pernos y observa las piezas ubicarse en la mesa de trabajo
//
//
// 9.-Retira la valvula y observa las piezas ubicarse en la mesa de trabajo
//
//
// 10.- Realizar el mismo procedimiento con la siguiente valvula
//
// 		---- Animacion 5 ----
//
// 		---- Animacion 6 ----
//
// 	Desmontaje de la Tapa Frontal
//
// 0.5 .- Para esta tarea se utilizarán las llaves de número 22
//
// 11.- Retira los 8 pernos que sujetan la tapa frontal
// y observa las piezas ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 7 ----
//
// 12.- Retira la tapa frontal y observa la pieza ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 8 ----
//
// 13.- Retira la carcasa y observa la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 9 ----
//
// 14.-Retira los cilindros incrustados en la
// pieza anterior y ubicalos junto a las valvulas.
//
// 		---- Animacion 10 ----
//
// 15.-Retira el empaque y observa la pieza ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 11 ----
//
// 		//girar la camara
// 	Retiro de tapa trasera
// 		0.5. Audio 0.5
//
// 15.- Retira los 6 pernos de la tapa trasera y
// observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 14 ----
//
// 16.- Retira la tapa trasera y observa la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 15 -----
//
// 	Retiro de las valvulas
//
// 		0.3. Audio 0.3
//
// 17.- Recuerda que las piezas tienen marcas que las
// diferencian de otras piezas iguales o parecidas.
//
// 18.- Retira los 2 pernos y arandelas de la valvula izquierda
// y observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 16 ----
//
// //Mostrar una imagen de las marcas del seguro mostrando su numero (1 o 2)
//
// 19.- Retira el seguro y observa la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 17 ----
//
// 20. Retira la valvula y observa la pieza ubicarse en la mesa de trabajo
//
// //Mostrar una imagen de las marcas del seguro mostrando su numero (1 o 2)
//
// 		---- Animacion 18 ----
//
// 21.- Retira la valvula siguiente con sus componentes igual que
// la anterior y observa las piezas ubicarse en la mesa de trabajo.
//
// 		---- Animacion 19 ----
// 		---- Animacion 20 ----
// 		---- Animacion 21 ----
// 	Retiro de la viela
//
// 22.-Retira los 4 pernos que sujetan la viela y
// observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 22 ----
//
// 23.- Retira la viela y observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 23 ----
//
// 		24.- Felicidades, Terminaste el desmontaje con exito
//
//
//
function d_paso14() {
  if (animation_counter == 13) {
    if (isAnimationPlaying(animated_objects) == false) {
      tweenCamera('vista_2_position', 'vista_2_direction', 3, function() {});
      playSound(loadSoundAdv('./sounds/desmontaje/0.5.mp3'), false);
      registerSetTimeout(6, function() {
        playSound(loadSoundAdv('./sounds/desmontaje/16.mp3'), false);
        outline('Perno_frontal_c', 'ENABLE');
        registerOnClick('Perno_frontal_c', function() {
          console.log('perno frontal c');
          if (animation_counter == 13) {
            if (torq_anm_5 == false) {
              outline('Perno_frontal_c', 'DISABLE');
              changeVis(torques, false);
              changeVis('torquimetro_5', true);
              changeVis('cabezal_n18_e', true);

              operateAnimation('SET_FRAME', 'torquimetro_5', 1, null, 'AUTO', 1,
                      function() {}, undefined, false);


              operateAnimation('PLAY', 'torquimetro_5', 1, 160, 'LoopOnce', 1,
                      function() {
                changeVis('instance_rotator_torquimetro_5', true);
                registerOnDrag('instance_rotator_torquimetro_5', function() {},
                            function() {
                  dragRotate('torquimetro_5', 'Z', false, 'Hp#k-U.0O$eol=$V]$]*', '!qL7p?7pdev.Fzn}bS3n');
                  objConstraintAddLimit('torque_5', 'torquimetro_5', 'ROT_Z', 0, 360);
                },
                            function() {
                  objConstraintAddLimit('torque_5', 'torquimetro_5', 'ROT_Z', 0, 360);
                }, '!qL7p?7pdev.Fzn}bS3n');
              }, undefined, false);

                  torq_anm_5 = true;
              registerSetTimeout(12, function() {
                changeVis('instance_rotator_torquimetro_5', false);

                operateAnimation('PLAY', 'torquimetro_5', 1, 160, 'AUTO', 1,
                        function() {
                  changeVis(torques, true);
                  torq_anm_5 = false;
                }, undefined, true);

                    registerSetTimeout(3, function() {
                  tweenCamera('vista_3_position', 'vista_3_direction', 3, function() {});

                  operateAnimation('PLAY', 'Armature', dictGet(animation14, 'ini'), dictGet(animation14, 'end'), 'LoopOnce', 1,
                          function() {
                    animation_counter = 14;
                    console.log(animation_counter);
                  }, undefined, false);

                      });
              });
            }
          }
        }, function() {});
      });
    }
  }
}

// Describe this function...
function d_paso16() {
  if (animation_counter == 15) {
    playSound(loadSoundAdv('./sounds/desmontaje/19.mp3'), false);
    outline('perno_piston_a_1', 'ENABLE');
    tweenCamera('vista_2_position', 'vista_2_direction', 3, function() {});
    registerOnClick('perno_piston_a_1', function() {
      if (animation_counter == 15) {
        outline('perno_piston_a_1', 'DISABLE');

        operateAnimation('PLAY', 'Armature', dictGet(animation16, 'ini'), dictGet(animation16, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 16;
          console.log(animation_counter);
        }, undefined, false);

            registerSetTimeout(8, function() {
          tweenCamera('vista_3_position', 'vista_3_direction', 3, function() {});
        });
      }
    }, function() {});
  }
}

// Describe this function...
function d_paso19() {
  if (animation_counter == 18) {
    playSound(loadSoundAdv('./sounds/desmontaje/22.mp3'), false);
    outline('perno_piston_b', 'ENABLE');
    tweenCamera('vista_2_position', 'vista_2_direction', 3, function() {});
    registerOnClick('perno_piston_b', function() {
      if (animation_counter == 18) {
        outline('perno_piston_b', 'ENABLE');

        operateAnimation('PLAY', 'Armature', dictGet(animation19, 'ini'), dictGet(animation20, 'end'), 'LoopOnce', 1,
                function() {
          tweenCamera('vista_2_position', 'vista_2_direction', 3, function() {});

          operateAnimation('PLAY', 'Armature', dictGet(animation21, 'ini'), dictGet(animation21, 'end'), 'LoopOnce', 1,
                  function() {
            tweenCamera('vista_2_position', 'vista_2_direction', 3, function() {});

            operateAnimation('PLAY', 'Armature', dictGet(animation22, 'ini'), dictGet(animation22, 'end'), 'LoopOnce', 1,
                    function() {
              tweenCamera('vista_3_position', 'vista_3_direction', 3, function() {});
            }, undefined, false);

                }, undefined, false);

              registerSetTimeout(2, function() {
            tweenCamera('vista_3_position', 'vista_3_direction', 3, function() {});
          });
        }, undefined, false);

            registerSetTimeout(4, function() {
          tweenCamera('vista_3_position', 'vista_3_direction', 3, function() {});
        });
        animation_counter = 19;
      }
    }, function() {});
  }
}

// Describe this function...Desmontaje de Compresor:
//
//
// 0.1.- Mantener orden y limpieza en tu zona
// de trabajo antes de retirar los componentes
// 0.2.- Las llaves a utilizar son llave ratchet
// y llave mixta de número 19 y 22 cada una
// 	Retiro de la conexion de descarga
//
// 0.3 .- Para esta tarea se utilizarán las llaves de número 19
//
// 1.- Retirar los 2 pernos que sujetan la conexión de descarga
// 		---- Animacion 1 ----
// 2.- Retira la conexion de descarga y observa
// la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 2 ----
//
// 	Retiro de valvulas Y Gobernador de Aire
// 0.4.- Para esta tarea se utilizarán las llaves de número 19 y 22
//
// 3.-Las valvulas se encuentran en los extremos de la tapa frontal del compresor
//
// 4.-El gobernador de Aire se encuentra al medio de las valvulas
//
// 5.- Retira los 3 pernos y observa las piezas ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 3 ----
//
// 6.- Retira el gobernador de aire y observa la pieza ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 4 ----
//
// 7.-Antes de retirar las valvulas, recordar
// presionarlas mientras desajusta los pernos
//
// // mostrar la imagen de la mano del profesor sujetando
// la valvula mientras lo desajusta para quitarlo.
//
// 8.-Retira los 2 pernos y observa las piezas ubicarse en la mesa de trabajo
//
//
// 9.-Retira la valvula y observa las piezas ubicarse en la mesa de trabajo
//
//
// 10.- Realizar el mismo procedimiento con la siguiente valvula
//
// 		---- Animacion 5 ----
//
// 		---- Animacion 6 ----
//
// 	Desmontaje de la Tapa Frontal
//
// 0.5 .- Para esta tarea se utilizarán las llaves de número 22
//
// 11.- Retira los 8 pernos que sujetan la tapa frontal
// y observa las piezas ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 7 ----
//
// 12.- Retira la tapa frontal y observa la pieza ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 8 ----
//
// 13.- Retira la carcasa y observa la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 9 ----
//
// 14.-Retira los cilindros incrustados en la
// pieza anterior y ubicalos junto a las valvulas.
//
// 		---- Animacion 10 ----
//
// 15.-Retira el empaque y observa la pieza ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 11 ----
//
// 		//girar la camara
// 	Retiro de tapa trasera
// 		0.5. Audio 0.5
//
// 15.- Retira los 6 pernos de la tapa trasera y
// observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 14 ----
//
// 16.- Retira la tapa trasera y observa la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 15 -----
//
// 	Retiro de las valvulas
//
// 		0.3. Audio 0.3
//
// 17.- Recuerda que las piezas tienen marcas que las
// diferencian de otras piezas iguales o parecidas.
//
// 18.- Retira los 2 pernos y arandelas de la valvula izquierda
// y observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 16 ----
//
// //Mostrar una imagen de las marcas del seguro mostrando su numero (1 o 2)
//
// 19.- Retira el seguro y observa la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 17 ----
//
// 20. Retira la valvula y observa la pieza ubicarse en la mesa de trabajo
//
// //Mostrar una imagen de las marcas del seguro mostrando su numero (1 o 2)
//
// 		---- Animacion 18 ----
//
// 21.- Retira la valvula siguiente con sus componentes igual que
// la anterior y observa las piezas ubicarse en la mesa de trabajo.
//
// 		---- Animacion 19 ----
// 		---- Animacion 20 ----
// 		---- Animacion 21 ----
// 	Retiro de la viela
//
// 22.-Retira los 4 pernos que sujetan la viela y
// observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 22 ----
//
// 23.- Retira la viela y observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 23 ----
//
// 		24.- Felicidades, Terminaste el desmontaje con exito
//
//
//
function d_paso20() {
  if (animation_counter == 19) {
    if (isAnimationPlaying(animated_objects) == false) {
      tweenCamera('vista_5_position', 'vista_5_direction', 3, function() {});
      playSound(loadSoundAdv('./sounds/desmontaje/23.mp3'), false);
      outline('Perno_sop_a', 'ENABLE');
      registerOnClick('Perno_sop_a', function() {
        console.log('perno sop a');
        if (animation_counter == 19) {
          if (torq_anm_6 == false) {
            outline('Perno_sop_a', 'DISABLE');
            changeVis(torques, false);
            changeVis('torquimetro_6', true);
            changeVis('cabezal_n18_f', true);

            operateAnimation('SET_FRAME', 'torquimetro_6', 1, null, 'AUTO', 1,
                    function() {}, undefined, false);


            operateAnimation('PLAY', 'torquimetro_6', 1, 230, 'LoopOnce', 1,
                    function() {
              changeVis('instance_rotator_torquimetro_6', true);
              registerOnDrag('instance_rotator_torquimetro_6', function() {},
                          function() {
                dragRotate('torquimetro_6', 'X', true, '6|RW8-xN%-TIFNeVTYA|', '/=[l6RlAMwHS-I)zwY]/');
                objConstraintAddLimit('torque_8', 'torquimetro_6', 'ROT_X', -90, 40);
              },
                          function() {
                objConstraintAddLimit('torque_8', 'torquimetro_6', 'ROT_X', 0, 360);
              }, '/=[l6RlAMwHS-I)zwY]/');
            }, undefined, false);

                torq_anm_6 = true;
            registerSetTimeout(12, function() {
              changeVis('instance_rotator_torquimetro_6', false);

              operateAnimation('PLAY', 'torquimetro_6', 1, 230, 'LoopOnce', 1,
                      function() {
                changeVis(torques, true);
                torq_anm_6 = false;
              }, undefined, true);

                  registerSetTimeout(3, function() {

                operateAnimation('PLAY', 'Armature', dictGet(animation23, 'ini'), dictGet(animation23, 'end'), 'LoopOnce', 1,
                        function() {
                  animation_counter = 20;
                  console.log(animation_counter);
                }, undefined, false);

                    registerSetTimeout(5, function() {
                  tweenCamera('vista_8_position', 'vista_8_direction', 3, function() {});
                });
              });
            });
          }
        }
      }, function() {});
    }
  }
}

// Describe this function...
function d_paso21() {
  if (animation_counter == 20) {
    playSound(loadSoundAdv('./sounds/desmontaje/24.mp3'), false);
    outline('soporte_pinhon', 'ENABLE');
    tweenCamera('vista_5_position', 'vista_5_direction', 3, function() {});
    registerOnClick('soporte_pinhon', function() {
      if (animation_counter == 20) {
        outline('soporte_pinhon', 'DISABLE');

        operateAnimation('PLAY', 'Armature', dictGet(animation24, 'ini'), dictGet(animation24, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 0;
          console.log(animation_counter);
          playSound(loadSoundAdv('./sounds/desmontaje/25.mp3'), false);
        }, undefined, false);

            registerSetTimeout(2, function() {
          tweenCamera('vista_4_position', 'vista_4_direction', 3, function() {});
        });
      }
    }, function() {});
  }
}


// isSoundPlaying puzzle
function isSoundPlaying(audioElem) {
    if (!audioElem)
        return false;
    return ((audioElem.duration > 0) && (!audioElem.paused));
}



// stopSound puzzle
function stopSound(audioElem) {
    if (!audioElem) {
        return;
    }
    audioElem.pause();
    audioElem.currentTime = 0;
}



// whenMoved puzzle
function whenMoved(objNames, velocity, cbStart, cbMove, cbStop) {

    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;

    function savePreviousCoords(objName, obj, prevIsMoving) {
        // GC optimization
        if (_pGlob.objMovementInfos[objName]) {
            var info = _pGlob.objMovementInfos[objName];

            info.prevPosX = obj.position.x;
            info.prevPosY = obj.position.y;
            info.prevPosZ = obj.position.z;
            info.prevRotX = obj.rotation.x;
            info.prevRotY = obj.rotation.y;
            info.prevRotZ = obj.rotation.z;
            info.prevScaX = obj.scale.x;
            info.prevScaY = obj.scale.y;
            info.prevScaZ = obj.scale.z;
            info.prevIsMoving = prevIsMoving;
        } else {
            var info = {
                prevPosX: obj.position.x,
                prevPosY: obj.position.y,
                prevPosZ: obj.position.z,
                prevRotX: obj.rotation.x,
                prevRotY: obj.rotation.y,
                prevRotZ: obj.rotation.z,
                prevScaX: obj.scale.x,
                prevScaY: obj.scale.y,
                prevScaZ: obj.scale.z,
                prevIsMoving: prevIsMoving
            };
            _pGlob.objMovementInfos[objName] = info;
        }

        return info;
    }

    function checkMoving(objName, obj, elapsed) {

        var info = _pGlob.objMovementInfos[objName] ||
            savePreviousCoords(objName, obj, false);

        var delta = velocity * elapsed;

        var isMoving =
            Math.abs(obj.position.x - info.prevPosX) > delta ||
            Math.abs(obj.position.y - info.prevPosY) > delta ||
            Math.abs(obj.position.z - info.prevPosZ) > delta ||
            Math.abs(obj.rotation.x - info.prevRotX) > delta ||
            Math.abs(obj.rotation.y - info.prevRotY) > delta ||
            Math.abs(obj.rotation.z - info.prevRotZ) > delta ||
            Math.abs(obj.scale.x - info.prevScaX) > delta ||
            Math.abs(obj.scale.y - info.prevScaY) > delta ||
            Math.abs(obj.scale.z - info.prevScaZ) > delta;

        if (!info.prevIsMoving && isMoving) {
            cbStart();
            savePreviousCoords(objName, obj, true);
        } else if (info.prevIsMoving && isMoving) {
            cbMove();
            savePreviousCoords(objName, obj, true);
        } else if (info.prevIsMoving && !isMoving) {
            cbStop();
            savePreviousCoords(objName, obj, false);
        } else {
            savePreviousCoords(objName, obj, false);
        }
    }

    function addToRender(objName) {

        var obj = getObjectByName(objName);
        if (!obj)
            return;

        appInstance.renderCallbacks.push(function(elapsed, timeline) { checkMoving(objName, obj, elapsed); });
    }

    for (var i = 0; i < objNames.length; i++) {

        var objName = objNames[i];
        if (!objName)
            continue;

        addToRender(objName);
    }
}



// addAnnotation and removeAnnotation puzzles
function handleAnnot(add, annot, objNames, contents, id) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        // check if it already has an annotation and remove it
        for (var j = 0; j < obj.children.length; j++) {
            var child = obj.children[j];
            if (child.type == "Annotation") {
                obj.remove(child);
                appInstance.container.removeChild(child.annotation);
            }
        }
        if (add) {
            var aObj = new v3d.Annotation(appInstance.container, annot, contents);
            aObj.name = annot;
            aObj.fadeObscured = _pGlob.fadeAnnotations;
            if (id) {
                aObj.annotation.id = id;
                aObj.annotationDialog.id = id+'_dialog';
            }
            obj.add(aObj);
        }
    }
}


// Describe this function...
function reset_inspeccion() {
  setHTMLElemStyle('display', 'none', ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', null, null, null, null], false);
}

// Describe this function...
function m_paso1() {
  if (animation_counter == 0) {
    playSound(loadSoundAdv('./sounds/montaje/1.mp3'), false);
    outline('soporte_pinhon', 'ENABLE');
    tweenCamera('vista_8_position', 'vista_8_direction', 3, function() {});
    registerOnClick('soporte_pinhon', function() {
      if (animation_counter == 0) {
        outline('soporte_pinhon', 'DISABLE');

        operateAnimation('PLAY', 'Armature', dictGet(animation24, 'ini'), dictGet(animation24, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 1;
          console.log(animation_counter);
        }, undefined, true);

            registerSetTimeout(2, function() {
          tweenCamera('vista_5_position', 'vista_5_direction', 3, function() {});
        });
      }
    }, function() {});
  }
}

// Describe this function...
function m_paso3() {
  if (animation_counter == 2) {
    playSound(loadSoundAdv('./sounds/montaje/4.mp3'), false);
    outline('piston_b', 'ENABLE');
    tweenCamera('vista_8_position', 'vista_8_direction', 3, function() {});
    registerOnClick('mesa_trabajo', function() {
      if (animation_counter == 2) {
        outline('piston_b', 'DISABLE');

        operateAnimation('PLAY', 'Armature', dictGet(animation22, 'ini'), dictGet(animation22, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 3;
          console.log(animation_counter);
        }, undefined, true);

            registerSetTimeout(2, function() {
          tweenCamera('vista_2_position', 'vista_2_direction', 3, function() {});
        });
      }
    }, function() {});
  }
}

// Describe this function...
function m_paso6() {
  if (animation_counter == 5) {
    playSound(loadSoundAdv('./sounds/montaje/7.mp3'), false);
    tweenCamera('vista_2_position', 'vista_2_direction', 3, function() {});
    registerSetTimeout(4, function() {
      if (animation_counter == 5) {

        operateAnimation('PLAY', 'Armature', dictGet(animation18, 'ini'), dictGet(animation18, 'end'), 'LoopOnce', 2,
                function() {

          operateAnimation('PLAY', 'Armature', dictGet(animation17, 'ini'), dictGet(animation17, 'end'), 'LoopOnce', 2,
                  function() {

            operateAnimation('PLAY', 'Armature', dictGet(animation16, 'ini'), dictGet(animation16, 'end'), 'LoopOnce', 2,
                    function() {
              animation_counter = 6;
              console.log(animation_counter);
            }, undefined, true);

                }, undefined, true);

              }, undefined, true);

            }
    });
  }
}

// Describe this function...Desmontaje de Compresor:
//
//
// 0.1.- Mantener orden y limpieza en tu zona
// de trabajo antes de retirar los componentes
// 0.2.- Las llaves a utilizar son llave ratchet
// y llave mixta de número 19 y 22 cada una
// 	Retiro de la conexion de descarga
//
// 0.3 .- Para esta tarea se utilizarán las llaves de número 19
//
// 1.- Retirar los 2 pernos que sujetan la conexión de descarga
// 		---- Animacion 1 ----
// 2.- Retira la conexion de descarga y observa
// la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 2 ----
//
// 	Retiro de valvulas Y Gobernador de Aire
// 0.4.- Para esta tarea se utilizarán las llaves de número 19 y 22
//
// 3.-Las valvulas se encuentran en los extremos de la tapa frontal del compresor
//
// 4.-El gobernador de Aire se encuentra al medio de las valvulas
//
// 5.- Retira los 3 pernos y observa las piezas ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 3 ----
//
// 6.- Retira el gobernador de aire y observa la pieza ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 4 ----
//
// 7.-Antes de retirar las valvulas, recordar
// presionarlas mientras desajusta los pernos
//
// // mostrar la imagen de la mano del profesor sujetando
// la valvula mientras lo desajusta para quitarlo.
//
// 8.-Retira los 2 pernos y observa las piezas ubicarse en la mesa de trabajo
//
//
// 9.-Retira la valvula y observa las piezas ubicarse en la mesa de trabajo
//
//
// 10.- Realizar el mismo procedimiento con la siguiente valvula
//
// 		---- Animacion 5 ----
//
// 		---- Animacion 6 ----
//
// 	Desmontaje de la Tapa Frontal
//
// 0.5 .- Para esta tarea se utilizarán las llaves de número 22
//
// 11.- Retira los 8 pernos que sujetan la tapa frontal
// y observa las piezas ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 7 ----
//
// 12.- Retira la tapa frontal y observa la pieza ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 8 ----
//
// 13.- Retira la carcasa y observa la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 9 ----
//
// 14.-Retira los cilindros incrustados en la
// pieza anterior y ubicalos junto a las valvulas.
//
// 		---- Animacion 10 ----
//
// 15.-Retira el empaque y observa la pieza ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 11 ----
//
// 		//girar la camara
// 	Retiro de tapa trasera
// 		0.5. Audio 0.5
//
// 15.- Retira los 6 pernos de la tapa trasera y
// observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 14 ----
//
// 16.- Retira la tapa trasera y observa la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 15 -----
//
// 	Retiro de las valvulas
//
// 		0.3. Audio 0.3
//
// 17.- Recuerda que las piezas tienen marcas que las
// diferencian de otras piezas iguales o parecidas.
//
// 18.- Retira los 2 pernos y arandelas de la valvula izquierda
// y observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 16 ----
//
// //Mostrar una imagen de las marcas del seguro mostrando su numero (1 o 2)
//
// 19.- Retira el seguro y observa la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 17 ----
//
// 20. Retira la valvula y observa la pieza ubicarse en la mesa de trabajo
//
// //Mostrar una imagen de las marcas del seguro mostrando su numero (1 o 2)
//
// 		---- Animacion 18 ----
//
// 21.- Retira la valvula siguiente con sus componentes igual que
// la anterior y observa las piezas ubicarse en la mesa de trabajo.
//
// 		---- Animacion 19 ----
// 		---- Animacion 20 ----
// 		---- Animacion 21 ----
// 	Retiro de la viela
//
// 22.-Retira los 4 pernos que sujetan la viela y
// observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 22 ----
//
// 23.- Retira la viela y observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 23 ----
//
// 		24.- Felicidades, Terminaste el desmontaje con exito
//
//
//
function m_paso8() {
  if (animation_counter == 7) {
    if (isAnimationPlaying(animated_objects) == false) {
      tweenCamera('vista_8_position', 'vista_8_direction', 3, function() {});
      playSound(loadSoundAdv('./sounds/montaje/9.mp3'), false);
      outline('Perno_frontal_c', 'ENABLE');
      registerOnClick('Perno_frontal_c', function() {
        console.log('perno frontal c');
        if (animation_counter == 7) {

          operateAnimation('PLAY', 'Armature', dictGet(animation14, 'ini'), dictGet(animation14, 'end'), 'LoopOnce', 1,
                  function() {
            animation_counter = 8;
            console.log(animation_counter);
            if (torq_anm_5 == false) {
              outline('Perno_frontal_c', 'DISABLE');
              changeVis(torques, false);
              changeVis('torquimetro_5', true);
              changeVis('cabezal_n18_e', true);

              operateAnimation('SET_FRAME', 'torquimetro_5', 1, null, 'AUTO', 1,
                      function() {}, undefined, false);


              operateAnimation('PLAY', 'torquimetro_5', 1, 160, 'LoopOnce', 1,
                      function() {
                changeVis('instance_rotator_torquimetro_5', true);
                registerOnDrag('instance_rotator_torquimetro_5', function() {},
                            function() {
                  dragRotate('torquimetro_5', 'Z', false, 'tkuKj@3Q!$V[5Mu_}/MO', '3,e:e|zkD[`b_kMgXa#[');
                  objConstraintAddLimit('torque_5', 'torquimetro_5', 'ROT_Z', 0, 360);
                },
                            function() {
                  objConstraintAddLimit('torque_5', 'torquimetro_5', 'ROT_Z', 0, 360);
                }, '3,e:e|zkD[`b_kMgXa#[');
              }, undefined, false);

                  torq_anm_5 = true;
              registerSetTimeout(12, function() {
                changeVis('instance_rotator_torquimetro_5', false);

                operateAnimation('PLAY', 'torquimetro_5', 1, 160, 'AUTO', 1,
                        function() {
                  changeVis(torques, true);
                  torq_anm_5 = false;
                }, undefined, true);

                    });
            }
          }, undefined, true);

              registerSetTimeout(3, function() {
            tweenCamera('vista_2_position', 'vista_2_direction', 3, function() {});
          });
        }
      }, function() {});
    }
  }
}

// Describe this function...
function m_paso9() {
  if (animation_counter == 8) {
    playSound(loadSoundAdv('./sounds/montaje/10.mp3'), false);
    outline('empaque', 'ENABLE');
    tweenCamera('vista_8_position', 'vista_8_direction', 3, function() {});
    registerOnClick('empaque', function() {
      if (animation_counter == 8) {
        outline('empaque', 'DISABLE');

        operateAnimation('PLAY', 'Armature', dictGet(animation13, 'ini'), dictGet(animation13, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 9;
          console.log(animation_counter);
        }, undefined, true);

            registerSetTimeout(3, function() {
          tweenCamera('vista_1_position', 'vista_1_direction', 3, function() {});
        });
      }
    }, function() {});
  }
}

// Describe this function...Desmontaje de Compresor:
//
//
// 0.1.- Mantener orden y limpieza en tu zona
// de trabajo antes de retirar los componentes
// 0.2.- Las llaves a utilizar son llave ratchet
// y llave mixta de número 19 y 22 cada una
// 	Retiro de la conexion de descarga
//
// 0.3 .- Para esta tarea se utilizarán las llaves de número 19
//
// 1.- Retirar los 2 pernos que sujetan la conexión de descarga
// 		---- Animacion 1 ----
// 2.- Retira la conexion de descarga y observa
// la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 2 ----
//
// 	Retiro de valvulas Y Gobernador de Aire
// 0.4.- Para esta tarea se utilizarán las llaves de número 19 y 22
//
// 3.-Las valvulas se encuentran en los extremos de la tapa frontal del compresor
//
// 4.-El gobernador de Aire se encuentra al medio de las valvulas
//
// 5.- Retira los 3 pernos y observa las piezas ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 3 ----
//
// 6.- Retira el gobernador de aire y observa la pieza ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 4 ----
//
// 7.-Antes de retirar las valvulas, recordar
// presionarlas mientras desajusta los pernos
//
// // mostrar la imagen de la mano del profesor sujetando
// la valvula mientras lo desajusta para quitarlo.
//
// 8.-Retira los 2 pernos y observa las piezas ubicarse en la mesa de trabajo
//
//
// 9.-Retira la valvula y observa las piezas ubicarse en la mesa de trabajo
//
//
// 10.- Realizar el mismo procedimiento con la siguiente valvula
//
// 		---- Animacion 5 ----
//
// 		---- Animacion 6 ----
//
// 	Desmontaje de la Tapa Frontal
//
// 0.5 .- Para esta tarea se utilizarán las llaves de número 22
//
// 11.- Retira los 8 pernos que sujetan la tapa frontal
// y observa las piezas ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 7 ----
//
// 12.- Retira la tapa frontal y observa la pieza ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 8 ----
//
// 13.- Retira la carcasa y observa la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 9 ----
//
// 14.-Retira los cilindros incrustados en la
// pieza anterior y ubicalos junto a las valvulas.
//
// 		---- Animacion 10 ----
//
// 15.-Retira el empaque y observa la pieza ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 11 ----
//
// 		//girar la camara
// 	Retiro de tapa trasera
// 		0.5. Audio 0.5
//
// 15.- Retira los 6 pernos de la tapa trasera y
// observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 14 ----
//
// 16.- Retira la tapa trasera y observa la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 15 -----
//
// 	Retiro de las valvulas
//
// 		0.3. Audio 0.3
//
// 17.- Recuerda que las piezas tienen marcas que las
// diferencian de otras piezas iguales o parecidas.
//
// 18.- Retira los 2 pernos y arandelas de la valvula izquierda
// y observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 16 ----
//
// //Mostrar una imagen de las marcas del seguro mostrando su numero (1 o 2)
//
// 19.- Retira el seguro y observa la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 17 ----
//
// 20. Retira la valvula y observa la pieza ubicarse en la mesa de trabajo
//
// //Mostrar una imagen de las marcas del seguro mostrando su numero (1 o 2)
//
// 		---- Animacion 18 ----
//
// 21.- Retira la valvula siguiente con sus componentes igual que
// la anterior y observa las piezas ubicarse en la mesa de trabajo.
//
// 		---- Animacion 19 ----
// 		---- Animacion 20 ----
// 		---- Animacion 21 ----
// 	Retiro de la viela
//
// 22.-Retira los 4 pernos que sujetan la viela y
// observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 22 ----
//
// 23.- Retira la viela y observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 23 ----
//
// 		24.- Felicidades, Terminaste el desmontaje con exito
//
//
//
function m_paso13() {
  if (animation_counter == 12) {
    if (isAnimationPlaying(animated_objects) == false) {
      tweenCamera('vista_7_position', 'vista_7_direction', 3, function() {});
      playSound(loadSoundAdv('./sounds/desmontaje/0.5.mp3'), false);
      registerSetTimeout(6, function() {
        playSound(loadSoundAdv('./sounds/montaje/14.mp3'), false);
        outline('perno_10cm_a', 'ENABLE');
        registerOnClick('perno_10cm_a', function() {
          outline('perno_10cm_a', 'DISABLE');
          if (animation_counter == 12) {

            operateAnimation('PLAY', 'Armature', dictGet(animation9, 'ini'), dictGet(animation9, 'end'), 'LoopOnce', 1,
                    function() {
              animation_counter = 13;
              console.log(animation_counter);
              if (torq_anm_4 == false) {
                changeVis(torques, false);
                changeVis('torquimetro_4', true);
                changeVis('cabezal_n18_d', true);

                operateAnimation('SET_FRAME', 'torquimetro_4', 1, null, 'AUTO', 1,
                        function() {}, undefined, false);


                operateAnimation('PLAY', 'torquimetro_4', 1, 160, 'LoopOnce', 1,
                        function() {
                  changeVis('instance_rotator_torquimetro_4', true);
                  registerOnDrag('instance_rotator_torquimetro_4', function() {},
                              function() {
                    dragRotate('torquimetro_4', 'Y', true, 'wqHKdaB~sMp!4f:X/,Yj', 'wjdFY[Y/@Gn1,a,t:Eir');
                    objConstraintAddLimit('torque_4', 'torquimetro_4', 'ROT_Y', -120, -45);
                  },
                              function() {
                    objConstraintAddLimit('torque_4', 'torquimetro_4', 'ROT_Y', 0, 360);
                  }, 'wjdFY[Y/@Gn1,a,t:Eir');
                }, undefined, false);

                    torq_anm_4 = true;
                registerSetTimeout(12, function() {
                  changeVis('instance_rotator_torquimetro_4', false);

                  operateAnimation('PLAY', 'torquimetro_4', 1, 160, 'LoopOnce', 1,
                          function() {
                    changeVis(torques, true);
                    torq_anm_4 = false;
                  }, undefined, true);

                      });
              }
            }, undefined, true);

                registerSetTimeout(2, function() {
              tweenCamera('vista_1_position', 'vista_1_direction', 3, function() {});
            });
          }
        }, function() {});
      });
    }
  }
}

// Describe this function...
function m_paso18() {
  if (animation_counter == 17) {
    playSound(loadSoundAdv('./sounds/montaje/20.mp3'), false);
    outline('entrada', 'ENABLE');
    tweenCamera('vista_7_position', 'vista_7_direction', 3, function() {});
    registerOnClick('entrada', function() {
      outline('entrada', 'DISABLE');
      if (animation_counter == 17) {

        operateAnimation('PLAY', 'Armature', dictGet(animation4, 'ini'), dictGet(animation4, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 18;
          console.log(animation_counter);
        }, undefined, true);

            registerSetTimeout(2, function() {
          tweenCamera('vista_1_position', 'vista_1_direction', 3, function() {});
        });
      }
    }, function() {});
  }
}

// Describe this function...
function m_paso16() {
  if (animation_counter == 15) {
    playSound(loadSoundAdv('./sounds/montaje/19.mp3'), false);
    outline('seguro_alum_a', 'ENABLE');
    tweenCamera('vista_7_position', 'vista_7_direction', 3, function() {});
    registerOnClick('seguro_alum_a', function() {
      outline('seguro_alum_a', 'DISABLE');
      if (animation_counter == 15) {

        operateAnimation('PLAY', 'Armature', dictGet(animation6, 'ini'), dictGet(animation6, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 16;
          console.log(animation_counter);
        }, undefined, true);

            registerSetTimeout(2, function() {
          tweenCamera('vista_1_position', 'vista_1_direction', 3, function() {});
        });
      }
    }, function() {});
  }
}

// Describe this function...
function m_paso4() {
  if (animation_counter == 3) {
    playSound(loadSoundAdv('./sounds/montaje/5.mp3'), false);
    outline('seguro_piston_b', 'ENABLE');
    tweenCamera('vista_8_position', 'vista_8_direction', 3, function() {});
    registerOnClick('seguro_piston_b', function() {
      if (animation_counter == 3) {
        outline('seguro_piston_b', 'DISABLE');

        operateAnimation('PLAY', 'Armature', dictGet(animation21, 'ini'), dictGet(animation21, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 4;
          console.log(animation_counter);
        }, undefined, true);

            registerSetTimeout(2, function() {
          tweenCamera('vista_2_position', 'vista_2_direction', 3, function() {});
        });
      }
    }, function() {});
  }
}

// Describe this function...Desmontaje de Compresor:
//
//
// 0.1.- Mantener orden y limpieza en tu zona
// de trabajo antes de retirar los componentes
// 0.2.- Las llaves a utilizar son llave ratchet
// y llave mixta de número 19 y 22 cada una
// 	Retiro de la conexion de descarga
//
// 0.3 .- Para esta tarea se utilizarán las llaves de número 19
//
// 1.- Retirar los 2 pernos que sujetan la conexión de descarga
// 		---- Animacion 1 ----
// 2.- Retira la conexion de descarga y observa
// la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 2 ----
//
// 	Retiro de valvulas Y Gobernador de Aire
// 0.4.- Para esta tarea se utilizarán las llaves de número 19 y 22
//
// 3.-Las valvulas se encuentran en los extremos de la tapa frontal del compresor
//
// 4.-El gobernador de Aire se encuentra al medio de las valvulas
//
// 5.- Retira los 3 pernos y observa las piezas ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 3 ----
//
// 6.- Retira el gobernador de aire y observa la pieza ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 4 ----
//
// 7.-Antes de retirar las valvulas, recordar
// presionarlas mientras desajusta los pernos
//
// // mostrar la imagen de la mano del profesor sujetando
// la valvula mientras lo desajusta para quitarlo.
//
// 8.-Retira los 2 pernos y observa las piezas ubicarse en la mesa de trabajo
//
//
// 9.-Retira la valvula y observa las piezas ubicarse en la mesa de trabajo
//
//
// 10.- Realizar el mismo procedimiento con la siguiente valvula
//
// 		---- Animacion 5 ----
//
// 		---- Animacion 6 ----
//
// 	Desmontaje de la Tapa Frontal
//
// 0.5 .- Para esta tarea se utilizarán las llaves de número 22
//
// 11.- Retira los 8 pernos que sujetan la tapa frontal
// y observa las piezas ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 7 ----
//
// 12.- Retira la tapa frontal y observa la pieza ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 8 ----
//
// 13.- Retira la carcasa y observa la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 9 ----
//
// 14.-Retira los cilindros incrustados en la
// pieza anterior y ubicalos junto a las valvulas.
//
// 		---- Animacion 10 ----
//
// 15.-Retira el empaque y observa la pieza ubicarse en la mesa de trabajo
//
//
// 		---- Animacion 11 ----
//
// 		//girar la camara
// 	Retiro de tapa trasera
// 		0.5. Audio 0.5
//
// 15.- Retira los 6 pernos de la tapa trasera y
// observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 14 ----
//
// 16.- Retira la tapa trasera y observa la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 15 -----
//
// 	Retiro de las valvulas
//
// 		0.3. Audio 0.3
//
// 17.- Recuerda que las piezas tienen marcas que las
// diferencian de otras piezas iguales o parecidas.
//
// 18.- Retira los 2 pernos y arandelas de la valvula izquierda
// y observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 16 ----
//
// //Mostrar una imagen de las marcas del seguro mostrando su numero (1 o 2)
//
// 19.- Retira el seguro y observa la pieza ubicarse en la mesa de trabajo
//
// 		---- Animacion 17 ----
//
// 20. Retira la valvula y observa la pieza ubicarse en la mesa de trabajo
//
// //Mostrar una imagen de las marcas del seguro mostrando su numero (1 o 2)
//
// 		---- Animacion 18 ----
//
// 21.- Retira la valvula siguiente con sus componentes igual que
// la anterior y observa las piezas ubicarse en la mesa de trabajo.
//
// 		---- Animacion 19 ----
// 		---- Animacion 20 ----
// 		---- Animacion 21 ----
// 	Retiro de la viela
//
// 22.-Retira los 4 pernos que sujetan la viela y
// observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 22 ----
//
// 23.- Retira la viela y observa las piezas ubicarse en la mesa de trabajo
//
// 		---- Animacion 23 ----
//
// 		24.- Felicidades, Terminaste el desmontaje con exito
//
//
//
function m_paso2() {
  if (animation_counter == 1) {
    if (isAnimationPlaying(animated_objects) == false) {
      tweenCamera('vista_8_position', 'vista_8_direction', 3, function() {});
      playSound(loadSoundAdv('./sounds/montaje/2.mp3'), false);
      outline('Perno_sop_a', 'ENABLE');
      registerOnClick('Perno_sop_a', function() {
        console.log('perno sop a');
        if (animation_counter == 1) {

          operateAnimation('PLAY', 'Armature', dictGet(animation23, 'ini'), dictGet(animation23, 'end'), 'LoopOnce', 1,
                  function() {
            if (torq_anm_6 == false) {
              outline('Perno_sop_a', 'DISABLE');
              changeVis(torques, false);
              changeVis('torquimetro_6', true);
              changeVis('cabezal_n18_f', true);

              operateAnimation('SET_FRAME', 'torquimetro_6', 1, null, 'AUTO', 1,
                      function() {}, undefined, false);


              operateAnimation('PLAY', 'torquimetro_6', 1, 230, 'LoopOnce', 1,
                      function() {
                changeVis('instance_rotator_torquimetro_6', true);
                registerOnDrag('instance_rotator_torquimetro_6', function() {},
                            function() {
                  dragRotate('torquimetro_6', 'X', true, 'q^rpM3pL6q)sP6?Ya@AQ', 'EdJ!j?xsLN+!(=]XZRDp');
                  objConstraintAddLimit('torque_8', 'torquimetro_6', 'ROT_X', -90, 40);
                },
                            function() {
                  objConstraintAddLimit('torque_8', 'torquimetro_6', 'ROT_X', 0, 360);
                }, 'EdJ!j?xsLN+!(=]XZRDp');
              }, undefined, false);

                  torq_anm_6 = true;
              registerSetTimeout(12, function() {
                changeVis('instance_rotator_torquimetro_6', false);

                operateAnimation('PLAY', 'torquimetro_6', 1, 230, 'LoopOnce', 1,
                        function() {
                  changeVis(torques, true);
                  torq_anm_6 = false;
                }, undefined, true);

                    animation_counter = 2;
                console.log(animation_counter);
              });
            }
          }, undefined, true);

              registerSetTimeout(5, function() {
            tweenCamera('vista_5_position', 'vista_5_direction', 3, function() {});
          });
        }
      }, function() {});
    }
  }
}

// Describe this function...
function m_paso10() {
  if (animation_counter == 9) {
    playSound(loadSoundAdv('./sounds/montaje/11.mp3'), false);
    outline('seguro_resorte_b', 'ENABLE');
    tweenCamera('vista_7_position', 'vista_7_direction', 3, function() {});
    registerOnClick('seguro_resorte_b', function() {
      if (animation_counter == 9) {
        outline('seguro_resorte_b', 'DISABLE');

        operateAnimation('PLAY', 'Armature', dictGet(animation12, 'ini'), dictGet(animation12, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 10;
          console.log(animation_counter);
        }, undefined, true);

            }
    }, function() {});
  }
}

// Describe this function...
function m_paso19() {
  if (animation_counter == 18) {
    playSound(loadSoundAdv('./sounds/montaje/21.mp3'), false);
    outline('perno_13cm_a', 'ENABLE');
    tweenCamera('vista_7_position', 'vista_7_direction', 3, function() {});
    registerOnClick('perno_13cm_a', function() {
      outline('perno_13cm_a', 'DISABLE');
      if (animation_counter == 18) {

        operateAnimation('PLAY', 'Armature', dictGet(animation3, 'ini'), dictGet(animation3, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 19;
          console.log(animation_counter);
        }, undefined, true);

            registerSetTimeout(2, function() {
          tweenCamera('vista_1_position', 'vista_1_direction', 3, function() {});
        });
      }
    }, function() {});
  }
}

// Describe this function...
function m_paso7() {
  if (animation_counter == 6) {
    playSound(loadSoundAdv('./sounds/montaje/8.mp3'), false);
    outline('tapa_pernos_frontales', 'ENABLE');
    tweenCamera('vista_8_position', 'vista_8_direction', 3, function() {});
    registerOnClick('tapa_pernos_frontales', function() {
      if (animation_counter == 6) {
        outline('tapa_pernos_frontales', 'DISABLE');

        operateAnimation('PLAY', 'Armature', dictGet(animation15, 'ini'), dictGet(animation15, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 7;
          console.log(animation_counter);
        }, undefined, true);

            registerSetTimeout(2, function() {
          tweenCamera('vista_2_position', 'vista_2_direction', 3, function() {});
        });
      }
    }, function() {});
  }
}

// Describe this function...
function m_paso17() {
  if (animation_counter == 16) {
    outline('perno_05_d', 'ENABLE');
    tweenCamera('vista_7_position', 'vista_7_direction', 3, function() {});
    registerOnClick('perno_05_d', function() {
      outline('perno_05_d', 'DISABLE');
      if (animation_counter == 16) {

        operateAnimation('PLAY', 'Armature', dictGet(animation5, 'ini'), dictGet(animation5, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 17;
          console.log(animation_counter);
        }, undefined, true);

            registerSetTimeout(2, function() {
          tweenCamera('vista_1_position', 'vista_1_direction', 3, function() {});
        });
      }
    }, function() {});
  }
}

// Describe this function...
function m_paso5() {
  if (animation_counter == 4) {
    playSound(loadSoundAdv('./sounds/montaje/6.mp3'), false);
    outline('perno_piston_b', 'ENABLE');
    tweenCamera('vista_8_position', 'vista_8_direction', 3, function() {});
    registerOnClick('perno_piston_b', function() {
      if (animation_counter == 4) {
        outline('perno_piston_b', 'DISABLE');

        operateAnimation('PLAY', 'Armature', dictGet(animation20, 'ini'), dictGet(animation20, 'end'), 'LoopOnce', 1,
                function() {

          operateAnimation('PLAY', 'Armature', dictGet(animation19, 'ini'), dictGet(animation19, 'end'), 'LoopOnce', 1,
                  function() {}, undefined, true);

              animation_counter = 5;
          console.log(animation_counter);
        }, undefined, true);

            registerSetTimeout(2, function() {
          tweenCamera('vista_2_position', 'vista_2_direction', 3, function() {});
        });
      }
    }, function() {});
  }
}

// Describe this function...
function m_paso11() {
  if (animation_counter == 10) {
    playSound(loadSoundAdv('./sounds/montaje/12.mp3'), false);
    outline('carcasa_b', 'ENABLE');
    tweenCamera('vista_7_position', 'vista_7_direction', 3, function() {});
    registerOnClick('carcasa_b', function() {
      if (animation_counter == 10) {
        outline('carcasa_b', 'DISABLE');

        operateAnimation('PLAY', 'Armature', dictGet(animation11, 'ini'), dictGet(animation11, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 11;
          console.log(animation_counter);
        }, undefined, true);

            registerSetTimeout(3, function() {
          tweenCamera('vista_1_position', 'vista_1_direction', 3, function() {});
        });
      }
    }, function() {});
  }
}

// Describe this function...
function m_paso14() {
  if (animation_counter == 13) {
    playSound(loadSoundAdv('./sounds/montaje/17.mp3'), false);
    outline('seguro_alum_b', 'ENABLE');
    tweenCamera('vista_7_position', 'vista_7_direction', 3, function() {});
    registerOnClick('seguro_alum_b', function() {
      if (animation_counter == 13) {

        operateAnimation('PLAY', 'Armature', dictGet(animation8, 'ini'), dictGet(animation8, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 14;
          console.log(animation_counter);
        }, undefined, true);

            registerSetTimeout(2, function() {
          tweenCamera('vista_1_position', 'vista_1_direction', 3, function() {});
        });
      }
      outline('seguro_alum_b', 'DISABLE');
    }, function() {});
  }
}

// Describe this function...
function m_paso20() {
  if (animation_counter == 19) {
    playSound(loadSoundAdv('./sounds/montaje/22.mp3'), false);
    outline('tubo_compresor', 'ENABLE');
    tweenCamera('vista_7_position', 'vista_7_direction', 3, function() {});
    registerOnClick('tubo_compresor', function() {
      outline('tubo_compresor', 'DISABLE');
      if (animation_counter == 19) {

        operateAnimation('PLAY', 'Armature', dictGet(animation2, 'ini'), dictGet(animation2, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 20;
          console.log(animation_counter);
        }, undefined, true);

            registerSetTimeout(2, function() {
          tweenCamera('vista_1_position', 'vista_1_direction', 3, function() {});
        });
      }
    }, function() {});
  }
}

// Describe this function...
function m_paso12() {
  if (animation_counter == 11) {
    playSound(loadSoundAdv('./sounds/montaje/13.mp3'), false);
    outline('tapa_frontal', 'ENABLE');
    tweenCamera('vista_7_position', 'vista_7_direction', 3, function() {});
    registerOnClick('tapa_frontal', function() {
      if (animation_counter == 11) {
        outline('tapa_frontal', 'DISABLE');

        operateAnimation('PLAY', 'Armature', dictGet(animation10, 'ini'), dictGet(animation10, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 12;
          console.log(animation_counter);
        }, undefined, true);

            registerSetTimeout(3, function() {
          tweenCamera('vista_1_position', 'vista_1_direction', 3, function() {});
        });
      }
    }, function() {});
  }
}

// Describe this function...
function m_paso15() {
  if (animation_counter == 14) {
    playSound(loadSoundAdv('./sounds/montaje/18.mp3'), false);
    outline('perno_05_e', 'ENABLE');
    tweenCamera('vista_7_position', 'vista_7_direction', 3, function() {});
    registerOnClick('perno_05_e', function() {
      outline('perno_05_e', 'DISABLE');
      if (animation_counter == 14) {

        operateAnimation('PLAY', 'Armature', dictGet(animation7, 'ini'), dictGet(animation7, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 15;
          console.log(animation_counter);
        }, undefined, true);

            registerSetTimeout(2, function() {
          tweenCamera('vista_1_position', 'vista_1_direction', 3, function() {});
        });
      }
    }, function() {});
  }
}

// Describe this function...
function m_paso21() {
  if (animation_counter == 20) {
    playSound(loadSoundAdv('./sounds/montaje/23.mp3'), false);
    outline('perno_05_b', 'ENABLE');
    tweenCamera('vista_7_position', 'vista_7_direction', 3, function() {});
    registerOnClick('perno_05_b', function() {
      outline('perno_05_b', 'DISABLE');
      if (animation_counter == 20) {

        operateAnimation('PLAY', 'Armature', dictGet(animation1, 'ini'), dictGet(animation1, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 0;
          console.log(animation_counter);
          playSound(loadSoundAdv('./sounds/montaje/24.mp3'), false);
        }, undefined, true);

            registerSetTimeout(2, function() {
          tweenCamera('vista_1_position', 'vista_1_direction', 3, function() {});
        });
      }
    }, function() {});
  }
}


obj_animaci_C3_B3n1 = ['Armature_perno_05_a_bone', 'Armature_perno_05_b_bone', 'Armature_tubo_compresor_bone'];

animated_objects = ['Armature', 'caja_de_dados_tapa', 'torquimetro_1', 'torquimetro_2', 'torquimetro_3', 'torquimetro_4', 'torquimetro_5', 'torquimetro_6', '<none>', null, null];

animation1 = {};
dictSet(animation1, 'ini', 1);
dictSet(animation1, 'end', 310);
console.log(animation1);
animation2 = {};
dictSet(animation2, 'ini', 310);
dictSet(animation2, 'end', 570);
console.log(animation2);
animation3 = {};
dictSet(animation3, 'ini', 580);
dictSet(animation3, 'end', 980);
console.log(animation3);
animation4 = {};
dictSet(animation4, 'ini', 990);
dictSet(animation4, 'end', 1190);
console.log(animation4);
animation5 = {};
dictSet(animation5, 'ini', 1190);
dictSet(animation5, 'end', 1500);
console.log(animation5);
animation6 = {};
dictSet(animation6, 'ini', 1510);
dictSet(animation6, 'end', 1800);
console.log(animation6);
animation7 = {};
dictSet(animation7, 'ini', 1810);
dictSet(animation7, 'end', 2260);
console.log(animation7);
animation8 = {};
dictSet(animation8, 'ini', 2270);
dictSet(animation8, 'end', 2580);
console.log(animation8);
animation9 = {};
dictSet(animation9, 'ini', 2590);
dictSet(animation9, 'end', 3080);
console.log(animation9);
animation10 = {};
dictSet(animation10, 'ini', 3090);
dictSet(animation10, 'end', 3370);
console.log(animation10);
animation11 = {};
dictSet(animation11, 'ini', 3380);
dictSet(animation11, 'end', 3690);
console.log(animation11);
animation12 = {};
dictSet(animation12, 'ini', 3700);
dictSet(animation12, 'end', 3910);
console.log(animation12);
animation13 = {};
dictSet(animation13, 'ini', 3920);
dictSet(animation13, 'end', 4230);
console.log(animation13);
animation14 = {};
dictSet(animation14, 'ini', 4240);
dictSet(animation14, 'end', 4530);
console.log(animation14);
animation15 = {};
dictSet(animation15, 'ini', 4540);
dictSet(animation15, 'end', 4780);
console.log(animation15);
animation16 = {};
dictSet(animation16, 'ini', 4780);
dictSet(animation16, 'end', 5450);
console.log(animation16);
animation17 = {};
dictSet(animation17, 'ini', 5460);
dictSet(animation17, 'end', 5860);
console.log(animation17);
animation18 = {};
dictSet(animation18, 'ini', 5870);
dictSet(animation18, 'end', 6160);
console.log(animation18);
animation19 = {};
dictSet(animation19, 'ini', 6170);
dictSet(animation19, 'end', 6230);
console.log(animation19);
animation20 = {};
dictSet(animation20, 'ini', 6240);
dictSet(animation20, 'end', 6710);
console.log(animation20);
animation21 = {};
dictSet(animation21, 'ini', 6720);
dictSet(animation21, 'end', 7010);
console.log(animation21);
animation22 = {};
dictSet(animation22, 'ini', 7020);
dictSet(animation22, 'end', 7340);
console.log(animation22);
animation23 = {};
dictSet(animation23, 'ini', 7350);
dictSet(animation23, 'end', 7720);
console.log(animation23);
animation24 = {};
dictSet(animation24, 'ini', 7730);
dictSet(animation24, 'end', 8040);
console.log(animation24);

initFullscreen('fullscreen_button', true, function() {
  console.log('Boton Fullscreen');
}, function() {}, function() {
  setHTMLElemStyle('visibility', 'hidden', 'fullscreen_button', true);
});

torques = ['torquimetro_1', 'torquimetro_2', 'torquimetro_3', 'torquimetro_4', 'torquimetro_5', 'torquimetro_6', 'cabezal_n18_a', 'cabezal_n18_b', 'cabezal_n18_c', 'cabezal_n18_d', 'cabezal_n18_e', 'cabezal_n18_f'];

torq_anm_1 = false;
torq_anm_2 = false;
torq_anm_3 = false;
torq_anm_4 = false;
torq_anm_5 = false;
torq_anm_6 = false;

registerOnHover('caja_de_dados_tapa', function() {
  outline('caja_de_dados_tapa', 'ENABLE');
}, function() {
  outline('caja_de_dados_tapa', 'DISABLE');
});
tapa_var = false;
registerOnClick('caja_de_dados_tapa', function() {
  if (tapa_var == false) {

    operateAnimation('PLAY', 'caja_de_dados_tapa', null, null, 'LoopOnce', 1,
            function() {
      registerOnHover('caja_de_dados_tapa', function() {
        outline('caja_de_dados_tapa', 'DISABLE');
      }, function() {});
    }, undefined, false);

        }
  tapa_var = true;
}, function() {});

changeVis('instance_rotator_torquimetro_1', false);
changeVis('instance_rotator_torquimetro_2', false);
changeVis('instance_rotator_torquimetro_3', false);
changeVis('instance_rotator_torquimetro_4', false);
changeVis('instance_rotator_torquimetro_5', false);
changeVis('instance_rotator_torquimetro_6', false);

eventHTMLElem('click', 'montaje', true, function(event) {
  console.log('Entre al montaje');
  animation_counter = 0;
  reset_montaje();
});
eventHTMLElem('click', 'desmontaje', true, function(event) {
  console.log('Entre al desmontaje');
  animation_counter = 0;
  reset_desmontaje();
});
eventHTMLElem('click', 'd-paso1', true, function(event) {
  d_paso1();
});
eventHTMLElem('click', 'd-paso2', true, function(event) {
  d_paso2();
});
eventHTMLElem('click', 'd-paso3', true, function(event) {
  d_paso3();
});
eventHTMLElem('click', 'd-paso4', true, function(event) {
  d_paso4();
});
eventHTMLElem('click', 'd-paso5', true, function(event) {
  d_paso5();
});
eventHTMLElem('click', 'd-paso6', true, function(event) {
  d_paso6();
});
eventHTMLElem('click', 'd-paso7', true, function(event) {
  d_paso7();
});
eventHTMLElem('click', 'd-paso8', true, function(event) {
  d_paso8();
});
eventHTMLElem('click', 'd-paso9', true, function(event) {
  d_paso9();
});
eventHTMLElem('click', 'd-paso10', true, function(event) {
  d_paso10();
});
eventHTMLElem('click', 'd-paso11', true, function(event) {
  d_paso11();
});
eventHTMLElem('click', 'd-paso12', true, function(event) {
  d_paso12();
});
eventHTMLElem('click', 'd-paso13', true, function(event) {
  d_paso13();
});
eventHTMLElem('click', 'd-paso14', true, function(event) {
  d_paso14();
});
eventHTMLElem('click', 'd-paso15', true, function(event) {
  d_paso15();
});
eventHTMLElem('click', 'd-paso16', true, function(event) {
  d_paso16();
});
eventHTMLElem('click', 'd-paso17', true, function(event) {
  d_paso17();
});
eventHTMLElem('click', 'd-paso18', true, function(event) {
  d_paso18();
});
eventHTMLElem('click', 'd-paso19', true, function(event) {
  d_paso19();
});
eventHTMLElem('click', 'd-paso20', true, function(event) {
  d_paso20();
});
eventHTMLElem('click', 'd-paso21', true, function(event) {
  d_paso21();
});

animation_counter = 0;
setHTMLElemAttribute('value', false, 'estado-animacion', true);
eventHTMLElem('click', 'desmontaje-next', true, function(event) {
  console.log(animation_counter);
  if (animation_counter == 0) {
    d_paso1();
  } else {
    if (animation_counter == 1) {
      d_paso2();
    } else {
      if (animation_counter == 2) {
        d_paso3();
      } else {
        if (animation_counter == 3) {
          d_paso4();
        } else {
          if (animation_counter == 4) {
            d_paso5();
          } else {
            if (animation_counter == 5) {
              d_paso6();
            } else {
              if (animation_counter == 6) {
                d_paso7();
              } else {
                if (animation_counter == 7) {
                  d_paso8();
                } else {
                  if (animation_counter == 8) {
                    d_paso9();
                  } else {
                    if (animation_counter == 9) {
                      d_paso10();
                    } else {
                      if (animation_counter == 10) {
                        d_paso11();
                      } else {
                        if (animation_counter == 11) {
                          d_paso12();
                        } else {
                          if (animation_counter == 12) {
                            d_paso13();
                          } else {
                            if (animation_counter == 13) {
                              d_paso14();
                            } else {
                              if (animation_counter == 14) {
                                d_paso15();
                              } else {
                                if (animation_counter == 15) {
                                  d_paso16();
                                } else {
                                  if (animation_counter == 16) {
                                    d_paso17();
                                  } else {
                                    if (animation_counter == 17) {
                                      d_paso18();
                                    } else {
                                      if (animation_counter == 18) {
                                        d_paso19();
                                      } else {
                                        if (animation_counter == 19) {
                                          d_paso20();
                                        } else {
                                          if (animation_counter == 20) {
                                            d_paso21();
                                          } else {
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
});

eventHTMLElem('click', 'montaje-next', true, function(event) {
  console.log(animation_counter);
  if (animation_counter == 0) {
    m_paso1();
  } else {
    if (animation_counter == 1) {
      m_paso2();
    } else {
      if (animation_counter == 2) {
        m_paso3();
      } else {
        if (animation_counter == 3) {
          m_paso4();
        } else {
          if (animation_counter == 4) {
            m_paso5();
          } else {
            if (animation_counter == 5) {
              m_paso6();
            } else {
              if (animation_counter == 6) {
                m_paso7();
              } else {
                if (animation_counter == 7) {
                  m_paso8();
                } else {
                  if (animation_counter == 8) {
                    m_paso9();
                  } else {
                    if (animation_counter == 9) {
                      m_paso10();
                    } else {
                      if (animation_counter == 10) {
                        m_paso11();
                      } else {
                        if (animation_counter == 11) {
                          m_paso12();
                        } else {
                          if (animation_counter == 12) {
                            m_paso13();
                          } else {
                            if (animation_counter == 13) {
                              m_paso14();
                            } else {
                              if (animation_counter == 14) {
                                m_paso15();
                              } else {
                                if (animation_counter == 15) {
                                  m_paso16();
                                } else {
                                  if (animation_counter == 16) {
                                    m_paso17();
                                  } else {
                                    if (animation_counter == 17) {
                                      m_paso18();
                                    } else {
                                      if (animation_counter == 18) {
                                        m_paso19();
                                      } else {
                                        if (animation_counter == 19) {
                                          m_paso20();
                                        } else {
                                          if (animation_counter == 20) {
                                            m_paso21();
                                          } else {
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
});

audio_list_desmontaje = [loadSoundAdv('./sounds/desmontaje/0.0.mp3'), loadSoundAdv('./sounds/desmontaje/0.1.mp3'), loadSoundAdv('./sounds/desmontaje/0.2.mp3'), loadSoundAdv('./sounds/desmontaje/0.3.mp3'), loadSoundAdv('./sounds/desmontaje/0.4.mp3'), loadSoundAdv('./sounds/desmontaje/0.5.mp3'), loadSoundAdv('./sounds/desmontaje/1.mp3'), loadSoundAdv('./sounds/desmontaje/2.mp3'), loadSoundAdv('./sounds/desmontaje/3.mp3'), loadSoundAdv('./sounds/desmontaje/4.mp3'), loadSoundAdv('./sounds/desmontaje/5.mp3'), loadSoundAdv('./sounds/desmontaje/6.mp3'), loadSoundAdv('./sounds/desmontaje/7.mp3'), loadSoundAdv('./sounds/desmontaje/8.mp3'), loadSoundAdv('./sounds/desmontaje/9.mp3'), loadSoundAdv('./sounds/desmontaje/10.mp3'), loadSoundAdv('./sounds/desmontaje/11.mp3'), loadSoundAdv('./sounds/desmontaje/12.mp3'), loadSoundAdv('./sounds/desmontaje/13.mp3'), loadSoundAdv('./sounds/desmontaje/14.mp3'), loadSoundAdv('./sounds/desmontaje/15.mp3'), loadSoundAdv('./sounds/desmontaje/16.mp3'), loadSoundAdv('./sounds/desmontaje/17.mp3'), loadSoundAdv('./sounds/desmontaje/18.mp3'), loadSoundAdv('./sounds/desmontaje/19.mp3'), loadSoundAdv('./sounds/desmontaje/20.mp3'), loadSoundAdv('./sounds/desmontaje/21.mp3'), loadSoundAdv('./sounds/desmontaje/22.mp3'), loadSoundAdv('./sounds/desmontaje/23.mp3'), loadSoundAdv('./sounds/desmontaje/24.mp3'), loadSoundAdv('./sounds/desmontaje/25.mp3')];
sound_is_playing = false;

audio_list_montaje = [loadSoundAdv('./sounds/montaje/1.mp3'), loadSoundAdv('./sounds/montaje/2.mp3'), loadSoundAdv('./sounds/montaje/3.mp3'), loadSoundAdv('./sounds/montaje/4.mp3'), loadSoundAdv('./sounds/montaje/5.mp3'), loadSoundAdv('./sounds/montaje/6.mp3'), loadSoundAdv('./sounds/montaje/7.mp3'), loadSoundAdv('./sounds/montaje/8.mp3'), loadSoundAdv('./sounds/montaje/9.mp3'), loadSoundAdv('./sounds/montaje/10.mp3'), loadSoundAdv('./sounds/montaje/11.mp3'), loadSoundAdv('./sounds/montaje/12.mp3'), loadSoundAdv('./sounds/montaje/13.mp3'), loadSoundAdv('./sounds/montaje/14.mp3'), loadSoundAdv('./sounds/montaje/15.mp3'), loadSoundAdv('./sounds/montaje/16.mp3'), loadSoundAdv('./sounds/montaje/17.mp3'), loadSoundAdv('./sounds/montaje/18.mp3'), loadSoundAdv('./sounds/montaje/19.mp3'), loadSoundAdv('./sounds/montaje/20.mp3'), loadSoundAdv('./sounds/montaje/21.mp3'), loadSoundAdv('./sounds/montaje/22.mp3'), loadSoundAdv('./sounds/montaje/23.mp3'), loadSoundAdv('./sounds/montaje/24.mp3'), loadSoundAdv('./sounds/montaje/25.mp3')];

whenMoved(torques, 4.65, function() {}, function() {
  if (isSoundPlaying(loadSoundAdv('./sounds/torquimetro.mp3')) == false) {
    playSound(loadSoundAdv('./sounds/torquimetro.mp3'), true);
  }
}, function() {
  stopSound(loadSoundAdv('./sounds/torquimetro.mp3'));
});

eventHTMLElem('click', 'piezas', true, function(event) {
  reset_montaje();
  tweenCamera('vista_8_position', 'vista_8_direction', 3, function() {});
  handleAnnot(true, '1', 'conexion_de_descarga_annotation', 'Conexión de Descarga', '1');
  handleAnnot(true, '2', 'perno_conexion_descarga_annotation', 'Pernos 4cm', '2');
  handleAnnot(true, '3', 'valvula_b_annotation', 'Válvula B', '3');
  handleAnnot(true, '4', 'valvula_a_annotation', 'Válvula A', '4');
  handleAnnot(true, '5', 'perno_valvula_a_annotation', 'Pernos Válvula', '5');
  handleAnnot(true, '6', 'arandela_a_annotation', 'Arandelas', '6');
  handleAnnot(true, '7', 'cilindro_a_annotation', 'Cilindro', '7');
  handleAnnot(true, '8', 'espiral_a_annotation', 'Espiral', '8');
  handleAnnot(true, '9', 'seguro_resorte_a_annotation', 'Seguro de Resorte', '9');
  handleAnnot(true, '10', 'gobernador_de_aire_annotation', 'Gobernador de Aire', '10');
  handleAnnot(true, '11', 'perno_gobernador_de_aire_annotation', 'Pernos 13cm', '11');
  handleAnnot(true, '12', 'arandelas_gobernador_annotation', 'Arandela Simple', '12');
  handleAnnot(true, '13', 'tapa_frontal_annotation', 'Tapa Frontal', '13');
  handleAnnot(true, '14', 'pernos_tapa_frontal_annotation', 'Pernos 10cm', '14');
  handleAnnot(true, '15', 'carcasa_b_annotation', 'Carcasa B', '15');
  handleAnnot(true, '16', 'empaque_annotation', 'Empaque', '16');
  handleAnnot(true, '17', 'tapa_trasera_annotation', 'Tapa trasera', '17');
  handleAnnot(true, '18', 'pernos_tapa_trasera_annotation', 'Pernos 4cm', '18');
  handleAnnot(true, '19', 'piston_a_annotation', 'Pistón A', '19');
  handleAnnot(true, '20', 'piston_b_annotation', 'Pistón B', '20');
  handleAnnot(true, '21', 'seguro_piston_a_annotation', 'Seguro Piston A', '21');
  handleAnnot(true, '22', 'seguro_piston_a', 'Seguro Pistón B', '22');
  handleAnnot(true, '23', 'arandela_piston_a_annotation', 'Arandela Pistón', '23');
  handleAnnot(true, '24', 'perno_piston_b_2', 'Pernos Pistón', '24');
  handleAnnot(true, '25', 'cigueñal_annotation', 'Cigüeñal', '25');
  handleAnnot(true, '26', 'perno_cigueñal_annotation', 'Pernos Cigüeñal', '26');
  handleAnnot(true, '27', 'corasa_annotation', 'Corasa', '27');
});

eventHTMLElem('click', 'm-paso1', true, function(event) {
  m_paso1();
});
eventHTMLElem('click', 'm-paso2', true, function(event) {
  m_paso2();
});
eventHTMLElem('click', 'm-paso3', true, function(event) {
  m_paso3();
});
eventHTMLElem('click', 'm-paso4', true, function(event) {
  m_paso4();
});
eventHTMLElem('click', 'm-paso5', true, function(event) {
  m_paso5();
});
eventHTMLElem('click', 'm-paso6', true, function(event) {
  m_paso6();
});
eventHTMLElem('click', 'm-paso7', true, function(event) {
  m_paso7();
});
eventHTMLElem('click', 'm-paso8', true, function(event) {
  m_paso8();
});
eventHTMLElem('click', 'm-paso9', true, function(event) {
  m_paso9();
});
eventHTMLElem('click', 'm-paso10', true, function(event) {
  m_paso10();
});
eventHTMLElem('click', 'm-paso11', true, function(event) {
  m_paso11();
});
eventHTMLElem('click', 'm-paso12', true, function(event) {
  m_paso12();
});
eventHTMLElem('click', 'm-paso13', true, function(event) {
  m_paso13();
});
eventHTMLElem('click', 'm-paso14', true, function(event) {
  m_paso14();
});
eventHTMLElem('click', 'm-paso15', true, function(event) {
  m_paso15();
});
eventHTMLElem('click', 'm-paso16', true, function(event) {
  m_paso16();
});
eventHTMLElem('click', 'm-paso17', true, function(event) {
  m_paso17();
});
eventHTMLElem('click', 'm-paso18', true, function(event) {
  m_paso18();
});
eventHTMLElem('click', 'm-paso19', true, function(event) {
  m_paso19();
});
eventHTMLElem('click', 'm-paso20', true, function(event) {
  m_paso20();
});
eventHTMLElem('click', 'm-paso21', true, function(event) {
  m_paso21();
});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
