/**
 * Generated by Verge3D Puzzles v.3.9.0
 * Tue Dec 21 2021 20:23:26 GMT-0500 (hora estándar de Perú)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 wrong behavior
            elem.setAttribute(attr, value);
        } else if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}




// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemAttribute('innerHTML', String(Math.round(_initGlob.percentage)) + '%', 'loading_percentage', true);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemStyle('display', 'none', 'preloader_screen', true);
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["posición inicial inici"] = posici_C3_B3n_inicial_inici;
this.procedures["paso1"] = paso1;
this.procedures["paso2"] = paso2;
this.procedures["paso3"] = paso3;
this.procedures["paso4"] = paso4;
this.procedures["paso5"] = paso5;
this.procedures["paso6"] = paso6;
this.procedures["paso7"] = paso7;
this.procedures["paso8"] = paso8;
this.procedures["paso9"] = paso9;
this.procedures["paso10"] = paso10;
this.procedures["paso11"] = paso11;
this.procedures["paso12"] = paso12;
this.procedures["paso13"] = paso13;
this.procedures["paso14"] = paso14;
this.procedures["paso15"] = paso15;
this.procedures["paso16"] = paso16;
this.procedures["paso17"] = paso17;
this.procedures["paso18"] = paso18;
this.procedures["paso19"] = paso19;
this.procedures["paso20"] = paso20;

var PROC = {
    "posición inicial inici": posici_C3_B3n_inicial_inici,
    "paso1": paso1,
    "paso2": paso2,
    "paso3": paso3,
    "paso4": paso4,
    "paso5": paso5,
    "paso6": paso6,
    "paso7": paso7,
    "paso8": paso8,
    "paso9": paso9,
    "paso10": paso10,
    "paso11": paso11,
    "paso12": paso12,
    "paso13": paso13,
    "paso14": paso14,
    "paso15": paso15,
    "paso16": paso16,
    "paso17": paso17,
    "paso18": paso18,
    "paso19": paso19,
    "paso20": paso20,
};

var animation_counter;


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// initFullscreen puzzle
function initFullscreen(id, isParent, cb_enter, cb_exit, cb_unavail) {
    var elem = getElement(id, isParent);
    if (!elem)
        return;
    var doc = isParent ? parent.document: document;
    if (!(doc.fullscreenEnabled ||
        doc.webkitFullscreenEnabled ||
        doc.mozFullScreenEnabled ||
        doc.msFullscreenEnabled)) {
            cb_unavail();
            return;
    }

    function fullscreenClickCb() {
        event.stopPropagation();
        if (doc.fullscreenElement ||
            doc.webkitFullscreenElement ||
            doc.mozFullScreenElement ||
            doc.msFullscreenElement) {
            exitFullscreen();
        } else {
            requestFullscreen(doc.body);
        }
    }
    elem.addEventListener('click', fullscreenClickCb);
    if (v3d.PL.editorEventListeners)
        v3d.PL.editorEventListeners.push([elem, 'click', fullscreenClickCb]);

    function changeFullscreen(event) {
        if (doc.fullscreenElement ||
            doc.webkitFullscreenElement ||
            doc.mozFullScreenElement ||
            doc.msFullscreenElement)
            cb_enter(event);
        else
            cb_exit(event);
    }
    doc.addEventListener('webkitfullscreenchange', changeFullscreen);
    doc.addEventListener('mozfullscreenchange', changeFullscreen);
    doc.addEventListener('msfullscreenchange', changeFullscreen);
    doc.addEventListener('fullscreenchange', changeFullscreen);
    if (v3d.PL.editorEventListeners) {
        v3d.PL.editorEventListeners.push([doc, 'webkitfullscreenchange', changeFullscreen]);
        v3d.PL.editorEventListeners.push([doc, 'mozfullscreenchange', changeFullscreen]);
        v3d.PL.editorEventListeners.push([doc, 'msfullscreenchange', changeFullscreen]);
        v3d.PL.editorEventListeners.push([doc, 'fullscreenchange', changeFullscreen]);
    }

    function requestFullscreen(fselem) {
        if (fselem.requestFullscreen)
            fselem.requestFullscreen();
        else if (fselem.mozRequestFullScreen)
            fselem.mozRequestFullScreen();
        else if (fselem.webkitRequestFullscreen)
            fselem.webkitRequestFullscreen();
        else if (fselem.msRequestFullscreen)
            fselem.msRequestFullscreen();
    }
    function exitFullscreen() {
        if (doc.exitFullscreen)
            doc.exitFullscreen();
        else if (doc.mozCancelFullScreen)
            doc.mozCancelFullScreen();
        else if (doc.webkitExitFullscreen)
            doc.webkitExitFullscreen();
        else if (doc.msExitFullscreen)
            doc.msExitFullscreen();
    }
}


// Describe this function...
function posici_C3_B3n_inicial_inici() {
}


function MediaHTML5(isVideo) {
    this.source = null;
}

Object.assign(MediaHTML5.prototype, {

    load: function(url, isVideo) {
        if (isVideo) {
            this.source = document.createElement('video');
            this.source.playsInline = true;
            this.source.preload = 'auto';
            this.source.autoload = true;
            this.source.crossOrigin = 'anonymous';
        } else {
            this.source = document.createElement('audio');
        }

        this.source.src = url;
        return this;
    },

    play: function() {
        this.source.play();
    },

    pause: function() {
        this.source.pause();
    },

    stop: function() {
        this.source.pause();
        this.source.currentTime = 0;
    },

    rewind: function() {
        this.source.currentTime = 0;
    },

    setPlaybackTime: function(time) {
        this.source.currentTime = time
    },

    getPlaybackTime: function() {
        return this.source.currentTime;
    },

    setPlaybackRate: function(rate) {
        this.source.playbackRate = rate;
    },

    isPlaying: function() {
        return this.source.duration > 0 && !this.source.paused;
    },

    setLoop: function(looped) {
        this.source.loop = looped;
    },

    setVolume: function(volume) {
        this.source.volume = volume;
    },

    setMuted: function(muted) {
        this.source.muted = muted;
    },

});



// loadMedia puzzle
function loadMedia_HTML5(url) {

    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new MediaHTML5().load(url);
    }
    return elems[url];
}



// playSound puzzle
function playSound(mediaElem, loop) {
    if (!mediaElem)
        return;
    mediaElem.setLoop(loop);
    mediaElem.play();
}




// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// outline puzzle
function outline(objSelector, doWhat) {
    var objNames = retrieveObjectNames(objSelector);

    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}



/**
 * mesh or multi-material object
 */
function isMeshObj(obj) {
    if (obj.isMesh)
        return true;

    for (var i = 0; i < obj.children.length; i++) {
        var child = obj.children[i];
        if (child.isMesh && child.isMaterialGeneratedMesh)
            return true;
    }

    return false;
}




function getObjectsFromCollect(obj, type, out) {
    if (!notIgnoredObj(obj))
        return;

    switch (type) {
    case 'ALL':
        if (out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'ANNOTATION':
        if (obj.isAnnotation && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'BONE':
        if (obj.isBone && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'CAMERA':
        if (obj.isCamera && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'EMPTY':
        if (!obj.isAnnotationControl && !obj.isBone && !obj.isCamera && !obj.isGroup &&
                !obj.isLine && !obj.isLOD && !obj.isLight && !isMeshObj(obj) && !obj.isPoints &&
                !obj.isScene && !obj.isSprite && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'LIGHT':
        if (obj.isLight && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'MESH':
        if (isMeshObj(obj) && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    default:
        console.error('getObjectsFrom: Unknown object type: ' + type);
        break;
    }

    for (var i = 0; i < obj.children.length; i++) {
        var child = obj.children[i];
        getObjectsFromCollect(child, type, out);
    }
}

// getObjectsFrom puzzle
function getObjectsFrom(objSelector, type) {

    var out = [];

    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;

        var obj = getObjectByName(objName);
        if (!obj)
            continue;

        getObjectsFromCollect(obj, type, out);
    }

    return out;
}



/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}



/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && "v3d" in scene.userData && "animFrameRate" in scene.userData.v3d) {
        return scene.userData.v3d.animFrameRate;
    }
    return 24;
}



_pGlob.animMixerCallbacks = [];

var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished))
            appInstance.mixer.addEventListener('finished', onMixerFinished);
    };

}();



// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, isPlayAnimCompat, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                // compatibility reasons: deprecated playAnimation puzzles don't
                // change repetitions
                if (!isPlayAnimCompat) {
                    action.repetitions = Infinity;
                }

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 wrong behavior
            elem.setAttribute(attr, value);
        } else if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}



// callJSFunction puzzle
function getJSFunction(funcName) {
    var jsFunc = appInstance.ExternalInterface[funcName];
    if (typeof jsFunc == "function")
        return jsFunc;
    else
        return function() {};
}



// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);
    if (v3d.PL.editorEventListeners)
        v3d.PL.editorEventListeners.push([elem, eventType, pickListener]);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, pickListener);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, pickListener]);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, doubleTapCallback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, doubleTapCallback]);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}



// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);
            var objNames = retrieveObjectNames(objSelector);

            if (objectsIncludeObj(objNames, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}



// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}


// Describe this function...
function paso1() {
  if (animation_counter == 0) {
    playSound(loadMedia_HTML5('./sounds/1.mp3'), false);
    registerSetTimeout(12, function() {
      outline('Cruceta Carvanica', 'ENABLE');
      registerOnClick('Cruceta Carvanica', false, false, [0,1,2], function() {
        if (animation_counter == 0) {
          outline('Cruceta Carvanica', 'DISABLE');

          operateAnimation('PLAY', getObjectsFrom(['ALL_OBJECTS'], 'ALL'), 1, 480, 'AUTO', 1,
                  function() {}, undefined, false);

              animation_counter = 1;
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }
      }, function() {});
    });
  }
}


// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, eventType, callback]);
    }
}


// Describe this function...
function paso5() {
  if (animation_counter == 4) {
    playSound(loadMedia_HTML5('./sounds/5.mp3'), false);
    registerSetTimeout(7, function() {
      outline('Helper_Convertidor_Arriba_eje de rodamientos', 'ENABLE');
      registerOnClick('Helper_Convertidor_Arriba_eje de rodamientos', false, false, [0,1,2], function() {
        if (animation_counter == 4) {
          outline('Helper_Convertidor_Arriba_eje de rodamientos', 'DISABLE');

          operateAnimation('PLAY', getObjectsFrom(['ALL_OBJECTS'], 'ALL'), 2740, 3160, 'AUTO', 1,
                  function() {}, undefined, false);

              animation_counter = 5;
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }
      }, function() {});
    });
  }
}

// Describe this function...
function paso9() {
  if (animation_counter == 8) {
    playSound(loadMedia_HTML5('./sounds/9.mp3'), false);
    outline('Gancho de izaje_01.003', 'ENABLE');
    outline('Gancho de izaje_01.002', 'ENABLE');
    registerSetTimeout(7, function() {
      outline('Gancho de izaje_01.003', 'DISABLE');
      outline('Gancho de izaje_01.002', 'DISABLE');

      operateAnimation('PLAY', getObjectsFrom(['ALL_OBJECTS'], 'ALL'), 4860, 5020, 'AUTO', 1,
              function() {}, undefined, false);

          animation_counter = 9;
      setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
      getJSFunction('emitirEstadoAnimacion')();
    });
  }
}

// Describe this function...
function paso13() {
  if (animation_counter == 12) {
    playSound(loadMedia_HTML5('./sounds/13.mp3'), false);
    registerSetTimeout(7, function() {
      outline('Base Tapa arriba', 'ENABLE');
      registerOnClick('Base Tapa arriba', false, false, [0,1,2], function() {
        if (animation_counter == 12) {
          outline('Base Tapa arriba', 'DISABLE');

          operateAnimation('PLAY', getObjectsFrom(['ALL_OBJECTS'], 'ALL'), 6620, 6780, 'AUTO', 1,
                  function() {}, undefined, false);

              animation_counter = 13;
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }
      }, function() {});
    });
  }
}

// Describe this function...
function paso17() {
  if (animation_counter == 16) {
    playSound(loadMedia_HTML5('./sounds/17.mp3'), false);
    registerSetTimeout(7, function() {
      outline('CarcasaAbajo', 'ENABLE');
      registerOnClick('CarcasaAbajo', false, false, [0,1,2], function() {
        if (animation_counter == 16) {
          outline('CarcasaAbajo', 'DISABLE');

          operateAnimation('PLAY', getObjectsFrom(['ALL_OBJECTS'], 'ALL'), 7920, 9040, 'AUTO', 1,
                  function() {}, undefined, false);

              animation_counter = 17;
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }
      }, function() {});
    });
  }
}

// Describe this function...
function paso2() {
  if (animation_counter == 1) {
    playSound(loadMedia_HTML5('./sounds/2.mp3'), false);
    registerSetTimeout(7, function() {
      outline('Tapa 01_Carcasa', 'ENABLE');
      registerOnClick('Tapa 01_Carcasa', false, false, [0,1,2], function() {
        if (animation_counter == 1) {
          outline('Tapa 01_Carcasa', 'DISABLE');

          operateAnimation('PLAY', getObjectsFrom(['ALL_OBJECTS'], 'ALL'), 480, 1200, 'AUTO', 1,
                  function() {}, undefined, false);

              animation_counter = 2;
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }
      }, function() {});
    });
  }
}

// Describe this function...
function paso6() {
  if (animation_counter == 5) {
    playSound(loadMedia_HTML5('./sounds/6.mp3'), false);
    outline('Carcasa superior_01', 'ENABLE');
    registerSetTimeout(7, function() {
      outline('Carcasa superior_01', 'DISABLE');

      operateAnimation('PLAY', getObjectsFrom(['ALL_OBJECTS'], 'ALL'), 3160, 3280, 'AUTO', 1,
              function() {}, undefined, false);

          animation_counter = 6;
      setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
      getJSFunction('emitirEstadoAnimacion')();
    });
  }
}

// Describe this function...
function paso10() {
  if (animation_counter == 9) {
    playSound(loadMedia_HTML5('./sounds/10.mp3'), false);
    registerSetTimeout(7, function() {
      outline('Carcasa superior_01', 'ENABLE');
      registerOnClick('Carcasa superior_01', false, false, [0,1,2], function() {
        if (animation_counter == 9) {
          outline('Carcasa superior_01', 'DISABLE');

          operateAnimation('PLAY', getObjectsFrom(['ALL_OBJECTS'], 'ALL'), 5020, 6200, 'AUTO', 1,
                  function() {}, undefined, false);

              animation_counter = 10;
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }
      }, function() {});
    });
  }
}

// Describe this function...
function paso14() {
  if (animation_counter == 13) {
    playSound(loadMedia_HTML5('./sounds/14.mp3'), false);
    registerSetTimeout(7, function() {
      outline('Plato 004', 'ENABLE');
      registerOnClick('Plato 004', false, false, [0,1,2], function() {
        if (animation_counter == 13) {
          outline('Plato 004', 'DISABLE');

          operateAnimation('PLAY', getObjectsFrom(['ALL_OBJECTS'], 'ALL'), 6780, 7220, 'AUTO', 1,
                  function() {}, undefined, false);

              animation_counter = 14;
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }
      }, function() {});
    });
  }
}

// Describe this function...
function paso18() {
  if (animation_counter == 17) {
    playSound(loadMedia_HTML5('./sounds/18.mp3'), false);
    registerSetTimeout(7, function() {
      outline('CarcasaAbajo_mov', 'ENABLE');
      registerOnClick('CarcasaAbajo_mov', false, false, [0,1,2], function() {
        if (animation_counter == 17) {
          outline('CarcasaAbajo_mov', 'DISABLE');

          operateAnimation('PLAY', getObjectsFrom(['ALL_OBJECTS'], 'ALL'), 9040, 9640, 'AUTO', 1,
                  function() {}, undefined, false);

              animation_counter = 18;
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }
      }, function() {});
    });
  }
}

// Describe this function...
function paso3() {
  if (animation_counter == 2) {
    playSound(loadMedia_HTML5('./sounds/3.mp3'), false);
    registerSetTimeout(7, function() {
      outline('Carcasa_Convertidor', 'ENABLE');
      registerOnClick('Carcasa_Convertidor', false, false, [0,1,2], function() {
        if (animation_counter == 2) {
          outline('Carcasa_Convertidor', 'DISABLE');

          operateAnimation('PLAY', getObjectsFrom(['ALL_OBJECTS'], 'ALL'), 1200, 2600, 'AUTO', 1,
                  function() {}, undefined, false);

              animation_counter = 3;
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }
      }, function() {});
    });
  }
}

// Describe this function...
function paso7() {
  if (animation_counter == 6) {
    playSound(loadMedia_HTML5('./sounds/7.mp3'), false);
    registerSetTimeout(7, function() {
      outline('Tapa_Convertidor abajo_Abajo', 'ENABLE');
      registerOnClick('Tapa_Convertidor abajo_Abajo', false, false, [0,1,2], function() {
        if (animation_counter == 6) {
          outline('Tapa_Convertidor abajo_Abajo', 'DISABLE');

          operateAnimation('PLAY', getObjectsFrom(['ALL_OBJECTS'], 'ALL'), 3280, 4140, 'AUTO', 1,
                  function() {}, undefined, false);

              animation_counter = 7;
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }
      }, function() {});
    });
  }
}

// Describe this function...
function paso11() {
  if (animation_counter == 10) {
    playSound(loadMedia_HTML5('./sounds/11.mp3'), false);
    outline('Gancho de izaje_01.002', 'ENABLE');
    outline('Gancho de izaje_01.003', 'ENABLE');
    registerSetTimeout(7, function() {
      outline('Gancho de izaje_01.002', 'DISABLE');
      outline('Gancho de izaje_01.003', 'DISABLE');

      operateAnimation('PLAY', getObjectsFrom(['ALL_OBJECTS'], 'ALL'), 6200, 6520, 'AUTO', 1,
              function() {}, undefined, false);

          animation_counter = 11;
      setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
      getJSFunction('emitirEstadoAnimacion')();
    });
  }
}

// Describe this function...
function paso15() {
  if (animation_counter == 14) {
    playSound(loadMedia_HTML5('./sounds/15.mp3'), false);
    registerSetTimeout(7, function() {
      outline('Turbina_01', 'ENABLE');
      registerOnClick('Turbina_01', false, false, [0,1,2], function() {
        if (animation_counter == 14) {
          outline('Turbina_01', 'DISABLE');

          operateAnimation('PLAY', getObjectsFrom(['ALL_OBJECTS'], 'ALL'), 7220, 7800, 'AUTO', 1,
                  function() {}, undefined, false);

              animation_counter = 15;
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }
      }, function() {});
    });
  }
}

// Describe this function...
function paso19() {
  if (animation_counter == 18) {
    playSound(loadMedia_HTML5('./sounds/19.mp3'), false);
    registerSetTimeout(7, function() {
      outline('Tambor del embrague hvb', 'ENABLE');
      registerOnClick('Tambor del embrague hvb', false, false, [0,1,2], function() {
        if (animation_counter == 18) {
          outline('Tambor del embrague hvb', 'DISABLE');

          operateAnimation('PLAY', getObjectsFrom(['ALL_OBJECTS'], 'ALL'), 9640, 9900, 'AUTO', 1,
                  function() {}, undefined, false);

              animation_counter = 19;
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }
      }, function() {});
    });
  }
}

// Describe this function...
function paso4() {
  if (animation_counter == 3) {
    playSound(loadMedia_HTML5('./sounds/4.mp3'), false);
    registerSetTimeout(7, function() {
      outline('Gancho de izaje_01', 'ENABLE');
      outline('Gancho de izaje_01.001', 'ENABLE');
      registerOnClick('Gancho de izaje_01', false, false, [0,1,2], function() {
        if (animation_counter == 3) {
          outline('Gancho de izaje_01', 'DISABLE');
          outline('Gancho de izaje_01.001', 'DISABLE');

          operateAnimation('PLAY', getObjectsFrom(['ALL_OBJECTS'], 'ALL'), 2600, 2740, 'AUTO', 1,
                  function() {}, undefined, false);

              animation_counter = 4;
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }
      }, function() {});
      registerOnClick('Gancho de izaje_01.001', false, false, [0,1,2], function() {
        if (animation_counter == 3) {
          outline('Gancho de izaje_01.001', 'DISABLE');
          outline('Gancho de izaje_01', 'DISABLE');

          operateAnimation('PLAY', getObjectsFrom(['ALL_OBJECTS'], 'ALL'), 2600, 2740, 'AUTO', 1,
                  function() {}, undefined, false);

              animation_counter = 4;
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }
      }, function() {});
    });
  }
}

// Describe this function...
function paso8() {
  if (animation_counter == 7) {
    playSound(loadMedia_HTML5('./sounds/8.mp3'), false);
    registerSetTimeout(7, function() {
      outline('Tapa_Conv_Abajo_02', 'ENABLE');
      registerOnClick('Tapa_Conv_Abajo_02', false, false, [0,1,2], function() {
        if (animation_counter == 7) {
          outline('Tapa_Conv_Abajo_02', 'DISABLE');

          operateAnimation('PLAY', getObjectsFrom(['ALL_OBJECTS'], 'ALL'), 4140, 4860, 'AUTO', 1,
                  function() {}, undefined, false);

              animation_counter = 8;
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }
      }, function() {});
    });
  }
}

// Describe this function...
function paso12() {
  if (animation_counter == 11) {
    playSound(loadMedia_HTML5('./sounds/12.mp3'), false);
    outline('CarcasaAbajo', 'ENABLE');
    registerSetTimeout(7, function() {
      outline('CarcasaAbajo', 'DISABLE');

      operateAnimation('PLAY', getObjectsFrom(['ALL_OBJECTS'], 'ALL'), 6520, 6620, 'AUTO', 1,
              function() {}, undefined, false);

          animation_counter = 12;
      setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
      getJSFunction('emitirEstadoAnimacion')();
    });
  }
}

// Describe this function...
function paso16() {
  if (animation_counter == 15) {
    playSound(loadMedia_HTML5('./sounds/16.mp3'), false);
    registerSetTimeout(7, function() {
      outline('obj_capa_3_54', 'ENABLE');
      registerOnClick('obj_capa_3_54', false, false, [0,1,2], function() {
        if (animation_counter == 15) {
          outline('obj_capa_3_54', 'DISABLE');

          operateAnimation('PLAY', getObjectsFrom(['ALL_OBJECTS'], 'ALL'), 7800, 7920, 'AUTO', 1,
                  function() {}, undefined, false);

              animation_counter = 16;
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }
      }, function() {});
    });
  }
}

// Describe this function...
function paso20() {
  if (animation_counter == 19) {
    playSound(loadMedia_HTML5('./sounds/20.mp3'), false);
    registerSetTimeout(7, function() {
      outline('Base Tapa arriba_mov', 'ENABLE');
      registerOnClick('Base Tapa arriba_mov', false, false, [0,1,2], function() {
        if (animation_counter == 19) {
          outline('Base Tapa arriba_mov', 'DISABLE');

          operateAnimation('PLAY', getObjectsFrom(['ALL_OBJECTS'], 'ALL'), 9900, 13580, 'AUTO', 1,
                  function() {}, undefined, false);

              animation_counter = 20;
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }
      }, function() {});
    });
  }
}


initFullscreen('fullscreen_button', true, function() {
  setHTMLElemStyle('backgroundImage', 'url(./images/fullscreen-close.png)', 'fullscreen_button', true);
}, function() {
  setHTMLElemStyle('backgroundImage', 'url(./images/fullscreen-open.png)', 'fullscreen_button', true);
}, function() {
  setHTMLElemStyle('visibility', 'hidden', 'fullscreen_button', true);
});

animation_counter = 0;
eventHTMLElem('click', 'pro1-btn', true, function(event) {});
eventHTMLElem('click', 'pro1-paso1', true, function(event) {
  paso1();
});
eventHTMLElem('click', 'pro1-paso2', true, function(event) {
  paso2();
});
eventHTMLElem('click', 'pro1-paso3', true, function(event) {
  paso3();
});
eventHTMLElem('click', 'pro1-paso4', true, function(event) {
  paso4();
});
eventHTMLElem('click', 'pro1-paso5', true, function(event) {
  paso5();
});
eventHTMLElem('click', 'pro1-paso6', true, function(event) {
  paso6();
});
eventHTMLElem('click', 'pro1-paso7', true, function(event) {
  paso7();
});
eventHTMLElem('click', 'pro1-paso8', true, function(event) {
  paso8();
});
eventHTMLElem('click', 'pro1-paso9', true, function(event) {
  paso9();
});
eventHTMLElem('click', 'pro1-paso10', true, function(event) {
  paso10();
});
eventHTMLElem('click', 'pro1-paso11', true, function(event) {
  paso11();
});
eventHTMLElem('click', 'pro1-paso12', true, function(event) {
  paso12();
});
eventHTMLElem('click', 'pro1-paso13', true, function(event) {
  paso13();
});
eventHTMLElem('click', 'pro1-paso14', true, function(event) {
  paso14();
});
eventHTMLElem('click', 'pro1-paso15', true, function(event) {
  paso15();
});
eventHTMLElem('click', 'pro1-paso16', true, function(event) {
  paso16();
});
eventHTMLElem('click', 'pro1-paso17', true, function(event) {
  paso17();
});
eventHTMLElem('click', 'pro1-paso18', true, function(event) {
  paso18();
});
eventHTMLElem('click', 'pro1-paso19', true, function(event) {
  paso19();
});
eventHTMLElem('click', 'pro1-paso20', true, function(event) {
  paso20();
});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
