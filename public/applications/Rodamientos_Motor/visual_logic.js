/**
 * Generated by Verge3D Puzzles v.3.3.1
 * Mon Sep 14 2020 09:51:16 GMT-0500 (hora de verano central)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions
var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.objClickCallbacks = [];
_pGlob.pickedObject = '';
_pGlob.objHoverCallbacks = [];
_pGlob.hoveredObject = '';
_pGlob.objMovementInfos = {};
_pGlob.objDragOverCallbacks = [];
_pGlob.objDragOverInfoByBlock = {}
_pGlob.dragMoveOrigins = {};
_pGlob.dragScaleOrigins = {};
_pGlob.mediaElements = {};
_pGlob.loadedFiles = {};
_pGlob.loadedFile = '';
_pGlob.promiseValue = '';
_pGlob.animMixerCallbacks = [];
_pGlob.arHitPoint = new v3d.Vector3(0, 0, 0);
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.animateParamUpdate = null;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.gamepadIndex = 0;

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();
_pGlob.intervals = {};

_pGlob.wooProductInfo = {};

var _pPhysics = {};

_pPhysics.tickCallbacks = [];
_pPhysics.syncList = [];

// internal info
_pPhysics.collisionData = [];

// goes to collision callback
_pPhysics.collisionInfo = {
    objectA: '',
    objectB: '',
    distance: 0,
    positionOnA: [0, 0, 0],
    positionOnB: [0, 0, 0],
    normalOnB: [0, 0, 0]
};

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};

PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    
// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem[attr] = value;
    }
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}




// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemAttribute('innerHTML', String(Math.round(_initGlob.percentage)) + '%', 'loading_percentage', true);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemStyle('display', 'none', 'preloader_screen', true);
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {
initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["demontaje-1"] = demontaje_1;
this.procedures["demontaje-2"] = demontaje_2;
this.procedures["cambio-1"] = cambio_1;
this.procedures["cambio-3"] = cambio_3;
this.procedures["cambio-2"] = cambio_2;
this.procedures["cambio-4"] = cambio_4;
this.procedures["montaje-1"] = montaje_1;
this.procedures["montaje-2"] = montaje_2;

var animation_counter;



// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return (obj.type !== "AmbientLight" && obj.name !== ""
            && !(obj.isMesh && obj.isMaterialGeneratedMesh));
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc;
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// show and hide puzzles
function changeVis(objNames, bool) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}




/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();




// dragRotate puzzle
function dragRotate(objNames, mode, isParentSpace, blockId, parentDragOverBlockId) {
    if (!appInstance.camera) return;

    objNames = retrieveObjectNames(objNames);
    if (!objNames) return;

    var info = _pGlob.objDragOverInfoByBlock[parentDragOverBlockId];
    if (!info) return;

    var coordSystem = getCoordSystem();

    for (var i = 0; i < objNames.length; i++) {
        var obj = getObjectByName(objNames[i]);
        if (!obj) {
            continue;
        }

        if (mode == "X" || mode == "Y" || mode == "Z") {
            var objPos = obj.getWorldPosition(_pGlob.vec3Tmp);
            objPos.project(appInstance.camera);

            var objX = (objPos.x + 1) / 2 * appInstance.getWidth();
            var objY = (-objPos.y + 1) / 2 * appInstance.getHeight();
            var vecFrom = _pGlob.vec2Tmp.set(info.prevX - objX, objY - info.prevY);
            var vecTo = _pGlob.vec2Tmp2.set(info.currX - objX, objY - info.currY);

            if (coordSystem == 'Z_UP_RIGHT')
                var axis = _pGlob.vec3Tmp.copy(mode == "X" ? _pGlob.AXIS_X
                        : (mode == "Y" ? _pGlob.AXIS_Z : _pGlob.AXIS_Y));
            else
                var axis = _pGlob.vec3Tmp.copy(mode == "X" ? _pGlob.AXIS_X
                        : (mode == "Y" ? _pGlob.AXIS_Y : _pGlob.AXIS_Z));

            var quat = _pGlob.quatTmp.setFromAxisAngle(axis, vecTo.angle() - vecFrom.angle());

            // a rotation axis pointing backwards (i.e. co-directionally
            // aligned with the view vector) should have inverted rotation
            var objToCalcSpace = isParentSpace && obj.parent ? obj.parent : obj;
            axis.applyQuaternion(objToCalcSpace.getWorldQuaternion(_pGlob.quatTmp2));

            var viewVec = appInstance.camera.getWorldDirection(_pGlob.vec3Tmp2);
            if (viewVec.dot(axis) > 0) {
                quat.conjugate();
            }

            if (isParentSpace) {
                obj.quaternion.premultiply(quat);
            } else {
                obj.quaternion.multiply(quat);
            }
            obj.updateMatrixWorld(true);
        }
    }
}



// outline puzzle
function outline(objNames, doWhat) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}



// objConstraintAddLimit puzzle
function objConstraintAddLimit(constraintName, objNames, mode, min, max) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames) return;

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName) continue;

        var obj = getObjectByName(objName);
        if (!obj || !obj.constraints) continue;

        for (var j = obj.constraints.length - 1; j >= 0; j--) {
            if (obj.constraints[j].name == constraintName) {
                obj.constraints.splice(j, 1);
            }
        }

        var coordSystem = getCoordSystem();

        switch (mode) {
            case 'POS_X':
            case 'POS_Y':
            case 'POS_Z':
                var cons = new v3d.LimitLocationConstraint();
                cons.name = constraintName;

                if (coordSystem == 'Z_UP_RIGHT')
                    var compIndex = mode == 'POS_X' ? 0 : (mode == 'POS_Y' ? 2 : 1);
                else
                    var compIndex = mode == 'POS_X' ? 0 : (mode == 'POS_Y' ? 1 : 2);

                // swizzle sign and limits order
                if (coordSystem == 'Z_UP_RIGHT' && mode == 'POS_Y') {
                    cons.min.setComponent(compIndex, -max);
                    cons.max.setComponent(compIndex, -min);
                } else {
                    cons.min.setComponent(compIndex, min);
                    cons.max.setComponent(compIndex, max);
                }
                obj.constraints.push(cons);
                break;

            case 'ROT_X':
            case 'ROT_Y':
            case 'ROT_Z':
                var cons = new v3d.LimitRotationConstraint();
                cons.name = constraintName;

                if (coordSystem == 'Z_UP_RIGHT')
                    cons.axis = mode == 'ROT_X' ? 'X' : (mode == 'ROT_Y' ? 'Z' : 'Y');
                else
                    cons.axis = mode == 'ROT_X' ? 'X' : (mode == 'ROT_Y' ? 'Y' : 'Z');

                // swizzle sign and limits order
                if (coordSystem == 'Z_UP_RIGHT' && mode == 'ROT_Y') {
                    cons.min = v3d.Math.degToRad(-max);
                    cons.max = v3d.Math.degToRad(-min);
                } else {
                    cons.min = v3d.Math.degToRad(min);
                    cons.max = v3d.Math.degToRad(max);
                }

                obj.constraints.push(cons);
                break;

            case 'SCALE_X':
            case 'SCALE_Y':
            case 'SCALE_Z':
                var cons = new v3d.LimitScaleConstraint();
                cons.name = constraintName;

                if (coordSystem == 'Z_UP_RIGHT')
                    var compIndex = mode == 'SCALE_X' ? 0 : (mode == 'SCALE_Y' ? 2 : 1);
                else
                    var compIndex = mode == 'SCALE_X' ? 0 : (mode == 'SCALE_Y' ? 1 : 2);

                cons.min.setComponent(compIndex, min);
                cons.max.setComponent(compIndex, max);
                obj.constraints.push(cons);
                break;
        }
    }
}



// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);
    if (eventType == "mousedown") {
        var touchEventName = mouseDownUseTouchStart ? "touchstart" : "touchend";
        elem.addEventListener(touchEventName, pickListener);
    }

    var raycaster = new v3d.Raycaster();
    function pickListener(event) {
        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.camera);
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        if (intersects.length > 0) {
            var obj = intersects[0].object;
            callback(obj, event);
        } else {
            callback(null, event);
        }
    }
}

// utility function used by the whenDraggedOver puzzles
function fireObjectPickingCallbacks(objName, source, index, cbParam) {
    for (var i = 0; i < source.length; i++) {
        var cb = source[i];
        if (objectsIncludeObj([cb[0]], objName)) {
            cb[index](cbParam);
        }
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}



function eventGetOffsetCoords(e, touchId, dest) {
    if (e instanceof MouseEvent) {
        dest.set(e.offsetX, e.offsetY);
    } else if (window.TouchEvent && e instanceof TouchEvent) {
        var rect = e.target.getBoundingClientRect();
        var touches = e.touches;
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            touches = e.changedTouches;
        }

        var touch = touches[0];
        for (var i = 0; i < touches.length; i++) {
            if (touches[i].identifier == touchId) {
                touch = touches[i];
                break;
            }
        }

        dest.set(touch.clientX - rect.left, touch.clientY - rect.top);
    }
    return dest;
}



function eventTouchIdGetFirst(e) {
    if (e instanceof MouseEvent) {
        return -1;
    } else if (window.TouchEvent && e instanceof TouchEvent) {
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            return e.changedTouches[0].identifier;
        } else {
            return e.touches[0].identifier;
        }
    }
    return -1;
}



/**
 * For "touchstart", "touchend" and "touchmove" events returns true if a touch
 * object with the provided touch id is in the changedTouches array, otherwise
 * - false. For other events returns true.
 */
function eventTouchIdChangedFilter(e, touchId) {
    if (window.TouchEvent && e instanceof TouchEvent) {
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            var isChanged = false;
            for (var i = 0; i < e.changedTouches.length; i++) {
                if (e.changedTouches[i].identifier == touchId) {
                    isChanged = true;
                    break;
                }
            }
            return isChanged;
        }
    }

    return true;
}



function initDragOverInfo() {
    return {
        draggedObjName: '',
        downX: 0, downY: 0,
        prevX: 0, prevY: 0,
        currX: 0, currY: 0,
        isDowned: false,
        isMoved: false,
        touchId: -1
    };
}



// whenDraggedOver puzzle
initObjectPicking(function(obj, downEvent) {
    if (!obj) {
        return;
    }

    var objName = getPickedObjectName(obj);
    fireObjectPickingCallbacks(objName, _pGlob.objDragOverCallbacks, 1,
            { downEvent: downEvent, draggedObjName: objName });
}, "mousedown", true);



// whenDraggedOver puzzle
function registerOnDrag(objNames, callback_start, callback_move, callback_drop, blockId) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    var cb = function(cbParam) {

        if (appInstance.controls) {
            appInstance.controls.enabled = false;
        }

        if (!(blockId in _pGlob.objDragOverInfoByBlock)) {
            _pGlob.objDragOverInfoByBlock[blockId] = initDragOverInfo();
        }
        var info = _pGlob.objDragOverInfoByBlock[blockId];

        // NOTE: don't use more than one pointing event, e.g. don't process
        // some events related to multitouch actions
        if (info.isDowned) {
            return;
        }

        var touchId = eventTouchIdGetFirst(cbParam.downEvent);
        var coords = eventGetOffsetCoords(cbParam.downEvent, touchId,
                _pGlob.vec2Tmp);

        info.downX = info.prevX = info.currX = coords.x;
        info.downY = info.prevY = info.currY = coords.y;
        info.touchId = touchId;
        info.isDowned = true;
        info.isMoved = false;
        info.draggedObjName = cbParam.draggedObjName;

        callback_start();

        var elem = appInstance.container;

        var moveCb = function(e) {
            if (!eventTouchIdChangedFilter(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.prevX = info.currX;
            info.prevY = info.currY;
            info.currX = coords.x;
            info.currY = coords.y;
            callback_move();
            info.isMoved = true;
        }
        var upCb = function(e) {
            if (!eventTouchIdChangedFilter(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.currX = coords.x;
            info.currY = coords.y;
            info.prevX = info.currX;
            info.prevY = info.currY;
            callback_drop();
            info.isDowned = false;

            elem.removeEventListener("mousemove", moveCb, false);
            elem.removeEventListener("touchmove", moveCb, false);
            elem.removeEventListener("mouseup", upCb, false);
            elem.removeEventListener("touchend", upCb, false);
            if (appInstance.controls) {
                appInstance.controls.enabled = true;
            }
        }

        elem.addEventListener("mousemove", moveCb, false);
        elem.addEventListener("touchmove", moveCb, false);
        elem.addEventListener("mouseup", upCb, false);
        elem.addEventListener("touchend", upCb, false);
    }
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName) continue;
        _pGlob.objDragOverCallbacks.push([objName, cb]);
    }
}



// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = appInstance.camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(worldTarget, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (appInstance.camera.parent) {
            appInstance.camera.parent.worldToLocal(worldPos);
        }
        appInstance.camera.position.copy(worldPos);
        appInstance.camera.lookAt(worldTarget);
        doSlot();
    }
}



// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback, false);
    }
}



// loadSound puzzle
function loadSoundAdv(url) {
    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = document.createElement('audio');
        elems[url].src = url;
    }
    return elems[url];
}



// playSound puzzle
function playSound(audioElem, loop) {
    if (!audioElem)
        return;
    audioElem.loop = loop;
    audioElem.play();
}



/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}



/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && "v3d" in scene.userData && "animFrameRate" in scene.userData.v3d) {
        return scene.userData.v3d.animFrameRate;
    }
    return 24;
}



var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished))
            appInstance.mixer.addEventListener('finished', onMixerFinished);
    };

}();



// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, isPlayAnimCompat, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                // compatibility reasons: deprecated playAnimation puzzles don't
                // change repetitions
                if (!isPlayAnimCompat) {
                    action.repetitions = Infinity;
                }

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem[attr] = value;
    }
}



// callJSFunction puzzle
function getJSFunction(funcName) {
    var jsFunc = appInstance.ExternalInterface[funcName];
    if (typeof jsFunc == "function")
        return jsFunc;
    else
        return function() {};
}



// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}



// whenClicked puzzle
initObjectPicking(function(obj) {

    // save the object for the pickedObject block
    _pGlob.pickedObject = obj ? getPickedObjectName(obj) : '';

    _pGlob.objClickCallbacks.forEach(function(el) {
        var isPicked = obj && objectsIncludeObj(el.objNames, getPickedObjectName(obj));
        el.callbacks[isPicked ? 0 : 1]();
    });
}, 'mousedown');



// whenClicked puzzle
function registerOnClick(objNames, cbDo, cbIfMissedDo) {
    objNames = retrieveObjectNames(objNames) || [];
    var objNamesFiltered = objNames.filter(function(name) {
        return name;
    });
    _pGlob.objClickCallbacks.push({
        objNames: objNamesFiltered,
        callbacks: [cbDo, cbIfMissedDo]
    });
}


// Describe this function...
function demontaje_1() {
  if (animation_counter == 0) {
    changeVis('rodaje_delantero_nuevo_constante', false);
    playSound(loadSoundAdv('./sounds/paso1.mp3'), false);
    outline('desarmador', 'ENABLE');
    registerOnClick('desarmador', function() {
      if (animation_counter == 0) {
        outline('desarmador', 'DISABLE');

        operateAnimation('PLAY', 'desarmador', 1, 150, 'LoopOnce', 1,
                function() {
          changeVis('rotador_destornillador', true);
          animation_counter = 1;
          registerSetTimeout(3, function() {
            changeVis('rotador_destornillador', false);

            operateAnimation('PLAY', 'desarmador', 1, 150, 'LoopOnce', 1,
                    function() {

              operateAnimation('PLAY', 'perno_motor_1', 1, 170, 'LoopOnce', 1,
                      function() {}, undefined, false);


              operateAnimation('PLAY', 'perno_motor_2', 1, 170, 'LoopOnce', 1,
                      function() {}, undefined, false);


              operateAnimation('PLAY', 'perno_motor_3', 1, 170, 'LoopOnce', 1,
                      function() {}, undefined, false);


              operateAnimation('PLAY', 'perno_motor_4', 1, 170, 'LoopOnce', 1,
                      function() {
                animation_counter = 1;
                console.log(animation_counter);
                setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
                getJSFunction('emitirEstadoAnimacion')();
              }, undefined, false);

                  }, undefined, true);

                });
        }, undefined, false);

            }
    }, function() {});
  }
}

// Describe this function...
function demontaje_2() {
  if (animation_counter == 1) {
    outline('tapa_delantera', 'ENABLE');
    playSound(loadSoundAdv('./sounds/paso2.mp3'), false);
    registerOnClick('tapa_delantera', function() {
      if (animation_counter == 1) {
        outline('tapa_delantera', 'DISABLE');

        operateAnimation('PLAY', 'tapa_delantera', 1, 230, 'LoopOnce', 1,
                function() {
          animation_counter = 2;
          console.log(animation_counter);
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }, undefined, false);

            }
    }, function() {});
  }
}

// Describe this function...
function cambio_1() {
  if (animation_counter == 2) {
    playSound(loadSoundAdv('./sounds/paso3.mp3'), false);
    changeVis('rodaje_delantero_nuevo_constante', false);
    outline('eje_motor', 'ENABLE');
    registerOnClick('eje_motor', function() {
      if (animation_counter == 2) {
        outline('eje_motor', 'DISABLE');
        changeVis('rodaje_delantero_nuevo_constante', false);

        operateAnimation('PLAY', 'eje_motor', 1, 190, 'LoopOnce', 1,
                function() {}, undefined, false);


        operateAnimation('PLAY', 'rodaje_delantero', 1, 190, 'LoopOnce', 1,
                function() {

          operateAnimation('PLAY', 'eje_extractor', 1, 305, 'LoopOnce', 1,
                  function() {

            operateAnimation('PLAY', 'garra_a_1', 250, 280, 'LoopOnce', 1,
                    function() {}, undefined, false);


            operateAnimation('PLAY', 'garra_b_1', 250, 280, 'LoopOnce', 1,
                    function() {}, undefined, false);

                changeVis('rotador_extractor_b', true);

            operateAnimation('PLAY', 'eje_extractor', 305, 365, 'LoopOnce', 0.1,
                    function() {}, undefined, false);


            operateAnimation('PLAY', 'rodaje_delantero', 200, 260, 'LoopOnce', 0.1,
                    function() {
              animation_counter = 3;
              registerSetTimeout(7, function() {
                changeVis('rotador_extractor_b', false);

                operateAnimation('PLAY', 'garra_a_1', 250, 280, 'LoopOnce', 1,
                        function() {}, undefined, true);


                operateAnimation('PLAY', 'garra_b_1', 250, 280, 'LoopOnce', 1,
                        function() {

                  operateAnimation('PLAY', 'eje_extractor', 1, 365, 'LoopOnce', 1,
                          function() {

                    operateAnimation('PLAY', 'rodaje_delantero', 265, 480, 'LoopOnce', 1,
                            function() {

                      operateAnimation('PLAY', 'eje_motor', 200, 360, 'LoopOnce', 1,
                              function() {
                        animation_counter = 3;
                        console.log(animation_counter);
                        setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
                        getJSFunction('emitirEstadoAnimacion')();
                      }, undefined, false);

                          }, undefined, false);

                        }, undefined, true);

                      }, undefined, true);

                    });
            }, undefined, false);

                }, undefined, false);

              }, undefined, false);

            }
    }, function() {});
  }
}

// Describe this function...
function cambio_3() {
  if (animation_counter == 4) {
    playSound(loadSoundAdv('./sounds/paso5.mp3'), false);
    outline('rodaje_delantero_nuevo_anm', 'ENABLE');
    registerOnClick('rodaje_delantero_nuevo_anm', function() {
      if (animation_counter == 4) {
        outline('rodaje_delantero_nuevo_anm', 'DISABLE');

        operateAnimation('PLAY', 'rodaje_delantero_nuevo_anm', 1, 175, 'LoopOnce', 1,
                function() {

          operateAnimation('PLAY', 'calentador_arm', 1, 60, 'LoopOnce', 1,
                  function() {

            operateAnimation('PLAY', 'rodaje_delantero_nuevo_anm', 175, 200, 'LoopOnce', 1,
                    function() {

              operateAnimation('PLAY', 'calentador_arm', 1, 60, 'LoopOnce', 1,
                      function() {
                registerSetTimeout(3, function() {

                  operateAnimation('PLAY', 'calentador_arm', 1, 60, 'LoopOnce', 1,
                          function() {
                    registerSetTimeout(3, function() {

                      operateAnimation('PLAY', 'rodaje_delantero_nuevo_anm', 210, 410, 'LoopOnce', 1,
                              function() {
                        animation_counter = 5;
                        console.log(animation_counter);
                        setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
                        getJSFunction('emitirEstadoAnimacion')();
                      }, undefined, false);

                          });
                  }, undefined, false);

                      });
              }, undefined, true);

                  }, undefined, false);

                }, undefined, false);

              }, undefined, false);

            }
    }, function() {});
  }
}

// Describe this function...
function cambio_2() {
  if (animation_counter == 3) {
    playSound(loadSoundAdv('./sounds/paso4.mp3'), false);
    outline('base_amortiguadora', 'ENABLE');
    registerOnClick('base_amortiguadora', function() {
      if (animation_counter == 3) {
        outline('base_amortiguadora', 'DISABLE');

        operateAnimation('PLAY', 'base_amortiguadora', 1, 160, 'LoopOnce', 1,
                function() {
          registerSetTimeout(1, function() {

            operateAnimation('PLAY', 'base_amortiguadora', 160, 220, 'LoopOnce', 1,
                    function() {
              animation_counter = 4;
              console.log(animation_counter);
              setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
              getJSFunction('emitirEstadoAnimacion')();
            }, undefined, false);

                });
        }, undefined, false);

            }
    }, function() {});
  }
}

// Describe this function...
function cambio_4() {
  if (animation_counter == 5) {
    playSound(loadSoundAdv('./sounds/paso6.mp3'), false);
    outline('rodaje_delantero_nuevo_anm', 'ENABLE');
    registerOnClick('rodaje_delantero_nuevo_anm', function() {
      outline('rodaje_delantero_nuevo_anm', 'DISABLE');

      operateAnimation('PLAY', 'rodaje_delantero_nuevo_anm', 415, 570, 'LoopOnce', 1,
              function() {
        outline('base_amortiguadora', 'ENABLE');
        registerOnClick('base_amortiguadora', function() {
          if (animation_counter == 5) {
            outline('base_amortiguadora', 'DISABLE');

            operateAnimation('PLAY', 'base_amortiguadora', 225, 400, 'LoopOnce', 1,
                    function() {
              outline('manga_de_fibra', 'ENABLE');
              registerOnClick('manga_de_fibra', function() {
                if (animation_counter == 5) {
                  outline('manga_de_fibra', 'DISABLE');

                  operateAnimation('PLAY', 'manga_de_fibra', 1, 230, 'LoopOnce', 1,
                          function() {
                    outline('combita_de_goma', 'ENABLE');
                    registerOnClick('combita_de_goma', function() {
                      if (animation_counter == 5) {
                        outline('combita_de_goma', 'DISABLE');

                        operateAnimation('PLAY', 'combita_de_goma', 1, 160, 'LoopOnce', 1,
                                function() {

                          operateAnimation('PLAY', 'combita_de_goma', 170, 209, 'LoopOnce', 1,
                                  function() {

                            operateAnimation('PLAY', 'combita_de_goma', 209, 220, 'LoopOnce', 1,
                                    function() {}, undefined, false);


                            operateAnimation('PLAY', 'manga_de_fibra', 240, 260, 'LoopOnce', 1,
                                    function() {}, undefined, false);


                            operateAnimation('PLAY', 'base_amortiguadora', 410, 430, 'LoopOnce', 1,
                                    function() {}, undefined, false);


                            operateAnimation('PLAY', 'rodaje_delantero_nuevo_anm', 580, 600, 'LoopOnce', 1,
                                    function() {

                              operateAnimation('PLAY', 'combita_de_goma', 230, 269, 'LoopOnce', 1,
                                      function() {

                                operateAnimation('PLAY', 'combita_de_goma', 269, 280, 'LoopOnce', 1,
                                        function() {}, undefined, false);


                                operateAnimation('PLAY', 'manga_de_fibra', 260, 280, 'LoopOnce', 1,
                                        function() {}, undefined, false);


                                operateAnimation('PLAY', 'base_amortiguadora', 430, 450, 'LoopOnce', 1,
                                        function() {}, undefined, false);


                                operateAnimation('PLAY', 'rodaje_delantero_nuevo_anm', 600, 620, 'LoopOnce', 1,
                                        function() {

                                  operateAnimation('PLAY', 'combita_de_goma', 290, 339, 'LoopOnce', 1,
                                          function() {

                                    operateAnimation('PLAY', 'combita_de_goma', 339, 340, 'LoopOnce', 1,
                                            function() {}, undefined, false);


                                    operateAnimation('PLAY', 'manga_de_fibra', 280, 300, 'LoopOnce', 1,
                                            function() {}, undefined, false);


                                    operateAnimation('PLAY', 'base_amortiguadora', 450, 470, 'LoopOnce', 1,
                                            function() {}, undefined, false);


                                    operateAnimation('PLAY', 'rodaje_delantero_nuevo_anm', 620, 640, 'LoopOnce', 1,
                                            function() {
                                      animation_counter = 6;
                                      console.log(animation_counter);
                                      changeVis('rodaje_delantero_nuevo_anm', false);
                                      changeVis('rodaje_delantero_nuevo_constante', true);

                                      operateAnimation('PLAY', 'combita_de_goma', 1, 170, 'LoopOnce', 1,
                                              function() {

                                        operateAnimation('PLAY', 'manga_de_fibra', 1, 230, 'LoopOnce', 1,
                                                function() {

                                          operateAnimation('PLAY', 'base_amortiguadora', 220, 470, 'LoopOnce', 1,
                                                  function() {
                                            setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
                                            getJSFunction('emitirEstadoAnimacion')();
                                          }, undefined, true);

                                              }, undefined, true);

                                            }, undefined, true);

                                          }, undefined, false);

                                        }, undefined, false);

                                      }, undefined, false);

                                    }, undefined, false);

                                  }, undefined, false);

                                }, undefined, false);

                              }, undefined, false);

                            }
                    }, function() {});
                  }, undefined, false);


                  operateAnimation('PLAY', 'Line013', 0, 60, 'LoopOnce', 1,
                          function() {

                    operateAnimation('PLAY', 'Line013', 0, 60, 'LoopOnce', 1,
                            function() {}, undefined, true);

                        }, undefined, false);


                  operateAnimation('PLAY', 'Line014', 0, 60, 'LoopOnce', 1,
                          function() {

                    operateAnimation('PLAY', 'Line014', 0, 60, 'LoopOnce', 1,
                            function() {}, undefined, true);

                        }, undefined, false);

                      }
              }, function() {});
            }, undefined, false);

                }
        }, function() {});
      }, undefined, false);

          }, function() {});
  }
}

// Describe this function...
function montaje_1() {
  if (animation_counter == 6) {
    playSound(loadSoundAdv('./sounds/paso7.mp3'), false);
    outline('tapa_delantera', 'ENABLE');
    registerOnClick('tapa_delantera', function() {
      if (animation_counter == 6) {
        outline('tapa_delantera', 'DISABLE');

        operateAnimation('PLAY', 'tapa_delantera', 1, 230, 'LoopOnce', 1,
                function() {
          animation_counter = 7;
          console.log(animation_counter);
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }, undefined, true);

            }
    }, function() {});
  }
}

// Describe this function...
function montaje_2() {
  if (animation_counter == 7) {
    changeVis('rodaje_delantero_nuevo_constante', false);
    playSound(loadSoundAdv('./sounds/paso8.mp3'), false);

    operateAnimation('PLAY', 'perno_motor_1', 1, 170, 'LoopOnce', 1,
            function() {}, undefined, true);


    operateAnimation('PLAY', 'perno_motor_2', 1, 170, 'LoopOnce', 1,
            function() {}, undefined, true);


    operateAnimation('PLAY', 'perno_motor_3', 1, 170, 'LoopOnce', 1,
            function() {}, undefined, true);


    operateAnimation('PLAY', 'perno_motor_4', 1, 170, 'LoopOnce', 1,
            function() {
      outline('desarmador', 'ENABLE');
      registerOnClick('desarmador', function() {
        if (animation_counter == 7) {
          outline('desarmador', 'DISABLE');

          operateAnimation('PLAY', 'desarmador', 1, 150, 'LoopOnce', 1,
                  function() {
            changeVis('rotador_destornillador', true);
            registerSetTimeout(6, function() {
              changeVis('rotador_destornillador', false);

              operateAnimation('PLAY', 'desarmador', 1, 150, 'LoopOnce', 1,
                      function() {
                animation_counter = 0;
                console.log(animation_counter);
                setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
                getJSFunction('emitirEstadoAnimacion')();
              }, undefined, true);

                  });
          }, undefined, false);

              }
      }, function() {});
    }, undefined, true);

        }
}


changeVis('rotador_destornillador', false);
registerOnDrag('rotador_destornillador', function() {},
            function() {
  dragRotate('desarmador', 'X', true, 'n_Ac0b9?FNxVr05[(-xQ', 'WeGAiZ4Inh[=u1wupijv');
  outline('rotador_destornillador', 'ENABLE');
  objConstraintAddLimit('limit 1', 'rotador_destornillador', 'POS_X', 360, 0);
},
            function() {
  outline('rotador_destornillador', 'DISABLE');
}, 'WeGAiZ4Inh[=u1wupijv');

changeVis('rotador_extractor_b', false);
registerOnDrag('rotador_extractor_b', function() {},
            function() {
  dragRotate('eje_extractor', 'X', true, 'q94hz[DLOQB?)2sO?d}K', '+lebIMN?`gY:m4L!o3V9');
  outline('rotador_extractor_b', 'ENABLE');
  objConstraintAddLimit('limit 1', 'rotador_extractor_b', 'POS_X', 360, 0);
},
            function() {
  outline('rotador_destornillador', 'DISABLE');
}, '+lebIMN?`gY:m4L!o3V9');

animation_counter = 0;
eventHTMLElem('click', 'pro1-btn', true, function(event) {
  console.log('1. Desmontaje de la Carcasa del motor');
  tweenCamera('', '', 3, function() {}, 0);
});
eventHTMLElem('click', 'pro1-paso1', true, function(event) {
  demontaje_1();
});
eventHTMLElem('click', 'pro1-paso2', true, function(event) {
  demontaje_2();
});

animation_counter = 0;
eventHTMLElem('click', 'pro2-btn', true, function(event) {
  console.log('2. Cambio de Rodamiento');
  tweenCamera('', '', 3, function() {}, 0);
});
eventHTMLElem('click', 'pro2-paso3', true, function(event) {
  cambio_1();
});
eventHTMLElem('click', 'pro2-paso4', true, function(event) {
  cambio_2();
});
eventHTMLElem('click', 'pro2-paso5', true, function(event) {
  cambio_3();
});
eventHTMLElem('click', 'pro2-paso6', true, function(event) {
  cambio_4();
});

animation_counter = 0;
eventHTMLElem('click', 'pro3-btn', true, function(event) {
  console.log('3 Desmontaje');
  tweenCamera('', '', 3, function() {}, 0);
});
eventHTMLElem('click', 'pro3-paso7', true, function(event) {
  montaje_1();
});
eventHTMLElem('click', 'pro3-paso8', true, function(event) {
  montaje_2();
});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
