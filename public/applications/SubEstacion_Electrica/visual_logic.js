/**
 * Generated by Verge3D Puzzles v.3.3.1
 * Thu Oct 08 2020 15:41:52 GMT-0500 (hora de verano central)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions
var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.objClickCallbacks = [];
_pGlob.pickedObject = '';
_pGlob.objHoverCallbacks = [];
_pGlob.hoveredObject = '';
_pGlob.objMovementInfos = {};
_pGlob.objDragOverCallbacks = [];
_pGlob.objDragOverInfoByBlock = {}
_pGlob.dragMoveOrigins = {};
_pGlob.dragScaleOrigins = {};
_pGlob.mediaElements = {};
_pGlob.loadedFiles = {};
_pGlob.loadedFile = '';
_pGlob.promiseValue = '';
_pGlob.animMixerCallbacks = [];
_pGlob.arHitPoint = new v3d.Vector3(0, 0, 0);
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.animateParamUpdate = null;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.gamepadIndex = 0;

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();
_pGlob.intervals = {};

_pGlob.wooProductInfo = {};

var _pPhysics = {};

_pPhysics.tickCallbacks = [];
_pPhysics.syncList = [];

// internal info
_pPhysics.collisionData = [];

// goes to collision callback
_pPhysics.collisionInfo = {
    objectA: '',
    objectB: '',
    distance: 0,
    positionOnA: [0, 0, 0],
    positionOnB: [0, 0, 0],
    normalOnB: [0, 0, 0]
};

var _noWebAudioReported = false;

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};

PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 worng behavior
            elem.setAttribute(attr, value);
        } else {
            elem[attr] = value;
        }
    }
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}




// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemAttribute('innerHTML', String(Math.round(_initGlob.percentage)) + '%', 'loading_percentage', true);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemStyle('display', 'none', 'preloader_screen', true);
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {
initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["mute"] = mute;
this.procedures["un-mute"] = un_mute;
this.procedures["setear_animaciones"] = setear_animaciones;
this.procedures["montaje-2"] = montaje_2;
this.procedures["montaje-3"] = montaje_3;
this.procedures["montaje-6"] = montaje_6;
this.procedures["montaje-1"] = montaje_1;
this.procedures["montaje-8.2"] = montaje_8_2;
this.procedures["montaje-5"] = montaje_5;
this.procedures["montaje-4"] = montaje_4;
this.procedures["montaje-7"] = montaje_7;
this.procedures["montaje-9"] = montaje_9;
this.procedures["montaje-10"] = montaje_10;

var PROC = {
    "mute": mute,
    "un-mute": un_mute,
    "setear_animaciones": setear_animaciones,
    "montaje-2": montaje_2,
    "montaje-3": montaje_3,
    "montaje-6": montaje_6,
    "montaje-1": montaje_1,
    "montaje-8.2": montaje_8_2,
    "montaje-5": montaje_5,
    "montaje-4": montaje_4,
    "montaje-7": montaje_7,
    "montaje-9": montaje_9,
    "montaje-10": montaje_10,
};

var animation_counter;



// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return (obj.type !== "AmbientLight" && obj.name !== ""
            && !(obj.isMesh && obj.isMaterialGeneratedMesh));
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc;
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// show and hide puzzles
function changeVis(objNames, bool) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}



// setActiveCamera puzzle
function setActiveCamera(camName) {
    var camera = getObjectByName(camName);
    if (!camera || !camera.isCamera || appInstance.camera == camera)
        return;
    appInstance.setCamera(camera);
}



function MediaHTML5(isVideo) {
    this.source = null;
}

Object.assign(MediaHTML5.prototype, {

    load: function(url, isVideo) {
        if (isVideo) {
            this.source = document.createElement('video');
            this.source.playsInline = true;
            this.source.preload = 'auto';
            this.source.autoload = true;
            this.source.crossOrigin = 'anonymous';
        } else {
            this.source = document.createElement('audio');
        }

        this.source.src = url;
        return this;
    },

    play: function() {
        this.source.play();
    },

    pause: function() {
        this.source.pause();
    },

    stop: function() {
        this.source.pause();
        this.source.currentTime = 0;
    },

    rewind: function() {
        this.source.currentTime = 0;
    },

    isPlaying: function() {
        return this.source.duration > 0 && !this.source.paused;
    },

    setLoop: function(looped) {
        this.source.loop = looped;
    },

    setVolume: function(volume) {
        this.source.volume = volume;
    },

    setMuted: function(muted) {
        this.source.muted = muted;
    },

});



// loadMedia puzzle
function loadMedia_HTML5(url) {

    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new MediaHTML5().load(url);
    }
    return elems[url];
}



// stopSound puzzle
function stopSound(mediaElem) {
    if (!mediaElem) {
        return;
    }
    mediaElem.stop();
}



// rewindSound puzzle
function rewindSound(mediaElem) {
    if (!mediaElem)
        return;
    mediaElem.rewind();
}


// Describe this function...
function mute() {
  stopSound(loadMedia_HTML5('./sounds/paso1.mp3'));
  stopSound(loadMedia_HTML5('./sounds/paso2.mp3'));
  stopSound(loadMedia_HTML5('./sounds/paso3.mp3'));
  stopSound(loadMedia_HTML5('./sounds/paso3_1.mp3'));
  stopSound(loadMedia_HTML5('./sounds/paso3_2.mp3'));
  stopSound(loadMedia_HTML5('./sounds/paso3_3.mp3'));
  stopSound(loadMedia_HTML5('./sounds/paso4.mp3'));
  stopSound(loadMedia_HTML5('./sounds/paso5.mp3'));
  stopSound(loadMedia_HTML5('./sounds/paso6.mp3'));
  stopSound(loadMedia_HTML5('./sounds/paso7.mp3'));
  stopSound(loadMedia_HTML5('./sounds/paso8.mp3'));
  stopSound(loadMedia_HTML5('./sounds/paso9.mp3'));
  stopSound(loadMedia_HTML5('./sounds/paso10.mp3'));
  stopSound(loadMedia_HTML5('./sounds/paso11.mp3'));
  stopSound(loadMedia_HTML5('./sounds/paso12.mp3'));
  stopSound(loadMedia_HTML5('./sounds/paso13.mp3'));
  stopSound(loadMedia_HTML5('./sounds/check.mp3'));
  rewindSound(loadMedia_HTML5('./sounds/check.mp3'));
}


// soundVideoUnmute puzzle
function soundVideoUnmute(mediaElem) {
    if (!mediaElem) {
        return;
    }
    mediaElem.setMuted(false);
}


// Describe this function...
function un_mute() {
  soundVideoUnmute(loadMedia_HTML5('./sounds/paso1.mp3'));
  soundVideoUnmute(loadMedia_HTML5('./sounds/paso2.mp3'));
  soundVideoUnmute(loadMedia_HTML5('./sounds/paso3.mp3'));
  soundVideoUnmute(loadMedia_HTML5('./sounds/paso3_1.mp3'));
  soundVideoUnmute(loadMedia_HTML5('./sounds/paso3_2.mp3'));
  soundVideoUnmute(loadMedia_HTML5('./sounds/paso3_3.mp3'));
  soundVideoUnmute(loadMedia_HTML5('./sounds/paso4.mp3'));
  soundVideoUnmute(loadMedia_HTML5('./sounds/paso5.mp3'));
  soundVideoUnmute(loadMedia_HTML5('./sounds/paso6.mp3'));
  soundVideoUnmute(loadMedia_HTML5('./sounds/paso7.mp3'));
  soundVideoUnmute(loadMedia_HTML5('./sounds/paso8.mp3'));
  soundVideoUnmute(loadMedia_HTML5('./sounds/paso9.mp3'));
  soundVideoUnmute(loadMedia_HTML5('./sounds/paso10.mp3'));
  soundVideoUnmute(loadMedia_HTML5('./sounds/paso11.mp3'));
  soundVideoUnmute(loadMedia_HTML5('./sounds/paso12.mp3'));
  soundVideoUnmute(loadMedia_HTML5('./sounds/paso13.mp3'));
  soundVideoUnmute(loadMedia_HTML5('./sounds/check.mp3'));
}


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 worng behavior
            elem.setAttribute(attr, value);
        } else {
            elem[attr] = value;
        }
    }
}



// callJSFunction puzzle
function getJSFunction(funcName) {
    var jsFunc = appInstance.ExternalInterface[funcName];
    if (typeof jsFunc == "function")
        return jsFunc;
    else
        return function() {};
}



/**
 * mesh or multi-material object
 */
function isMeshObj(obj) {
    if (obj.isMesh)
        return true;

    for (var i = 0; i < obj.children.length; i++) {
        var child = obj.children[i];
        if (child.isMesh && child.isMaterialGeneratedMesh)
            return true;
    }

    return false;
}




function getObjectsFromCollect(obj, type, out) {
    if (!notIgnoredObj(obj))
        return;

    switch (type) {
    case 'ALL':
        if (out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'ANNOTATION':
        if (obj.isAnnotation && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'CAMERA':
        if (obj.isCamera && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'LIGHT':
        if (obj.isLight && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'MESH':
        if (isMeshObj(obj) && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    default:
        console.error('getObjectsFrom: Unknown object type: ' + type);
        break;
    }

    for (var i = 0; i < obj.children.length; i++) {
        var child = obj.children[i];
        getObjectsFromCollect(child, type, out);
    }
}

// getObjectsFrom puzzle
function getObjectsFrom(objNames, type) {

    var out = [];

    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;

        var obj = getObjectByName(objName);
        if (!obj)
            continue;

        getObjectsFromCollect(obj, type, out);
    }

    return out;
}



/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}



/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && "v3d" in scene.userData && "animFrameRate" in scene.userData.v3d) {
        return scene.userData.v3d.animFrameRate;
    }
    return 24;
}



var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished))
            appInstance.mixer.addEventListener('finished', onMixerFinished);
    };

}();



// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, isPlayAnimCompat, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                // compatibility reasons: deprecated playAnimation puzzles don't
                // change repetitions
                if (!isPlayAnimCompat) {
                    action.repetitions = Infinity;
                }

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}


// Describe this function...
function setear_animaciones() {
  mute();
  animation_counter = 0;
  console.log(animation_counter);
  setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
  getJSFunction('emitirEstadoAnimacion')();

  operateAnimation('STOP', getObjectsFrom(['ALL_OBJECTS'], 'ALL'), null, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('PLAY', getObjectsFrom(['ALL_OBJECTS'], 'ALL'), 1, 1, 'LoopOnce', 1,
          function() {}, undefined, false);

      }


// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback, false);
    }
}



// playSound puzzle
function playSound(mediaElem, loop) {
    if (!mediaElem)
        return;
    mediaElem.setLoop(loop);
    mediaElem.play();
}



// outline puzzle
function outline(objNames, doWhat) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}



// getAnimations puzzle
function getAnimations(objNames) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    var animations = [];
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        // use objName as animName - for now we have one-to-one match
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, objName);
        if (action)
            animations.push(objName);
    }
    return animations;
}



// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}




/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();




// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = appInstance.camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(worldTarget, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (appInstance.camera.parent) {
            appInstance.camera.parent.worldToLocal(worldPos);
        }
        appInstance.camera.position.copy(worldPos);
        appInstance.camera.lookAt(worldTarget);
        doSlot();
    }
}


// Describe this function...
function montaje_2() {
  if (animation_counter == 1) {
    playSound(loadMedia_HTML5('./sounds/paso2.mp3'), false);
    changeVis(['GROUP', 'pertiga y detector de tension'], true);
    outline(['GROUP', 'pertiga y detector de tension'], 'ENABLE');
    registerSetTimeout(6, function() {
      outline(['GROUP', 'pertiga y detector de tension'], 'DISABLE');

      operateAnimation('PLAY', getAnimations(['GROUP', 'pertiga y detector de tension']), 1, 450, 'LoopOnce', 1,
              function() {
        registerSetTimeout(1, function() {

          operateAnimation('PLAY', getAnimations(['GROUP', 'pertiga y detector de tension']), 1, 360, 'LoopOnce', 1,
                  function() {
            changeVis(['GROUP', 'pertiga y detector de tension'], false);
            playSound(loadMedia_HTML5('./sounds/check.mp3'), false);
            animation_counter = 2;
            console.log(animation_counter);
            setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
            getJSFunction('emitirEstadoAnimacion')();
          }, undefined, true);

              });
      }, undefined, false);

          registerSetTimeout(4, function() {
        setActiveCamera('camara_paneo');
        tweenCamera('cam_position_pertiga_detector', 'cam_direction_pertiga_dectector', 3, function() {}, 1);
      });
    });
  }
}

// Describe this function...
function montaje_3() {
  if (animation_counter == 2) {
    playSound(loadMedia_HTML5('./sounds/paso3.mp3'), false);
    console.log('CRUCETA TRANSFORMADOR');
    registerSetTimeout(2, function() {
      tweenCamera('cam_position_transformador_vista_2', 'cam_direction_transformador_vista_2', 2, function() {}, 1);
    });

    operateAnimation('PLAY', 'cruceta_transformador_frontal', 1, 180, 'LoopOnce', 1,
            function() {}, undefined, false);


    operateAnimation('PLAY', 'cruceta_transformador_trasera', 1, 180, 'LoopOnce', 1,
            function() {}, undefined, false);


    operateAnimation('PLAY', 'perno_izquierdo_cruceta_transformador', 1, 240, 'LoopOnce', 1,
            function() {}, undefined, false);


    operateAnimation('PLAY', 'perno_derecho_cruceta_transformador', 1, 240, 'LoopOnce', 1,
            function() {
      console.log('PERNOS IZQUIERDA');

      operateAnimation('PLAY', 'tuerca_izquierda_1_cruceta_transformador', 1, 240, 'LoopOnce', 2,
              function() {}, undefined, false);


      operateAnimation('PLAY', 'tuerca_izquierda_2_cruceta_transformador', 1, 240, 'LoopOnce', 2,
              function() {}, undefined, false);


      operateAnimation('PLAY', 'tuerca_izquierda_3_cruceta_transformador', 1, 240, 'LoopOnce', 2,
              function() {}, undefined, false);


      operateAnimation('PLAY', 'tuerca_izquierda_4_cruceta_transformador', 1, 240, 'LoopOnce', 2,
              function() {}, undefined, false);

          console.log('PERNOS DERECHA');

      operateAnimation('PLAY', 'tuerca_derecha_1_cruceta_transformador', 1, 240, 'LoopOnce', 2,
              function() {}, undefined, false);


      operateAnimation('PLAY', 'tuerca_derecha_2_cruceta_transformador', 1, 240, 'LoopOnce', 2,
              function() {}, undefined, false);


      operateAnimation('PLAY', 'tuerca_derecha_3_cruceta_transformador', 1, 240, 'LoopOnce', 2,
              function() {}, undefined, false);


      operateAnimation('PLAY', 'tuerca_derecha_4_cruceta_transformador', 1, 240, 'LoopOnce', 2,
              function() {
        console.log('CRUCETA SELECCIONADOR');

        operateAnimation('PLAY', 'cruceta_seccionador_frontal', 1, 240, 'LoopOnce', 1,
                function() {}, undefined, false);


        operateAnimation('PLAY', 'medialuna_b_cruceta', 1, 240, 'LoopOnce', 1,
                function() {}, undefined, false);


        operateAnimation('PLAY', 'medialuna_a_cruceta', 1, 240, 'LoopOnce', 1,
                function() {
          console.log('PERNOS IZQUIERDA');

          operateAnimation('PLAY', 'perno_medialuna_a_cruceta_1', 1, 240, 'LoopOnce', 2,
                  function() {}, undefined, false);


          operateAnimation('PLAY', 'perno_medialuna_a_cruceta_2', 1, 240, 'LoopOnce', 2,
                  function() {}, undefined, false);


          operateAnimation('PLAY', 'perno_medialuna_b_cruceta_1', 1, 240, 'LoopOnce', 2,
                  function() {}, undefined, false);


          operateAnimation('PLAY', 'perno_medialuna_b_cruceta_2', 1, 240, 'LoopOnce', 2,
                  function() {
            playSound(loadMedia_HTML5('./sounds/check.mp3'), false);
            animation_counter = 3;
            console.log(animation_counter);
            setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
            getJSFunction('emitirEstadoAnimacion')();
          }, undefined, false);

              }, undefined, false);

            }, undefined, false);

          }, undefined, false);

        }
}

// Describe this function...
function montaje_6() {
  if (animation_counter == 5) {
    setActiveCamera('camara_paneo');
    playSound(loadMedia_HTML5('./sounds/paso6.mp3'), false);
    tweenCamera('cam_position_transformador_vista_2', 'cam_direction_transformador_vista_2', 2, function() {}, 1);
    console.log('cables seccionadores');
    changeVis('abrazadera_seccionador_1', true);
    changeVis('BezierCurve.001', true);
    changeVis('cable_principal_a_tierra', true);
    changeVis('BezierCurve', true);
    outline('cable_principal_a_tierra', 'ENABLE');
    outline('BezierCurve.001', 'ENABLE');
    outline('BezierCurve', 'ENABLE');
    registerSetTimeout(3, function() {
      outline('cable_principal_a_tierra', 'DISABLE');
      outline('BezierCurve.001', 'DISABLE');
      outline('BezierCurve', 'DISABLE');
      playSound(loadMedia_HTML5('./sounds/check.mp3'), false);
      animation_counter = 6;
      console.log(animation_counter);
      setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
      getJSFunction('emitirEstadoAnimacion')();
    });
  }
}

// Describe this function...
function montaje_1() {
  if (animation_counter == 0) {
    playSound(loadMedia_HTML5('./sounds/montaje.mp3'), false);
    registerSetTimeout(6, function() {
      playSound(loadMedia_HTML5('./sounds/paso1.mp3'), false);

      operateAnimation('PLAY', 'cono_5', 1, 180, 'LoopOnce', 1,
              function() {}, undefined, false);

          registerSetTimeout(1, function() {

        operateAnimation('PLAY', 'cono_4', 1, 120, 'LoopOnce', 1,
                function() {}, undefined, false);

            registerSetTimeout(1, function() {

          operateAnimation('PLAY', 'cono_3', 1, 120, 'LoopOnce', 1,
                  function() {}, undefined, false);

              registerSetTimeout(1, function() {

            operateAnimation('PLAY', 'cono_2', 1, 60, 'LoopOnce', 1,
                    function() {
              animation_counter = 1;
              console.log(animation_counter);
              setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
              getJSFunction('emitirEstadoAnimacion')();
            }, undefined, false);

                });
        });
      });
      registerSetTimeout(10, function() {
        playSound(loadMedia_HTML5('./sounds/check.mp3'), false);
      });
    });
  }
}

// Describe this function...
function montaje_8_2() {
  if (animation_counter == 7) {
    playSound(loadMedia_HTML5('./sounds/paso8.mp3'), false);
    console.log('tablero');
    changeVis('caja', true);
    outline('caja', 'ENABLE');
    registerSetTimeout(4, function() {
      outline('caja', 'DISABLE');
      registerSetTimeout(3, function() {
        playSound(loadMedia_HTML5('./sounds/paso9.mp3'), false);
        setActiveCamera('camara_paneo');
        tweenCamera('cam_position_cables_transformador', 'cam_direction_cables_transformador', 1, function() {}, 1);
        console.log('cables fases');
        changeVis('BezierCurve.013', true);
        changeVis('BezierCurve.012', true);
        changeVis('BezierCurve.008', true);
        changeVis('BezierCurve.014', true);
        changeVis('BezierCurve.016', true);
        changeVis('BezierCurve.017', true);
        outline('BezierCurve.013', 'ENABLE');
        outline('BezierCurve.012', 'ENABLE');
        outline('BezierCurve.008', 'ENABLE');
        registerSetTimeout(5, function() {
          outline('BezierCurve.013', 'DISABLE');
          outline('BezierCurve.012', 'DISABLE');
          outline('BezierCurve.008', 'DISABLE');
          playSound(loadMedia_HTML5('./sounds/check.mp3'), false);
          animation_counter = 8;
          console.log(animation_counter);
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        });
      });
    });
  }
}

// Describe this function...
function montaje_5() {
  if (animation_counter == 4) {
    playSound(loadMedia_HTML5('./sounds/paso5.mp3'), false);
    tweenCamera('cam_position_seccionadores', 'cam_direction_seccionadores', 3, function() {}, 1);
    console.log('SECCIONADOR');
    changeVis('perno_seguro_seccionador_1', true);
    changeVis('perno_seguro_seccionador_2', true);
    changeVis('perno_seguro_seccionador_3', true);

    operateAnimation('PLAY', 'seccionador_1', 1, 250, 'LoopOnce', 1,
            function() {

      operateAnimation('PLAY', 'agarre_seccionador_1', 1, 270, 'LoopOnce', 1,
              function() {}, undefined, false);

          }, undefined, false);

        registerSetTimeout(2, function() {

      operateAnimation('PLAY', 'seccionador_2', 1, 250, 'LoopOnce', 1,
              function() {

        operateAnimation('PLAY', 'agarre_seccionador_2', 1, 270, 'LoopOnce', 1,
                function() {}, undefined, false);

            }, undefined, false);

          registerSetTimeout(2, function() {

        operateAnimation('PLAY', 'seccionador_3', 1, 250, 'LoopOnce', 1,
                function() {

          operateAnimation('PLAY', 'agarre_seccionador_3', 1, 270, 'LoopOnce', 1,
                  function() {
            console.log('PARA RAYOS');

            operateAnimation('PLAY', 'para_rayos_1', 1, 280, 'LoopOnce', 1,
                    function() {}, undefined, false);

                registerSetTimeout(2, function() {

              operateAnimation('PLAY', 'para_rayos_2', 1, 280, 'LoopOnce', 1,
                      function() {}, undefined, false);

                  registerSetTimeout(2, function() {

                operateAnimation('PLAY', 'para_rayos_3', 1, 280, 'LoopOnce', 1,
                        function() {
                  console.log('PERNOS');
                  registerSetTimeout(2, function() {

                    operateAnimation('PLAY', 'perno_seguro_seccionador_1', 1, 320, 'LoopOnce', 1,
                            function() {}, undefined, false);

                        registerSetTimeout(2, function() {

                      operateAnimation('PLAY', 'perno_seguro_seccionador_2', 1, 320, 'LoopOnce', 1,
                              function() {}, undefined, false);

                          registerSetTimeout(2, function() {

                        operateAnimation('PLAY', 'perno_seguro_seccionador_3', 1, 320, 'LoopOnce', 1,
                                function() {
                          registerSetTimeout(2, function() {
                            console.log('PARA RAYOS');

                            operateAnimation('PLAY', 'tuerca_perno_seccionador_1', 1, 340, 'LoopOnce', 2,
                                    function() {}, undefined, false);

                                registerSetTimeout(2, function() {

                              operateAnimation('PLAY', 'tuerca_perno_seccionador_2', 1, 340, 'LoopOnce', 2,
                                      function() {}, undefined, false);

                                  registerSetTimeout(2, function() {

                                operateAnimation('PLAY', 'tuerca_perno_seccionador_3', 1, 340, 'LoopOnce', 2,
                                        function() {
                                  playSound(loadMedia_HTML5('./sounds/check.mp3'), false);
                                  animation_counter = 5;
                                  console.log(animation_counter);
                                  setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
                                  getJSFunction('emitirEstadoAnimacion')();
                                }, undefined, false);

                                    });
                            });
                          });
                        }, undefined, false);

                            });
                    });
                  });
                }, undefined, false);

                    });
            });
          }, undefined, false);

              }, undefined, false);

            });
    });
  }
}

// Describe this function...
function montaje_4() {
  if (animation_counter == 3) {
    playSound(loadMedia_HTML5('./sounds/paso4.mp3'), false);
    tweenCamera('', 'cam_direction_transformador_grua', 2, function() {}, 1);

    operateAnimation('PLAY', getAnimations(['GROUP', 'carro_grua']), 1, 180, 'LoopOnce', 1,
            function() {
      changeVis('cadenas', true);
      changeVis('transformador_estatico_terrestre', false);
      changeVis('transformador_movimiento', true);

      operateAnimation('PLAY', 'ayudante_transformador', 180, 740, 'LoopOnce', 1,
              function() {}, undefined, false);


      operateAnimation('PLAY', getAnimations(['GROUP', 'carro_grua']), 180, 740, 'LoopOnce', 1,
              function() {
        tweenCamera('cam_position_transformador', 'cam_direction_transformador', 2, function() {}, 1);
        changeVis('transformador_estatico_aereo', true);
        changeVis('transformador_movimiento', false);
        changeVis('cadenas', false);

        operateAnimation('PLAY', getAnimations(['GROUP', 'carro_grua']), 180, 740, 'LoopOnce', 1,
                function() {
          playSound(loadMedia_HTML5('./sounds/check.mp3'), false);
          animation_counter = 4;
          console.log(animation_counter);
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }, undefined, true);

            }, undefined, false);

          registerSetTimeout(3, function() {
        tweenCamera('', 'cam_direction_transformador_vista_2', 2, function() {}, 1);
      });
    }, undefined, false);

        }
}

// Describe this function...
function montaje_7() {
  if (animation_counter == 6) {
    playSound(loadMedia_HTML5('./sounds/paso7.mp3'), false);
    console.log('cables pararayos');
    changeVis('cable_primario_seccionador_1', true);
    changeVis('cable_primario_seccionador_2', true);
    changeVis('cable_primario_seccionador_3', true);
    outline('cable_primario_seccionador_1', 'ENABLE');
    outline('cable_primario_seccionador_2', 'ENABLE');
    outline('cable_primario_seccionador_3', 'ENABLE');
    changeVis('cable_rayos_a_seccionador_1', true);
    changeVis('cable_rayos_a_seccionador_2', true);
    changeVis('cable_rayos_a_seccionador_3', true);
    outline('cable_rayos_a_seccionador_1', 'ENABLE');
    outline('cable_rayos_a_seccionador_2', 'ENABLE');
    outline('cable_rayos_a_seccionador_3', 'ENABLE');
    registerSetTimeout(8, function() {
      outline('cable_rayos_a_seccionador_1', 'DISABLE');
      outline('cable_rayos_a_seccionador_2', 'DISABLE');
      outline('cable_rayos_a_seccionador_3', 'DISABLE');
      outline('cable_primario_seccionador_1', 'DISABLE');
      outline('cable_primario_seccionador_2', 'DISABLE');
      outline('cable_primario_seccionador_3', 'DISABLE');
      playSound(loadMedia_HTML5('./sounds/check.mp3'), false);
      animation_counter = 7;
      console.log(animation_counter);
      setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
      getJSFunction('emitirEstadoAnimacion')();
    });
  }
}

// Describe this function...
function montaje_9() {
  if (animation_counter == 8) {
    playSound(loadMedia_HTML5('./sounds/paso11.mp3'), false);
    tweenCamera('cam_position_abrazaderas', 'cam_direction_abrazaderas', 1, function() {}, 1);

    operateAnimation('PLAY', 'soporte_abrazadera_1', 1, 300, 'LoopOnce', 1,
            function() {
      changeVis('sujetador_soporte_1_a', true);
      changeVis('sujetador_soporte_1_b', true);
    }, undefined, false);

        registerSetTimeout(2, function() {

      operateAnimation('PLAY', 'soporte_abrazadera_2', 1, 300, 'LoopOnce', 1,
              function() {
        changeVis('sujetador_soporte_2_a', true);
        changeVis('sujetador_soporte_2_b', true);
      }, undefined, false);

          registerSetTimeout(2, function() {

        operateAnimation('PLAY', 'soporte_abrazadera_3', 1, 300, 'LoopOnce', 1,
                function() {
          changeVis('sujetador_soporte_3_a', true);
          changeVis('sujetador_soporte_3_b', true);

          operateAnimation('PLAY', 'abrazadera_seccionador_1', 1, 300, 'LoopOnce', 1,
                  function() {

            operateAnimation('PLAY', 'seguro_abrazadera_1', 300, 320, 'LoopOnce', 1,
                    function() {}, undefined, false);

                }, undefined, false);

              registerSetTimeout(2, function() {

            operateAnimation('PLAY', 'abrazadera_seccionador_2', 1, 300, 'LoopOnce', 1,
                    function() {

              operateAnimation('PLAY', 'seguro_abrazadera_2', 300, 320, 'LoopOnce', 1,
                      function() {}, undefined, false);

                  }, undefined, false);

                registerSetTimeout(2, function() {

              operateAnimation('PLAY', 'abrazadera_seccionador_3', 1, 300, 'LoopOnce', 1,
                      function() {

                operateAnimation('PLAY', 'seguro_abrazadera_3', 300, 320, 'LoopOnce', 1,
                        function() {
                  changeVis('cable_seccionador_tension_alta_1', true);
                  changeVis('cable_seccionador_tension_alta_2', true);
                  changeVis('cable_seccionador_tension_alta_3', true);
                  playSound(loadMedia_HTML5('./sounds/check.mp3'), false);
                  animation_counter = 9;
                  console.log(animation_counter);
                  setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
                  getJSFunction('emitirEstadoAnimacion')();
                }, undefined, false);

                    }, undefined, false);

                  });
          });
        }, undefined, false);

            });
    });
  }
}

// Describe this function...
function montaje_10() {
  if (animation_counter == 9) {
    playSound(loadMedia_HTML5('./sounds/paso13.mp3'), false);
    tweenCamera('cam_position_pernos_cruceta_sec', 'cam_direction_pernos_cruceta_sec', 1, function() {}, 1);
    console.log('SECCIONADOR 3');

    operateAnimation('PLAY', 'stopping_seccionador_3', 1, 300, 'LoopOnce', 1,
            function() {}, undefined, false);


    operateAnimation('PLAY', getAnimations(['GROUP', 'pertiga_seccionadores']), 1, 350, 'LoopOnce', 1,
            function() {

      operateAnimation('PLAY', getAnimations(['GROUP', 'pertiga_seccionadores']), 350, 400, 'LoopOnce', 1,
              function() {}, undefined, false);


      operateAnimation('PLAY', 'stopping_seccionador_3', 300, 350, 'LoopOnce', 1,
              function() {
        console.log('SECCIONADOR 2');

        operateAnimation('PLAY', 'stopping_seccionador_2', 1, 300, 'LoopOnce', 1,
                function() {

          operateAnimation('PLAY', getAnimations(['GROUP', 'pertiga_seccionadores']), 400, 580, 'LoopOnce', 1,
                  function() {

            operateAnimation('PLAY', getAnimations(['GROUP', 'pertiga_seccionadores']), 580, 630, 'LoopOnce', 1,
                    function() {}, undefined, false);


            operateAnimation('PLAY', 'stopping_seccionador_2', 300, 350, 'LoopOnce', 1,
                    function() {
              console.log('SECCIONADOR 1');

              operateAnimation('PLAY', 'stopping_seccionador_1', 1, 300, 'LoopOnce', 1,
                      function() {

                operateAnimation('PLAY', getAnimations(['GROUP', 'pertiga_seccionadores']), 630, 810, 'LoopOnce', 1,
                        function() {

                  operateAnimation('PLAY', 'stopping_seccionador_1', 300, 350, 'LoopOnce', 1,
                          function() {}, undefined, false);


                  operateAnimation('PLAY', getAnimations(['GROUP', 'pertiga_seccionadores']), 810, 860, 'LoopOnce', 1,
                          function() {
                    console.log('Guardado');

                    operateAnimation('PLAY', getAnimations(['GROUP', 'pertiga_seccionadores']), 860, 1130, 'LoopOnce', 1,
                            function() {
                      tweenCamera('cam_position_transformador_vista_2', 'cam_direction_transformador_vista_2', 2, function() {}, 1);
                      playSound(loadMedia_HTML5('./sounds/audio_final.mp3'), false);
                      animation_counter = 0;
                      console.log(animation_counter);
                      setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
                      getJSFunction('emitirEstadoAnimacion')();
                    }, undefined, false);

                        }, undefined, false);

                      }, undefined, false);

                    }, undefined, false);

                  }, undefined, false);

                }, undefined, false);

              }, undefined, false);

            }, undefined, false);

          }, undefined, false);

        }
}


changeVis(['BezierCurve.001', 'cable_seccionador_tension_alta_2', 'BezierCurve.002', 'BezierCurve.006', 'BezierCurve.007', 'cable_seccionador_tension_alta_3', 'BezierCurve.008', 'BezierCurve.010', 'BezierCurve.011', 'BezierCurve.011', 'BezierCurve.012', 'BezierCurve.013', 'cable_principal_a_tierra', 'BezierCurve.014', 'BezierCurve.016', 'BezierCurve.017', 'BezierCurve.022', 'Circle', 'cable_primario_seccionador_1', 'BezierCurve.003', 'cable_primario_seccionador_2', 'cable_primario_seccionador_3', 'cable_seccionador_tension_alta_1', 'BezierCurve', 'BezierCurve.015', 'transformador_estatico_aereo.001', 'transformador_estatico_aereo.002', 'transformador_estatico_aereo.003', 'sujetador_soporte_1_a', 'sujetador_soporte_1_b', 'sujetador_soporte_2_a', 'sujetador_soporte_2_b', 'sujetador_soporte_3_a', 'sujetador_soporte_3_b'], false);
changeVis('transformador_movimiento', false);
changeVis('transformador_estatico_aereo', false);
changeVis('cadenas', false);
changeVis('wall', false);
changeVis('soporte_abrazadera_1', true);
changeVis('soporte_abrazadera_2', true);
changeVis('soporte_abrazadera_3', true);
changeVis(['GROUP', 'pertiga y detector de tension'], false);
changeVis('cable_rayos_a_seccionador_1', false);
changeVis('cable_rayos_a_seccionador_2', false);
changeVis('cable_rayos_a_seccionador_3', false);
setActiveCamera('camara_libre');

animation_counter = 0;
eventHTMLElem('click', 'pro2-btn', true, function(event) {
  setear_animaciones();
  console.log('Vista libre');
  setActiveCamera('camara_libre');
});
eventHTMLElem('click', 'pro1-btn', true, function(event) {
  console.log('Montaje Subestación Eléctrica');
  un_mute();
});
eventHTMLElem('click', 'pro1-paso1', true, function(event) {
  montaje_1();
});
eventHTMLElem('click', 'pro1-paso1', true, function(event) {
  montaje_1();
});
eventHTMLElem('click', 'pro1-paso2', true, function(event) {
  montaje_2();
});
eventHTMLElem('click', 'pro1-paso3', true, function(event) {
  montaje_3();
});
eventHTMLElem('click', 'pro1-paso4', true, function(event) {
  montaje_4();
});
eventHTMLElem('click', 'pro1-paso5', true, function(event) {
  montaje_5();
});
eventHTMLElem('click', 'pro1-paso6', true, function(event) {
  montaje_6();
});
eventHTMLElem('click', 'pro1-paso7', true, function(event) {
  montaje_7();
});
eventHTMLElem('click', 'pro1-paso8', true, function(event) {
  montaje_8_2();
});
eventHTMLElem('click', 'pro1-paso9', true, function(event) {
  montaje_9();
});
eventHTMLElem('click', 'pro1-paso10', true, function(event) {
  montaje_10();
});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
