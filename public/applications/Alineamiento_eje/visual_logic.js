/**
 * Generated by Verge3D Puzzles v.3.2.0
 * Thu Sep 02 2021 12:46:01 GMT-0500 (hora estándar de Colombia)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 worng behavior
            elem.setAttribute(attr, value);
        } else {
            elem[attr] = value;
        }
    }
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}




// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemAttribute('innerHTML', String(Math.round(_initGlob.percentage)) + '%', 'loading_percentage', true);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemStyle('display', 'none', 'preloader_screen', true);
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["posición inicial inici"] = posici_C3_B3n_inicial_inici;
this.procedures["posición inicial"] = posici_C3_B3n_inicial;
this.procedures["pandeo-1"] = pandeo_1;
this.procedures["pandeo-2"] = pandeo_2;
this.procedures["pandeo-4"] = pandeo_4;
this.procedures["pandeo-3"] = pandeo_3;
this.procedures["pandeo-5"] = pandeo_5;
this.procedures["pandeo-6"] = pandeo_6;
this.procedures["acople-2"] = acople_2;
this.procedures["acople-3"] = acople_3;
this.procedures["acople-1"] = acople_1;
this.procedures["pata-3"] = pata_3;
this.procedures["pata-4"] = pata_4;
this.procedures["pata-1"] = pata_1;
this.procedures["pata-5"] = pata_5;
this.procedures["pata-6"] = pata_6;
this.procedures["pata-2"] = pata_2;
this.procedures["alineamiento-1"] = alineamiento_1;
this.procedures["alineamiento-2"] = alineamiento_2;
this.procedures["alineamiento-3"] = alineamiento_3;
this.procedures["alineamiento-4"] = alineamiento_4;
this.procedures["alineamiento-6"] = alineamiento_6;
this.procedures["alineamiento-5"] = alineamiento_5;
this.procedures["alineamiento-7"] = alineamiento_7;

var PROC = {
    "posición inicial inici": posici_C3_B3n_inicial_inici,
    "posición inicial": posici_C3_B3n_inicial,
    "pandeo-1": pandeo_1,
    "pandeo-2": pandeo_2,
    "pandeo-4": pandeo_4,
    "pandeo-3": pandeo_3,
    "pandeo-5": pandeo_5,
    "pandeo-6": pandeo_6,
    "acople-2": acople_2,
    "acople-3": acople_3,
    "acople-1": acople_1,
    "pata-3": pata_3,
    "pata-4": pata_4,
    "pata-1": pata_1,
    "pata-5": pata_5,
    "pata-6": pata_6,
    "pata-2": pata_2,
    "alineamiento-1": alineamiento_1,
    "alineamiento-2": alineamiento_2,
    "alineamiento-3": alineamiento_3,
    "alineamiento-4": alineamiento_4,
    "alineamiento-6": alineamiento_6,
    "alineamiento-5": alineamiento_5,
    "alineamiento-7": alineamiento_7,
};

var instancia_control2, instancia_control, varillas_cadena, animation_counter, pata_coja_1, pandeo_eje_1, pata_coja_2, pandeo_eje_3, pata_coja_3, pandeo_eje_4, pandeo_eje_8, pandeo_eje_5, pandeo_eje_6, pata_coja_4, pata_coja_5, pata_coja_6, pandeo_eje_7;


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// initFullscreen puzzle
function initFullscreen(id, isParent, cb_enter, cb_exit, cb_unavail) {
    var elem = getElement(id, isParent);
    if (!elem)
        return;
    var doc = isParent ? parent.document: document;
    if (!(doc.fullscreenEnabled ||
        doc.webkitFullscreenEnabled ||
        doc.mozFullScreenEnabled ||
        doc.msFullscreenEnabled)) {
            cb_unavail();
            return;
    }

    function fullscreenClickCb() {
        event.stopPropagation();
        if (doc.fullscreenElement ||
            doc.webkitFullscreenElement ||
            doc.mozFullScreenElement ||
            doc.msFullscreenElement) {
            exitFullscreen();
        } else {
            requestFullscreen(doc.body);
        }
    }
    elem.addEventListener('click', fullscreenClickCb);
    if (v3d.PL.editorEventListeners)
        v3d.PL.editorEventListeners.push([elem, 'click', fullscreenClickCb]);

    function changeFullscreen(event) {
        if (doc.fullscreenElement ||
            doc.webkitFullscreenElement ||
            doc.mozFullScreenElement ||
            doc.msFullscreenElement)
            cb_enter(event);
        else
            cb_exit(event);
    }
    doc.addEventListener('webkitfullscreenchange', changeFullscreen);
    doc.addEventListener('mozfullscreenchange', changeFullscreen);
    doc.addEventListener('msfullscreenchange', changeFullscreen);
    doc.addEventListener('fullscreenchange', changeFullscreen);
    if (v3d.PL.editorEventListeners) {
        v3d.PL.editorEventListeners.push([doc, 'webkitfullscreenchange', changeFullscreen]);
        v3d.PL.editorEventListeners.push([doc, 'mozfullscreenchange', changeFullscreen]);
        v3d.PL.editorEventListeners.push([doc, 'msfullscreenchange', changeFullscreen]);
        v3d.PL.editorEventListeners.push([doc, 'fullscreenchange', changeFullscreen]);
    }

    function requestFullscreen(fselem) {
        if (fselem.requestFullscreen)
            fselem.requestFullscreen();
        else if (fselem.mozRequestFullScreen)
            fselem.mozRequestFullScreen();
        else if (fselem.webkitRequestFullscreen)
            fselem.webkitRequestFullscreen();
        else if (fselem.msRequestFullscreen)
            fselem.msRequestFullscreen();
    }
    function exitFullscreen() {
        if (doc.exitFullscreen)
            doc.exitFullscreen();
        else if (doc.mozCancelFullScreen)
            doc.mozCancelFullScreen();
        else if (doc.webkitExitFullscreen)
            doc.webkitExitFullscreen();
        else if (doc.msExitFullscreen)
            doc.msExitFullscreen();
    }
}




// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// outline puzzle
function outline(objSelector, doWhat) {
    var objNames = retrieveObjectNames(objSelector);

    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}



// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);
    if (v3d.PL.editorEventListeners)
        v3d.PL.editorEventListeners.push([elem, eventType, pickListener]);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, pickListener);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, pickListener]);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, doubleTapCallback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, doubleTapCallback]);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}



// whenHovered puzzle
initObjectPicking(function(intersects, event) {

    var prevHovered = _pGlob.hoveredObject;
    var currHovered = '';

    // the event might happen before hover registration
    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    // search for closest hovered object

    var lastIntersectIndex = Infinity;
    _pGlob.objHoverInfo.forEach(function(el) {
        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj(retrieveObjectNames(el.objSelector), objName) && i <= lastIntersectIndex) {
                currHovered = objName;
                lastIntersectIndex = i;
            }
        }
    });

    if (prevHovered == currHovered) return;

    // first - all "out" callbacks, then - all "over"
    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(retrieveObjectNames(el.objSelector), prevHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = prevHovered;
            el.callbacks[1](event);
        }
    });

    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(retrieveObjectNames(el.objSelector), currHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = currHovered;
            el.callbacks[0](event);
        }
    });

    _pGlob.hoveredObject = currHovered;
}, 'mousemove', false);



// whenHovered puzzle
function registerOnHover(objSelector, xRay, cbOver, cbOut) {

    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    _pGlob.objHoverInfo.push({
        objSelector: objSelector,
        callbacks: [cbOver, cbOut],
        xRay: xRay
    });
}



// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}



// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);
            var objNames = retrieveObjectNames(objSelector);

            if (objectsIncludeObj(objNames, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}




/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();




function RotationInterface() {
    /**
     * For user manipulations use XYZ extrinsic rotations (which
     * are the same as ZYX intrinsic rotations)
     *     - Blender/Max/Maya use extrinsic rotations in the UI
     *     - XYZ is the default option, but could be set from
     *       some order hint if exported
     */
    this._userRotation = new v3d.Euler(0, 0, 0, 'ZYX');
    this._actualRotation = new v3d.Euler();
}

Object.assign(RotationInterface, {
    initObject: function(obj) {
        if (obj.userData.v3d.puzzles === undefined) {
            obj.userData.v3d.puzzles = {}
        }
        if (obj.userData.v3d.puzzles.rotationInterface === undefined) {
            obj.userData.v3d.puzzles.rotationInterface = new RotationInterface();
        }

        var rotUI = obj.userData.v3d.puzzles.rotationInterface;
        rotUI.updateFromObject(obj);
        return rotUI;
    }
});

Object.assign(RotationInterface.prototype, {

    updateFromObject: function(obj) {
        var SYNC_ROT_EPS = 1e-8;

        if (!this._actualRotation.equalsEps(obj.rotation, SYNC_ROT_EPS)) {
            this._actualRotation.copy(obj.rotation);
            this._updateUserRotFromActualRot();
        }
    },

    getActualRotation: function(euler) {
        return euler.copy(this._actualRotation);
    },

    setUserRotation: function(euler) {
        // don't copy the order, since it's fixed to ZYX for now
        this._userRotation.set(euler.x, euler.y, euler.z);
        this._updateActualRotFromUserRot();
    },

    getUserRotation: function(euler) {
        return euler.copy(this._userRotation);
    },

    _updateUserRotFromActualRot: function() {
        var order = this._userRotation.order;
        this._userRotation.copy(this._actualRotation).reorder(order);
    },

    _updateActualRotFromUserRot: function() {
        var order = this._actualRotation.order;
        this._actualRotation.copy(this._userRotation).reorder(order);
    }

});




// setObjTransform puzzle
function setObjTransform(objSelector, mode, x, y, z, offset) {

    var objNames = retrieveObjectNames(objSelector);

    function setObjProp(obj, prop, val) {
        if (!offset) {
            obj[mode][prop] = val;
        } else {
            if (mode != "scale")
                obj[mode][prop] += val;
            else
                obj[mode][prop] *= val;
        }
    }

    var inputsUsed = _pGlob.vec3Tmp.set(Number(x !== ''), Number(y !== ''),
            Number(z !== ''));
    var coords = _pGlob.vec3Tmp2.set(x || 0, y || 0, z || 0);

    if (mode === 'rotation') {
        // rotations are specified in degrees
        coords.multiplyScalar(v3d.Math.DEG2RAD);
    }

    var coordSystem = getCoordSystem();

    coordsTransform(inputsUsed, coordSystem, 'Y_UP_RIGHT', true);
    coordsTransform(coords, coordSystem, 'Y_UP_RIGHT', mode === 'scale');

    for (var i = 0; i < objNames.length; i++) {

        var objName = objNames[i];
        if (!objName) continue;

        var obj = getObjectByName(objName);
        if (!obj) continue;

        if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
            // Blender/Max coordinates

            // need all the rotations for order conversions, especially if some
            // inputs are not specified
            var euler = eulerV3DToBlenderShortest(obj.rotation, _pGlob.eulerTmp);
            coordsTransform(euler, coordSystem, 'Y_UP_RIGHT');

            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            /**
             * convert from Blender/Max default XYZ extrinsic order to v3d XYZ
             * intrinsic with reversion (XYZ -> ZYX) and axes swizzling (ZYX -> YZX)
             */
            euler.order = "YZX";
            euler.reorder(obj.rotation.order);
            obj.rotation.copy(euler);

        } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
            // Maya coordinates

            // Use separate rotation interface to fix ambiguous rotations for Maya,
            // might as well do the same for Blender/Max.

            var rotUI = RotationInterface.initObject(obj);
            var euler = rotUI.getUserRotation(_pGlob.eulerTmp);
            // TODO(ivan): this probably needs some reasonable wrapping
            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            rotUI.setUserRotation(euler);
            rotUI.getActualRotation(obj.rotation);
        } else {

            if (inputsUsed.x) setObjProp(obj, "x", coords.x);
            if (inputsUsed.y) setObjProp(obj, "y", coords.y);
            if (inputsUsed.z) setObjProp(obj, "z", coords.z);

        }

        obj.updateMatrixWorld(true);
    }

}



/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}



/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && "v3d" in scene.userData && "animFrameRate" in scene.userData.v3d) {
        return scene.userData.v3d.animFrameRate;
    }
    return 24;
}



_pGlob.animMixerCallbacks = [];

var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished))
            appInstance.mixer.addEventListener('finished', onMixerFinished);
    };

}();



// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, isPlayAnimCompat, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                // compatibility reasons: deprecated playAnimation puzzles don't
                // change repetitions
                if (!isPlayAnimCompat) {
                    action.repetitions = Infinity;
                }

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}


// Describe this function...
function posici_C3_B3n_inicial_inici() {
  changeVis('instance_mov_bomba', false);
  changeVis('instancia_rot_vertebra', false);
  changeVis('instance_mov_bomba', false);
  changeVis('reloj_palpador', false);
  changeVis('reloj_palpador_b', false);
  setObjTransform('bomba', 'position', '', 21.84, '', false);

  operateAnimation('SET_FRAME', 'acople_eje_motor', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'armature_cadena_a', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'armature_cadena_b', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'base_brazo_magnetico', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'base_brazo_magnetico_b', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'eje_motor', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'feeler_gauge', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'Feeler_gauge_lamina_1', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'girador_reloj_alineador_a', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'girador_reloj_alineador_b', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'lamina_de_medidas_2', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'lamina_de_medidas_3', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'lamina_de_medidas_4', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'llave_mixta_1', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'perno_allen_acople_motor', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'perno_a_bomba', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'perno_b_bomba', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'perno_c_bomba', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'perno_d_bomba', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'regla_de_pelo', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'reloj_alineador_a', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'reloj_alineador_b', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'rotador', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'soporte_girador_a_reloj_alineador', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'soporte_girador_b_reloj_alineador', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'soporte_girador_reloj_alineador_b', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'tuerca_perno_a', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'tuerca_perno_b', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'tuerca_perno_base_motor_1', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'tuerca_perno_base_motor_2', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'tuerca_perno_base_motor_3', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'tuerca_perno_base_motor_4', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'tuerca_perno_c', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'tuerca_perno_d', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'varilla_a', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'varilla_b', 1, null, 'AUTO', 1,
          function() {}, undefined, false);

      }


// dictSet puzzle
function dictSet(dict, key, value) {
    if (dict && typeof dict == 'object')
        dict[key] = value;
}



// dragRotate puzzle
function dragRotate(objSelector, mode, isParentSpace, blockId, parentDragOverBlockId) {
    var camera = appInstance.getCamera(true);
    if (!camera)
        return;

    if (!_pGlob.objDragOverInfoByBlock)
        return;

    var objNames = retrieveObjectNames(objSelector);

    var info = _pGlob.objDragOverInfoByBlock[parentDragOverBlockId];
    if (!info) return;

    var coordSystem = getCoordSystem();

    for (var i = 0; i < objNames.length; i++) {
        var obj = getObjectByName(objNames[i]);
        if (!obj) {
            continue;
        }

        if (mode == "X" || mode == "Y" || mode == "Z") {
            var objPos = obj.getWorldPosition(_pGlob.vec3Tmp);
            objPos.project(camera);

            var objX = (objPos.x + 1) / 2 * appInstance.getWidth();
            var objY = (-objPos.y + 1) / 2 * appInstance.getHeight();
            var vecFrom = _pGlob.vec2Tmp.set(info.prevX - objX, objY - info.prevY);
            var vecTo = _pGlob.vec2Tmp2.set(info.currX - objX, objY - info.currY);

            if (coordSystem == 'Z_UP_RIGHT')
                var axis = _pGlob.vec3Tmp.copy(mode == "X" ? _pGlob.AXIS_X
                        : (mode == "Y" ? _pGlob.AXIS_Z : _pGlob.AXIS_Y));
            else
                var axis = _pGlob.vec3Tmp.copy(mode == "X" ? _pGlob.AXIS_X
                        : (mode == "Y" ? _pGlob.AXIS_Y : _pGlob.AXIS_Z));

            var quat = _pGlob.quatTmp.setFromAxisAngle(axis, vecTo.angle() - vecFrom.angle());

            // a rotation axis pointing backwards (i.e. co-directionally
            // aligned with the view vector) should have inverted rotation
            var objToCalcSpace = isParentSpace && obj.parent ? obj.parent : obj;
            axis.applyQuaternion(objToCalcSpace.getWorldQuaternion(_pGlob.quatTmp2));

            var viewVec = camera.getWorldDirection(_pGlob.vec3Tmp2);
            if (viewVec.dot(axis) > 0) {
                quat.conjugate();
            }

            if (isParentSpace) {
                obj.quaternion.premultiply(quat);
            } else {
                obj.quaternion.multiply(quat);
            }
            obj.updateMatrixWorld(true);
        }
    }
}



// objConstraintAddLimit puzzle
function objConstraintAddLimit(constraintName, objSelector, mode, min, max) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName) continue;

        var obj = getObjectByName(objName);
        if (!obj || !obj.constraints) continue;

        for (var j = obj.constraints.length - 1; j >= 0; j--) {
            if (obj.constraints[j].name == constraintName) {
                obj.constraints.splice(j, 1);
            }
        }

        var coordSystem = getCoordSystem();

        switch (mode) {
            case 'POS_X':
            case 'POS_Y':
            case 'POS_Z':
                var cons = new v3d.LimitLocationConstraint();
                cons.name = constraintName;

                if (coordSystem == 'Z_UP_RIGHT')
                    var compIndex = mode == 'POS_X' ? 0 : (mode == 'POS_Y' ? 2 : 1);
                else
                    var compIndex = mode == 'POS_X' ? 0 : (mode == 'POS_Y' ? 1 : 2);

                // swizzle sign and limits order
                if (coordSystem == 'Z_UP_RIGHT' && mode == 'POS_Y') {
                    cons.min.setComponent(compIndex, -max);
                    cons.max.setComponent(compIndex, -min);
                } else {
                    cons.min.setComponent(compIndex, min);
                    cons.max.setComponent(compIndex, max);
                }
                obj.constraints.push(cons);
                break;

            case 'ROT_X':
            case 'ROT_Y':
            case 'ROT_Z':
                var cons = new v3d.LimitRotationConstraint();
                cons.name = constraintName;

                if (coordSystem == 'Z_UP_RIGHT')
                    cons.axis = mode == 'ROT_X' ? 'X' : (mode == 'ROT_Y' ? 'Z' : 'Y');
                else
                    cons.axis = mode == 'ROT_X' ? 'X' : (mode == 'ROT_Y' ? 'Y' : 'Z');

                // swizzle sign and limits order
                if (coordSystem == 'Z_UP_RIGHT' && mode == 'ROT_Y') {
                    cons.min = v3d.Math.degToRad(-max);
                    cons.max = v3d.Math.degToRad(-min);
                } else {
                    cons.min = v3d.Math.degToRad(min);
                    cons.max = v3d.Math.degToRad(max);
                }

                obj.constraints.push(cons);
                break;

            case 'SCALE_X':
            case 'SCALE_Y':
            case 'SCALE_Z':
                var cons = new v3d.LimitScaleConstraint();
                cons.name = constraintName;

                if (coordSystem == 'Z_UP_RIGHT')
                    var compIndex = mode == 'SCALE_X' ? 0 : (mode == 'SCALE_Y' ? 2 : 1);
                else
                    var compIndex = mode == 'SCALE_X' ? 0 : (mode == 'SCALE_Y' ? 1 : 2);

                cons.min.setComponent(compIndex, min);
                cons.max.setComponent(compIndex, max);
                obj.constraints.push(cons);
                break;
        }
    }
}



function eventGetOffsetCoords(e, touchId, dest) {
    if (e instanceof MouseEvent) {
        dest.set(e.offsetX, e.offsetY);
    } else if (window.TouchEvent && e instanceof TouchEvent) {
        var rect = e.target.getBoundingClientRect();
        var touches = e.touches;
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            touches = e.changedTouches;
        }

        var touch = touches[0];
        for (var i = 0; i < touches.length; i++) {
            if (touches[i].identifier == touchId) {
                touch = touches[i];
                break;
            }
        }

        dest.set(touch.clientX - rect.left, touch.clientY - rect.top);
    }
    return dest;
}



function eventTouchIdGetFirst(e) {
    if (e instanceof MouseEvent) {
        return -1;
    } else if (window.TouchEvent && e instanceof TouchEvent) {
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            return e.changedTouches[0].identifier;
        } else {
            return e.touches[0].identifier;
        }
    }
    return -1;
}



/**
 * For "touchstart", "touchend" and "touchmove" events returns true if a touch
 * object with the provided touch id is in the changedTouches array, otherwise
 * - false. For other events returns true.
 */
function eventTouchIdChangedFilter(e, touchId) {
    if (window.TouchEvent && e instanceof TouchEvent) {
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            var isChanged = false;
            for (var i = 0; i < e.changedTouches.length; i++) {
                if (e.changedTouches[i].identifier == touchId) {
                    isChanged = true;
                    break;
                }
            }
            return isChanged;
        }
    }

    return true;
}



function initDragOverInfo() {
    return {
        draggedObjName: '',
        downX: 0, downY: 0,
        prevX: 0, prevY: 0,
        currX: 0, currY: 0,
        isDowned: false,
        isMoved: false,
        touchId: -1
    };
}



// whenDraggedOver puzzle
_pGlob.objDragOverInfoGlobal = [];
_pGlob.objDragOverInfoByBlock = {}

initObjectPicking(function(intersects, downEvent) {

    _pGlob.objDragOverInfoGlobal.forEach(function(el) {

        if (downEvent instanceof MouseEvent)
            if (el.mouseButtons.indexOf(downEvent.button) == -1)
                return;

        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj([el.objName], objName)) {
                el.callback({ downEvent: downEvent, draggedObjName: objName });
            }

        }

    });

}, 'mousedown', true);



// whenDraggedOver puzzle
function registerOnDrag(objSelector, xRay, mouseButtons, cbStart, cbMove, cbDrop, blockId) {

    var cb = function(cbParam) {

        if (appInstance.controls) {
            appInstance.controls.enabled = false;
        }

        if (!(blockId in _pGlob.objDragOverInfoByBlock)) {
            _pGlob.objDragOverInfoByBlock[blockId] = initDragOverInfo();
        }
        var info = _pGlob.objDragOverInfoByBlock[blockId];

        // NOTE: don't use more than one pointing event, e.g. don't process
        // some events related to multitouch actions
        if (info.isDowned) {
            return;
        }

        var touchId = eventTouchIdGetFirst(cbParam.downEvent);
        var coords = eventGetOffsetCoords(cbParam.downEvent, touchId,
                _pGlob.vec2Tmp);

        info.downX = info.prevX = info.currX = coords.x;
        info.downY = info.prevY = info.currY = coords.y;
        info.touchId = touchId;
        info.isDowned = true;
        info.isMoved = false;
        info.draggedObjName = cbParam.draggedObjName;

        cbStart(cbParam.downEvent);

        var elem = appInstance.container;

        var moveCb = function(e) {
            if (!eventTouchIdChangedFilter(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.prevX = info.currX;
            info.prevY = info.currY;
            info.currX = coords.x;
            info.currY = coords.y;
            cbMove(e);
            info.isMoved = true;
        }
        var upCb = function(e) {
            if (!eventTouchIdChangedFilter(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.currX = coords.x;
            info.currY = coords.y;
            info.prevX = info.currX;
            info.prevY = info.currY;
            cbDrop(e);
            info.isDowned = false;

            elem.removeEventListener('mousemove', moveCb);
            elem.removeEventListener('touchmove', moveCb);
            elem.removeEventListener('mouseup', upCb);
            elem.removeEventListener('touchend', upCb);
            if (appInstance.controls) {
                appInstance.controls.enabled = true;
            }
        }

        elem.addEventListener('mousemove', moveCb);
        elem.addEventListener('touchmove', moveCb);
        elem.addEventListener('mouseup', upCb);
        elem.addEventListener('touchend', upCb);
    }

    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        _pGlob.objDragOverInfoGlobal.push({
            objName: objName,
            callback: cb,
            xRay: xRay,
            mouseButtons: mouseButtons
        });
    }
}


// Describe this function...
function posici_C3_B3n_inicial() {
  changeVis('instance_mov_bomba', false);
  changeVis('instancia_rot_vertebra', false);
  changeVis('instance_mov_bomba', false);
  changeVis('acople_eje_motor', false);
  changeVis('reloj_palpador', false);
  changeVis('reloj_palpador_b', false);
  setObjTransform('bomba', 'position', '', 21.84, '', false);

  operateAnimation('SET_FRAME', 'acople_eje_motor', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'armature_cadena_a', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'armature_cadena_b', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'base_brazo_magnetico', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'base_brazo_magnetico_b', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'eje_motor', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'feeler_gauge', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'Feeler_gauge_lamina_1', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'girador_reloj_alineador_a', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'girador_reloj_alineador_b', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'lamina_de_medidas_2', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'lamina_de_medidas_3', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'lamina_de_medidas_4', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'llave_mixta_1', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'perno_allen_acople_motor', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'perno_a_bomba', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'perno_b_bomba', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'perno_c_bomba', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'perno_d_bomba', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'regla_de_pelo', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'reloj_alineador_a', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'reloj_alineador_b', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'rotador', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'soporte_girador_a_reloj_alineador', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'soporte_girador_b_reloj_alineador', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'soporte_girador_reloj_alineador_b', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'tuerca_perno_a', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'tuerca_perno_b', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'tuerca_perno_base_motor_1', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'tuerca_perno_base_motor_2', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'tuerca_perno_base_motor_3', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'tuerca_perno_base_motor_4', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'tuerca_perno_c', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'tuerca_perno_d', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'varilla_a', 1, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'varilla_b', 1, null, 'AUTO', 1,
          function() {}, undefined, false);

      }


// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {
    var camera = appInstance.getCamera();

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(worldTarget, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
            camera.parent.worldToLocal(worldPos);
        }
        camera.position.copy(worldPos);
        camera.lookAt(worldTarget);
        doSlot();
    }
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, eventType, callback]);
    }
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 worng behavior
            elem.setAttribute(attr, value);
        } else {
            elem[attr] = value;
        }
    }
}



// callJSFunction puzzle
function getJSFunction(funcName) {
    var jsFunc = appInstance.ExternalInterface[funcName];
    if (typeof jsFunc == "function")
        return jsFunc;
    else
        return function() {};
}



// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}



function MediaHTML5(isVideo) {
    this.source = null;
}

Object.assign(MediaHTML5.prototype, {

    load: function(url, isVideo) {
        if (isVideo) {
            this.source = document.createElement('video');
            this.source.playsInline = true;
            this.source.preload = 'auto';
            this.source.autoload = true;
            this.source.crossOrigin = 'anonymous';
        } else {
            this.source = document.createElement('audio');
        }

        this.source.src = url;
        return this;
    },

    play: function() {
        this.source.play();
    },

    pause: function() {
        this.source.pause();
    },

    stop: function() {
        this.source.pause();
        this.source.currentTime = 0;
    },

    rewind: function() {
        this.source.currentTime = 0;
    },

    setPlaybackTime: function(time) {
        this.source.currentTime = time
    },

    getPlaybackTime: function() {
        return this.source.currentTime;
    },

    setPlaybackRate: function(rate) {
        this.source.playbackRate = rate;
    },

    isPlaying: function() {
        return this.source.duration > 0 && !this.source.paused;
    },

    setLoop: function(looped) {
        this.source.loop = looped;
    },

    setVolume: function(volume) {
        this.source.volume = volume;
    },

    setMuted: function(muted) {
        this.source.muted = muted;
    },

});



// loadMedia puzzle
function loadMedia_HTML5(url) {

    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new MediaHTML5().load(url);
    }
    return elems[url];
}



// playSound puzzle
function playSound(mediaElem, loop) {
    if (!mediaElem)
        return;
    mediaElem.setLoop(loop);
    mediaElem.play();
}


// Describe this function...
function pandeo_1() {
  if (animation_counter == 0) {
    playSound(loadMedia_HTML5('./sounds/paso1/1.mp3'), false);
    registerSetTimeout(5, function() {
      tweenCamera('camera_1_position', 'camera_2_direction', 3, function() {}, undefined);
      outline('motor', 'ENABLE');
      registerSetTimeout(4, function() {
        outline('motor', 'DISABLE');
        animation_counter = 1;
        console.log(animation_counter);
        setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
        getJSFunction('emitirEstadoAnimacion')();
      });
    });
  }
}


// dictGet puzzle
function dictGet(dict, key) {
    if (dict && typeof dict == 'object')
        return dict[key];
}



function intersectPlaneCSS(plane, cssX, cssY, dest) {
    var coords = _pGlob.vec2Tmp;
    var rc = _pGlob.raycasterTmp;
    coords.x = (cssX / appInstance.getWidth()) * 2 - 1;
    coords.y = - (cssY / appInstance.getHeight()) * 2 + 1;
    rc.setFromCamera(coords, appInstance.getCamera(true));
    return rc.ray.intersectPlane(plane, dest);
}



// dragMove puzzle
_pGlob.dragMoveOrigins = {};

function dragMove(objSelector, mode, blockId, parentDragOverBlockId) {
    var camera = appInstance.getCamera();
    if (!camera)
        return;

    if (!_pGlob.objDragOverInfoByBlock)
        return;

    var objNames = retrieveObjectNames(objSelector);

    var info = _pGlob.objDragOverInfoByBlock[parentDragOverBlockId];
    if (!info) return;

    var draggedObj = getObjectByName(info.draggedObjName);
    if (!draggedObj) return;

    if (!(blockId in _pGlob.dragMoveOrigins)) {
        _pGlob.dragMoveOrigins[blockId] = [];
    }
    var posOrigins = _pGlob.dragMoveOrigins[blockId];
    var lenDiff = objNames.length - posOrigins.length;
    for (var i = 0; i < lenDiff; i++) {
        posOrigins.push(new v3d.Vector3());
    }

    for (var i = 0; i < objNames.length; i++) {
        var obj = getObjectByName(objNames[i]);
        if (!obj) {
            continue;
        }

        var posOrigin = posOrigins[i];

        if (!info.isMoved) {
            // the object position before the first move is used as an initial value
            posOrigin.copy(obj.position);
        }

        var coordSystem = getCoordSystem();

        if (mode == "X" || mode == "Y" || mode == "Z") {

            if (coordSystem == 'Z_UP_RIGHT') {
                var axis = mode == "X" ? _pGlob.AXIS_X : (mode == "Y" ? _pGlob.AXIS_Z : _pGlob.AXIS_Y);
                var coord = mode == "X" ? "x" : (mode == "Y" ? "z" : "y");
            } else {
                var axis = mode == "X" ? _pGlob.AXIS_X : (mode == "Y" ? _pGlob.AXIS_Y : _pGlob.AXIS_Z);
                var coord = mode == "X" ? "x" : (mode == "Y" ? "y" : "z");
            }

            var planeNor = camera.getWorldDirection(_pGlob.vec3Tmp);
            planeNor.cross(axis).cross(axis);
            var plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(planeNor, draggedObj.position);

            var p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            var p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                obj.position[coord] = posOrigin[coord] + p1[coord] - p0[coord];
            }
        } else if (mode == "XY" || mode == "XZ" || mode == "YZ") {
            if (coordSystem == 'Z_UP_RIGHT') {
                var normal = mode == "XY" ? _pGlob.AXIS_Y : (mode == "XZ" ? _pGlob.AXIS_Z : _pGlob.AXIS_X);
                var coord0 = mode == "XY" ? "x" : (mode == "XZ" ? "x" : "y");
                var coord1 = mode == "XY" ? "z" : (mode == "XZ" ? "y" : "z");
            } else {
                var normal = mode == "XY" ? _pGlob.AXIS_Z : (mode == "XZ" ? _pGlob.AXIS_Y : _pGlob.AXIS_X);
                var coord0 = mode == "XY" ? "x" : (mode == "XZ" ? "x" : "y");
                var coord1 = mode == "XY" ? "y" : (mode == "XZ" ? "z" : "z");
            }

            var plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(normal, draggedObj.position);

            var p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            var p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                obj.position[coord0] = posOrigin[coord0] + p1[coord0] - p0[coord0];
                obj.position[coord1] = posOrigin[coord1] + p1[coord1] - p0[coord1];
            }
        } else if (mode == "XYZ") {
            var planeNor = camera.getWorldDirection(_pGlob.vec3Tmp);
            var plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(planeNor, draggedObj.position);

            var p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            var p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                obj.position.addVectors(posOrigin, p1).sub(p0);
            }
        }
        obj.updateMatrixWorld(true);
    }
}



// getObjTransform puzzle
function getObjTransform(objName, mode, coord) {
    if (!objName)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;

    var coordSystem = getCoordSystem();

    var transformVal;

    if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
        transformVal = eulerV3DToBlenderShortest(obj.rotation,
                _pGlob.eulerTmp);
    } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
        // Maya coordinates
        // Use separate rotation interface to fix ambiguous rotations for Maya,
        // might as well do the same for Blender/Max.

        var rotUI = RotationInterface.initObject(obj);
        transformVal = rotUI.getUserRotation(_pGlob.eulerTmp);
    } else {
        transformVal = coordsTransform(obj[mode].clone(), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
    }

    if (mode === 'rotation') {
        transformVal.x = v3d.MathUtils.radToDeg(transformVal.x);
        transformVal.y = v3d.MathUtils.radToDeg(transformVal.y);
        transformVal.z = v3d.MathUtils.radToDeg(transformVal.z);
    }

    if (coord == 'xyz') {
        // remove order component for Euler vectors
        return transformVal.toArray().slice(0, 3);
    } else {
        return transformVal[coord];
    }
}


// Describe this function...
function pandeo_2() {
  if (animation_counter == 2) {
    playSound(loadMedia_HTML5('./sounds/paso1/2.mp3'), false);
    outline('perno_a_bomba', 'ENABLE');
    outline('perno_b_bomba', 'ENABLE');
    outline('perno_c_bomba', 'ENABLE');
    tweenCamera('camera_1_position', 'camera_2_direction', 3, function() {}, undefined);
    registerSetTimeout(3, function() {
      outline('perno_b_bomba', 'DISABLE');
      outline('perno_c_bomba', 'DISABLE');
      outline('perno_d_bomba', 'DISABLE');
    });
    registerOnClick('perno_a_bomba', false, false, [0,1,2], function() {
      if (animation_counter == 2) {
        outline('perno_a_bomba', 'DISABLE');

        operateAnimation('PLAY', 'perno_a_bomba', dictGet(pandeo_eje_1, 'ini'), dictGet(pandeo_eje_1, 'end'), 'LoopOnce', 1,
                function() {}, undefined, false);


        operateAnimation('PLAY', 'perno_b_bomba', dictGet(pandeo_eje_1, 'ini'), dictGet(pandeo_eje_1, 'end'), 'LoopOnce', 1,
                function() {}, undefined, false);


        operateAnimation('PLAY', 'perno_c_bomba', dictGet(pandeo_eje_1, 'ini'), dictGet(pandeo_eje_1, 'end'), 'LoopOnce', 1,
                function() {}, undefined, false);


        operateAnimation('PLAY', 'perno_d_bomba', dictGet(pandeo_eje_1, 'ini'), dictGet(pandeo_eje_1, 'end'), 'LoopOnce', 1,
                function() {
          outline('bomba', 'ENABLE');
          changeVis('instance_mov_bomba', true);
          registerOnDrag('instance_mov_bomba', false, [0,1,2], function() {}, function() {
            dragMove('bomba', 'Y', 'YlpN9c7X_2~4!SJoLzB9', 'H!m{)5:6?d!jCFo.V(aV');
            outline('instance_mov_bomba', 'ENABLE');
            objConstraintAddLimit('limit 9', 'bomba', 'POS_Y', 21.84, 31.5);
            if (getObjTransform('bomba', 'position', 'y') == 31.5) {
              changeVis('instance_mov_bomba', false);
              outline('bomba', 'DISABLE');
            }
          }, function() {
            outline('instance_mov_bomba', 'DISABLE');
            if (getObjTransform('bomba', 'position', 'y') == 31.5) {
              animation_counter = 3;
              console.log(animation_counter);
              setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
              getJSFunction('emitirEstadoAnimacion')();
            }
          }, 'H!m{)5:6?d!jCFo.V(aV');
        }, undefined, false);

            }
    }, function() {});
    outline('perno_d_bomba', 'ENABLE');
  }
}

// Describe this function...
function pandeo_4() {
  if (animation_counter == 4) {
    playSound(loadMedia_HTML5('./sounds/paso1/4.mp3'), false);
    outline('perno_allen_acople_motor', 'ENABLE');
    registerOnClick('perno_allen_acople_motor', false, false, [0,1,2], function() {
      if (animation_counter == 4) {
        outline('perno_allen_acople_motor', 'DISABLE');

        operateAnimation('PLAY', 'perno_allen_acople_motor', 50, 140, 'LoopOnce', 1,
                function() {

          operateAnimation('PLAY', 'acople_eje_motor', dictGet(pandeo_eje_5, 'ini'), dictGet(pandeo_eje_5, 'end'), 'LoopOnce', 1,
                  function() {
            playSound(loadMedia_HTML5('./sounds/paso1/5.mp3'), false);
            animation_counter = 5;
            console.log(animation_counter);
            setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
            getJSFunction('emitirEstadoAnimacion')();
          }, undefined, false);

              }, undefined, false);

            }
    }, function() {});
  }
}

// Describe this function...
function pandeo_3() {
  if (animation_counter == 3) {
    playSound(loadMedia_HTML5('./sounds/paso1/3.mp3'), false);
    tweenCamera('camera_1_position', 'camera_2_direction', 3, function() {}, undefined);
    outline('acople_eje_motor', 'ENABLE');
    registerOnClick('acople_eje_motor', false, false, [0,1,2], function() {
      if (animation_counter == 3) {
        outline('acople_eje_motor', 'DISABLE');

        operateAnimation('PLAY', 'acople_eje_motor', dictGet(pandeo_eje_3, 'ini'), dictGet(pandeo_eje_3, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 4;
          console.log(animation_counter);
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }, undefined, false);


        operateAnimation('PLAY', 'perno_allen_acople_motor', dictGet(pandeo_eje_3, 'ini'), dictGet(pandeo_eje_3, 'end'), 'LoopOnce', 1,
                function() {}, undefined, false);

            }
    }, function() {});
  }
}

// Describe this function...
function pandeo_5() {
  if (animation_counter == 5) {
    playSound(loadMedia_HTML5('./sounds/paso1/6.mp3'), false);
    registerSetTimeout(9, function() {
      tweenCamera('camera_1_position', 'camera_2_direction', 3, function() {}, undefined);
      playSound(loadMedia_HTML5('./sounds/paso1/7.mp3'), false);
      outline('base_brazo_magnetico', 'ENABLE');
      registerOnClick('base_brazo_magnetico', false, false, [0,1,2], function() {
        if (animation_counter == 5) {
          outline('base_brazo_magnetico', 'DISABLE');

          operateAnimation('PLAY', 'base_brazo_magnetico', dictGet(pandeo_eje_6, 'ini'), dictGet(pandeo_eje_6, 'end'), 'LoopOnce', 1,
                  function() {
            animation_counter = 6;
            console.log(animation_counter);
            setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
            getJSFunction('emitirEstadoAnimacion')();
          }, undefined, false);

              }
      }, function() {});
    });
  }
}

// Describe this function...
function pandeo_6() {
  if (animation_counter == 6) {
    playSound(loadMedia_HTML5('./sounds/0.3.mp3'), false);
    outline('eje_motor', 'ENABLE');
    registerOnClick('eje_motor', false, false, [0,1,2], function() {
      if (animation_counter == 6) {
        outline('eje_motor', 'DISABLE');

        operateAnimation('PLAY', 'eje_motor', dictGet(pandeo_eje_8, 'ini'), dictGet(pandeo_eje_8, 'end'), 'LoopOnce', 1,
                function() {

          operateAnimation('PLAY', 'base_brazo_magnetico', dictGet(pandeo_eje_6, 'ini'), dictGet(pandeo_eje_6, 'end'), 'LoopOnce', 1,
                  function() {
            animation_counter = 7;
            console.log(animation_counter);
            setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
            getJSFunction('emitirEstadoAnimacion')();
          }, undefined, true);

              }, undefined, false);

            }
    }, function() {});
  }
}

// Describe this function...
function acople_2() {
  if (animation_counter == 8) {
    tweenCamera('camera_1_position', 'camera_2_direction', 3, function() {}, undefined);
    playSound(loadMedia_HTML5('./sounds/paso2/10.mp3'), false);
    outline('base_brazo_magnetico', 'ENABLE');
    registerOnClick('base_brazo_magnetico', false, false, [0,1,2], function() {
      if (animation_counter == 8) {
        outline('base_brazo_magnetico', 'DISABLE');

        operateAnimation('PLAY', 'base_brazo_magnetico', dictGet(pandeo_eje_6, 'ini'), dictGet(pandeo_eje_6, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 9;
          console.log(animation_counter);
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }, undefined, false);

            }
    }, function() {});
  }
}

// Describe this function...
function acople_3() {
  if (animation_counter == 9) {
    playSound(loadMedia_HTML5('./sounds/0.3.mp3'), false);
    outline('acople_eje_motor', 'ENABLE');
    registerOnClick('acople_eje_motor', false, false, [0,1,2], function() {
      if (animation_counter == 9) {
        outline('acople_eje_motor', 'DISABLE');

        operateAnimation('PLAY', 'acople_eje_motor', dictGet(pandeo_eje_3, 'ini'), dictGet(pandeo_eje_3, 'end'), 'LoopOnce', 1,
                function() {}, undefined, false);


        operateAnimation('PLAY', 'perno_allen_acople_motor', dictGet(pandeo_eje_3, 'ini'), dictGet(pandeo_eje_3, 'end'), 'LoopOnce', 1,
                function() {
          animation_counter = 10;
          console.log(animation_counter);
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
          registerSetTimeout(5, function() {

            operateAnimation('PLAY', 'base_brazo_magnetico', dictGet(pandeo_eje_6, 'ini'), dictGet(pandeo_eje_6, 'end'), 'LoopOnce', 1,
                    function() {}, undefined, true);

                });
        }, undefined, false);

            }
    }, function() {});
  }
}

// Describe this function...
function acople_1() {
  if (animation_counter == 7) {
    tweenCamera('camera_1_position', 'camera_2_direction', 3, function() {}, undefined);
    playSound(loadMedia_HTML5('./sounds/paso2/9.mp3'), false);
    outline('acople_eje_motor', 'ENABLE');
    registerOnClick('acople_eje_motor', false, false, [0,1,2], function() {
      if (animation_counter == 7) {
        outline('acople_eje_motor', 'DISABLE');

        operateAnimation('PLAY', 'acople_eje_motor', 50, 250, 'LoopOnce', 1,
                function() {

          operateAnimation('PLAY', 'perno_allen_acople_motor', 50, 140, 'LoopOnce', 1,
                  function() {
            animation_counter = 8;
            console.log(animation_counter);
            setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
            getJSFunction('emitirEstadoAnimacion')();
          }, undefined, true);

              }, undefined, true);

            }
    }, function() {});
  }
}

// Describe this function...
function pata_3() {
  if (animation_counter == 12) {
    tweenCamera('camera_4_position', 'camera_4_direction', 3, function() {}, undefined);
    playSound(loadMedia_HTML5('./sounds/paso3/12-1.mp3'), false);
    outline('lamina_de_medidas_4', 'ENABLE');
    registerOnClick('lamina_de_medidas_4', false, false, [0,1,2], function() {
      if (animation_counter == 12) {
        outline('lamina_de_medidas_4', 'DISABLE');

        operateAnimation('PLAY', 'Feeler_gauge_lamina_1', 100, 190, 'LoopOnce', 1,
                function() {

          operateAnimation('PLAY', 'feeler_gauge', 1, 190, 'LoopOnce', 1.5,
                  function() {}, undefined, true);

              }, undefined, true);

            registerSetTimeout(3, function() {

          operateAnimation('PLAY', 'lamina_de_medidas_4', 1, 190, 'LoopOnce', 1,
                  function() {
            animation_counter = 13;
            console.log(animation_counter);
            setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
            getJSFunction('emitirEstadoAnimacion')();
          }, undefined, false);

              });
      }
    }, function() {});
  }
}

// Describe this function...
function pata_4() {
  if (animation_counter == 13) {
    playSound(loadMedia_HTML5('./sounds/paso3/13.mp3'), false);
    outline('tuerca_perno_base_motor_1', 'ENABLE');
    outline('tuerca_perno_base_motor_2', 'ENABLE');
    outline('tuerca_perno_base_motor_3', 'ENABLE');
    outline('tuerca_perno_base_motor_4', 'ENABLE');
    registerSetTimeout(3, function() {
      outline('tuerca_perno_base_motor_1', 'DISABLE');
      outline('tuerca_perno_base_motor_4', 'DISABLE');
      outline('tuerca_perno_base_motor_3', 'DISABLE');
    });
    registerOnClick('tuerca_perno_base_motor_2', false, false, [0,1,2], function() {
      if (animation_counter == 13) {
        outline('tuerca_perno_base_motor_2', 'DISABLE');

        operateAnimation('PLAY', 'tuerca_perno_base_motor_1', 1, 150, 'LoopOnce', 1,
                function() {}, undefined, true);


        operateAnimation('PLAY', 'tuerca_perno_base_motor_2', 1, 150, 'LoopOnce', 1,
                function() {}, undefined, true);


        operateAnimation('PLAY', 'tuerca_perno_base_motor_3', 1, 150, 'LoopOnce', 1,
                function() {}, undefined, true);


        operateAnimation('PLAY', 'tuerca_perno_base_motor_4', 1, 150, 'LoopOnce', 1,
                function() {
          animation_counter = 14;
          console.log(animation_counter);
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }, undefined, true);

            }
    }, function() {});
  }
}

// Describe this function...
function pata_1() {
  if (animation_counter == 10) {
    tweenCamera('camera_4_position', 'camera_4_direction', 3, function() {}, undefined);
    playSound(loadMedia_HTML5('./sounds/paso2/11.mp3'), false);
    outline('tuerca_perno_base_motor_1', 'ENABLE');
    outline('tuerca_perno_base_motor_2', 'ENABLE');
    outline('tuerca_perno_base_motor_3', 'ENABLE');
    outline('tuerca_perno_base_motor_4', 'ENABLE');
    registerSetTimeout(3, function() {
      outline('tuerca_perno_base_motor_1', 'DISABLE');
      outline('tuerca_perno_base_motor_4', 'DISABLE');
      outline('tuerca_perno_base_motor_3', 'DISABLE');
    });
    registerOnClick('tuerca_perno_base_motor_2', false, false, [0,1,2], function() {
      if (animation_counter == 10) {
        outline('tuerca_perno_base_motor_2', 'DISABLE');

        operateAnimation('PLAY', 'tuerca_perno_base_motor_1', 1, 150, 'LoopOnce', 1,
                function() {}, undefined, false);


        operateAnimation('PLAY', 'tuerca_perno_base_motor_2', 1, 150, 'LoopOnce', 1,
                function() {}, undefined, false);


        operateAnimation('PLAY', 'tuerca_perno_base_motor_3', 1, 150, 'LoopOnce', 1,
                function() {}, undefined, false);


        operateAnimation('PLAY', 'tuerca_perno_base_motor_4', 1, 150, 'LoopOnce', 1,
                function() {
          animation_counter = 11;
          console.log(animation_counter);
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }, undefined, false);

            }
    }, function() {});
  }
}

// Describe this function...
function pata_5() {
  if (animation_counter == 14) {
    tweenCamera('camera_4_position', 'camera_4_direction', 3, function() {}, undefined);
    playSound(loadMedia_HTML5('./sounds/paso3/14.mp3'), false);
    changeVis('reloj_alineador_brazo', false);
    changeVis('reloj_palpador', true);
    outline('base_brazo_magnetico', 'ENABLE');
    registerOnClick('base_brazo_magnetico', false, false, [0,1,2], function() {
      if (animation_counter == 14) {
        outline('base_brazo_magnetico', 'DISABLE');

        operateAnimation('PLAY', 'base_brazo_magnetico', 370, 500, 'LoopOnce', 1,
                function() {
          animation_counter = 15;
          console.log(animation_counter);
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }, undefined, false);

            }
    }, function() {});
  }
}

// Describe this function...
function pata_6() {
  if (animation_counter == 15) {
    playSound(loadMedia_HTML5('./sounds/paso3/16.mp3'), false);
    changeVis('reloj_alineador_brazo', false);
    changeVis('reloj_palpador', true);
    outline('base_brazo_magnetico', 'ENABLE');
    registerOnClick('base_brazo_magnetico', false, false, [0,1,2], function() {
      if (animation_counter == 15) {
        outline('base_brazo_magnetico', 'DISABLE');

        operateAnimation('PLAY', 'base_brazo_magnetico', 370, 500, 'LoopOnce', 1,
                function() {
          animation_counter = 16;
          console.log(animation_counter);
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }, undefined, true);

            }
    }, function() {});
  }
}

// Describe this function...
function pata_2() {
  if (animation_counter == 11) {
    tweenCamera('camera_4_position', 'camera_4_direction', 3, function() {}, undefined);
    playSound(loadMedia_HTML5('./sounds/paso3/12.mp3'), false);
    outline('feeler_gauge', 'ENABLE');
    registerOnClick('feeler_gauge', false, false, [0,1,2], function() {
      if (animation_counter == 11) {
        outline('feeler_gauge', 'DISABLE');

        operateAnimation('PLAY', 'feeler_gauge', 1, 190, 'LoopOnce', 1,
                function() {}, undefined, false);

            registerSetTimeout(1, function() {

          operateAnimation('PLAY', 'Feeler_gauge_lamina_1', 1, 190, 'LoopOnce', 1,
                  function() {
            animation_counter = 12;
            console.log(animation_counter);
            setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
            getJSFunction('emitirEstadoAnimacion')();
          }, undefined, false);

              });
      }
    }, function() {});
  }
}

// Describe this function...
function alineamiento_1() {
  if (animation_counter == 16) {
    tweenCamera('camera_2_position', 'camera_2_direction', 3, function() {}, undefined);
    playSound(loadMedia_HTML5('./sounds/paso4/18.mp3'), false);
    registerOnDrag('instance_mov_bomba', false, [0,1,2], function() {}, function() {
      dragMove('bomba', 'Y', ';Tg/QO9t{[u9`0wwA-%Z', '^(mKo#YLO4Q#v#?i4?%~');
      outline('instance_mov_bomba', 'ENABLE');
      objConstraintAddLimit('limit 9', 'bomba', 'POS_Y', 21.84, 31.5);
      if (getObjTransform('bomba', 'position', 'y') == 21.84) {
        changeVis('instance_mov_bomba', false);
        outline('bomba', 'DISABLE');
      }
    }, function() {
      outline('instance_mov_bomba', 'DISABLE');
      registerSetTimeout(3, function() {
        outline('perno_b_bomba', 'ENABLE');
        outline('perno_c_bomba', 'ENABLE');
        outline('perno_d_bomba', 'ENABLE');
        outline('perno_a_bomba', 'ENABLE');
        registerSetTimeout(3, function() {
          outline('perno_b_bomba', 'DISABLE');
          outline('perno_c_bomba', 'DISABLE');
          outline('perno_d_bomba', 'DISABLE');
        });
        registerOnClick('perno_a_bomba', false, false, [0,1,2], function() {
          if (animation_counter == 16) {
            outline('perno_a_bomba', 'DISABLE');

            operateAnimation('PLAY', 'perno_a_bomba', dictGet(pandeo_eje_1, 'ini'), dictGet(pandeo_eje_1, 'end'), 'LoopOnce', 1,
                    function() {}, undefined, true);


            operateAnimation('PLAY', 'perno_b_bomba', dictGet(pandeo_eje_1, 'ini'), dictGet(pandeo_eje_1, 'end'), 'LoopOnce', 1,
                    function() {}, undefined, true);


            operateAnimation('PLAY', 'perno_c_bomba', dictGet(pandeo_eje_1, 'ini'), dictGet(pandeo_eje_1, 'end'), 'LoopOnce', 1,
                    function() {}, undefined, true);


            operateAnimation('PLAY', 'perno_d_bomba', dictGet(pandeo_eje_1, 'ini'), dictGet(pandeo_eje_1, 'end'), 'LoopOnce', 1,
                    function() {
              animation_counter = 17;
              console.log(animation_counter);
              setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
              getJSFunction('emitirEstadoAnimacion')();
            }, undefined, true);

                }
        }, function() {});
      });
    }, '^(mKo#YLO4Q#v#?i4?%~');
  }
}

// Describe this function...
function alineamiento_2() {
  if (animation_counter == 17) {
  }
  tweenCamera('camera_4_position', 'camera_4_direction', 3, function() {}, undefined);
  playSound(loadMedia_HTML5('./sounds/paso4/19.mp3'), false);
  outline('regla_de_pelo', 'ENABLE');
  registerOnClick('regla_de_pelo', false, false, [0,1,2], function() {
    if (animation_counter == 17) {
      outline('regla_de_pelo', 'DISABLE');

      operateAnimation('PLAY', 'regla_de_pelo', 1, 150, 'LoopOnce', 1,
              function() {
        tweenCamera('camera_4_position', 'camera_4_direction', 3, function() {}, undefined);
        playSound(loadMedia_HTML5('./sounds/paso4/20.mp3'), false);
        outline('lamina_de_medidas_3', 'ENABLE');
        registerSetTimeout(2, function() {
          registerOnClick('lamina_de_medidas_3', false, false, [0,1,2], function() {
            outline('lamina_de_medidas_3', 'DISABLE');
            if (animation_counter == 17) {

              operateAnimation('PLAY', 'lamina_de_medidas_3', 1, 250, 'LoopOnce', 1,
                      function() {
                outline('lamina_de_medidas_2', 'ENABLE');
                registerOnClick('lamina_de_medidas_2', false, false, [0,1,2], function() {
                  outline('lamina_de_medidas_2', 'DISABLE');
                  if (animation_counter == 17) {

                    operateAnimation('PLAY', 'lamina_de_medidas_2', 1, 250, 'LoopOnce', 1,
                            function() {
                      animation_counter = 18;
                      console.log(animation_counter);
                      setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
                      getJSFunction('emitirEstadoAnimacion')();
                    }, undefined, false);

                        }
                }, function() {});
              }, undefined, false);

                  }
          }, function() {});
        });
      }, undefined, false);

          }
  }, function() {});
}

// Describe this function...
function alineamiento_3() {
  if (animation_counter == 18) {
    playSound(loadMedia_HTML5('./sounds/paso4/21.mp3'), false);
    outline('regla_de_pelo', 'ENABLE');
    registerOnClick('regla_de_pelo', false, false, [0,1,2], function() {
      if (animation_counter == 18) {
        outline('regla_de_pelo', 'DISABLE');

        operateAnimation('PLAY', 'regla_de_pelo', 150, 210, 'LoopOnce', 1,
                function() {
          registerSetTimeout(2, function() {
            playSound(loadMedia_HTML5('./sounds/paso4/23.mp3'), false);
            outline('llave_mixta_1', 'ENABLE');
            registerOnClick('llave_mixta_1', false, false, [0,1,2], function() {
              if (animation_counter == 18) {
                outline('llave_mixta_1', 'DISABLE');

                operateAnimation('PLAY', 'llave_mixta_1', 1, 100, 'LoopOnce', 1,
                        function() {
                  registerSetTimeout(1, function() {

                    operateAnimation('PLAY', 'llave_mixta_1', 1, 100, 'LoopOnce', 1,
                            function() {

                      operateAnimation('PLAY', 'regla_de_pelo', 1, 210, 'LoopOnce', 1,
                              function() {
                        animation_counter = 19;
                        console.log(animation_counter);
                        setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
                        getJSFunction('emitirEstadoAnimacion')();
                      }, undefined, true);

                          }, undefined, true);

                        });
                }, undefined, false);

                    }
            }, function() {});
          });
        }, undefined, false);

            }
    }, function() {});
  }
}


// getAnimations puzzle
function getAnimations(objSelector) {
    var objNames = retrieveObjectNames(objSelector);

    var animations = [];
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        // use objName as animName - for now we have one-to-one match
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, objName);
        if (action)
            animations.push(objName);
    }
    return animations;
}


// Describe this function...
function alineamiento_4() {
  if (animation_counter == 19) {
    playSound(loadMedia_HTML5('./sounds/paso4/24.mp3'), false);
    outline('cadena_sujetadora_a', 'ENABLE');
    registerOnClick('cadena_sujetadora_a', false, false, [0,1,2], function() {
      if (animation_counter == 19) {
        outline('cadena_sujetadora_a', 'DISABLE');

        operateAnimation('PLAY', 'armature_cadena_a', 1, 400, 'LoopOnce', 1,
                function() {

          operateAnimation('PLAY', varillas_cadena, 1, 170, 'LoopOnce', 1,
                  function() {

            operateAnimation('PLAY', getAnimations(['GROUP', 'reloj_alineador_b']), 1, 230, 'LoopOnce', 1,
                    function() {

              operateAnimation('PLAY', getAnimations(['GROUP', 'reloj_alineador_a']), 1, 320, 'LoopOnce', 1,
                      function() {

                operateAnimation('PLAY', 'armature_cadena_b', 1, 430, 'LoopOnce', 1,
                        function() {

                  operateAnimation('PLAY', getAnimations(['GROUP', 'reloj_alineador_b']), 230, 330, 'LoopOnce', 1,
                          function() {
                    animation_counter = 20;
                    console.log(animation_counter);
                    setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
                    getJSFunction('emitirEstadoAnimacion')();
                  }, undefined, false);

                      }, undefined, false);

                    }, undefined, false);

                  }, undefined, false);

                }, undefined, false);

              }, undefined, false);

            }
    }, function() {});
  }
}

// Describe this function...
function alineamiento_6() {
  if (animation_counter == 21) {
    tweenCamera('camera_1_position', 'camera_1_direction', 3, function() {}, undefined);
    playSound(loadMedia_HTML5('./sounds/paso4/32.mp3'), false);
    outline('base_brazo_magnetico', 'ENABLE');
    outline('base_brazo_magnetico_b', 'ENABLE');
    registerOnClick('base_brazo_magnetico', false, false, [0,1,2], function() {
      if (animation_counter == 21) {
        outline('base_brazo_magnetico', 'DISABLE');

        operateAnimation('PLAY', 'base_brazo_magnetico', 560, 630, 'LoopOnce', 1,
                function() {}, undefined, false);

            }
    }, function() {});
    registerOnClick('base_brazo_magnetico_b', false, false, [0,1,2], function() {
      if (animation_counter == 21) {
        outline('base_brazo_magnetico_b', 'DISABLE');

        operateAnimation('PLAY', 'base_brazo_magnetico_b', 1, 70, 'LoopOnce', 1,
                function() {
          animation_counter = 22;
          console.log(animation_counter);
          setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
          getJSFunction('emitirEstadoAnimacion')();
        }, undefined, false);

            }
    }, function() {});
    registerSetTimeout(8, function() {
      playSound(loadMedia_HTML5('./sounds/paso4/33.mp3'), false);
    });
  }
}

// Describe this function...
function alineamiento_5() {
  if (animation_counter == 20) {
    playSound(loadMedia_HTML5('./sounds/paso4/27.mp3'), false);
    registerSetTimeout(5, function() {

      operateAnimation('PLAY', 'rotador', 440, 560, 'LoopOnce', 1,
              function() {
        registerSetTimeout(5, function() {
          playSound(loadMedia_HTML5('./sounds/paso4/27.mp3'), false);

          operateAnimation('PLAY', 'rotador', 560, 690, 'LoopOnce', 1,
                  function() {
            playSound(loadMedia_HTML5('./sounds/paso4/31.mp3'), false);
            animation_counter = 21;
            console.log(animation_counter);
            setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
            getJSFunction('emitirEstadoAnimacion')();
          }, undefined, false);

              });
      }, undefined, false);

          });
  }
}

// Describe this function...
function alineamiento_7() {
  if (animation_counter == 22) {
    playSound(loadMedia_HTML5('./sounds/paso4/35.mp3'), false);

    operateAnimation('PLAY', 'base_brazo_magnetico', 560, 630, 'LoopOnce', 1,
            function() {
      animation_counter = 23;
      console.log(animation_counter);
      setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
      getJSFunction('emitirEstadoAnimacion')();
    }, undefined, true);


    operateAnimation('PLAY', 'base_brazo_magnetico_b', 1, 70, 'LoopOnce', 1,
            function() {}, undefined, true);

        registerSetTimeout(5, function() {
      playSound(loadMedia_HTML5('./sounds/paso4/36.mp3'), false);
    });
  }
}


initFullscreen('fullscreen_button', true, function() {
  console.log('fullscreen_button');
}, function() {}, function() {
  setHTMLElemStyle('visibility', 'hidden', 'fullscreen_button', true);
});

instancia_control2 = ['instancia_mov_b', 'instancia_mov_2_b', 'instancia_mov_3_b', 'instancia_mov_4_b', 'instancia_mov_5_b', 'instancia_rot_b', 'instancia_rot_2_b', 'instancia_rot_vertebra_b'];

registerOnHover('brazo_1_b', false, function() {
  outline('brazo_1_b', 'ENABLE');
}, function() {
  outline('brazo_1_b', 'DISABLE');
});
registerOnHover('brazo_2_b', false, function() {
  outline('brazo_2_b', 'ENABLE');
}, function() {
  outline('brazo_2_b', 'DISABLE');
});
registerOnHover('brazo_3_b', false, function() {
  outline('brazo_3_b', 'ENABLE');
}, function() {
  outline('brazo_3_b', 'DISABLE');
});

registerOnClick('brazo_1_b', false, false, [0,1,2], function() {
  changeVis(instancia_control2, false);
  changeVis('instancia_mov_b', true);
  changeVis('instancia_rot_2_b', true);
  changeVis('instancia_mov_2_b', true);
}, function() {});
registerOnClick('brazo_2_b', false, false, [0,1,2], function() {
  changeVis(instancia_control2, false);
  changeVis('instancia_mov_3_b', true);
}, function() {});
registerOnClick('brazo_3_b', false, false, [0,1,2], function() {
  changeVis(instancia_control2, false);
  changeVis('instancia_rot_2_b', true);
  changeVis('instancia_mov_4_b', true);
  changeVis('instancia_mov_5_b', true);
  changeVis('instancia_rot_vertebra_b', true);
}, function() {});

posici_C3_B3n_inicial_inici();

instancia_control = ['instancia_mov', 'instancia_mov_2', 'instancia_mov_3', 'instancia_mov_4', 'instancia_mov_5', 'instancia_rot', 'instancia_rot_2', 'instancia_rot_vertebra'];

registerOnHover('brazo_1', false, function() {
  outline('brazo_1', 'ENABLE');
}, function() {
  outline('brazo_1', 'DISABLE');
});
registerOnHover('brazo_2', false, function() {
  outline('brazo_2', 'ENABLE');
}, function() {
  outline('brazo_2', 'DISABLE');
});
registerOnHover('brazo_3', false, function() {
  outline('brazo_3', 'ENABLE');
}, function() {
  outline('brazo_3', 'DISABLE');
});

registerOnClick('brazo_1', false, false, [0,1,2], function() {
  changeVis(instancia_control, false);
  changeVis('instancia_mov', true);
  changeVis('instancia_rot', true);
  changeVis('instancia_mov_2', true);
}, function() {});

changeVis(instancia_control2, false);

console.log('3. Control de Ejes');
pata_coja_1 = {};
dictSet(pata_coja_1, 'ini', 1);
dictSet(pata_coja_1, 'end', 150);
console.log(pata_coja_1);
pata_coja_2 = {};
dictSet(pata_coja_2, 'ini', 1);
dictSet(pata_coja_2, 'end', 190);
console.log(pata_coja_2);
pata_coja_3 = {};
dictSet(pata_coja_3, 'ini', 1);
dictSet(pata_coja_3, 'end', 150);
console.log(pata_coja_3);
pata_coja_4 = {};
dictSet(pata_coja_4, 'ini', 1);
dictSet(pata_coja_4, 'end', 150);
console.log(pata_coja_4);
pata_coja_5 = {};
dictSet(pata_coja_5, 'ini', 370);
dictSet(pata_coja_5, 'end', 500);
console.log(pata_coja_5);
pata_coja_6 = {};
dictSet(pata_coja_6, 'ini', 500);
dictSet(pata_coja_6, 'end', 550);
console.log(pata_coja_6);

console.log('1. Pandeo de Eje');
pandeo_eje_1 = {};
dictSet(pandeo_eje_1, 'ini', 1);
dictSet(pandeo_eje_1, 'end', 150);
console.log(pandeo_eje_1);
pandeo_eje_3 = {};
dictSet(pandeo_eje_3, 'ini', 1);
dictSet(pandeo_eje_3, 'end', 50);
console.log(pandeo_eje_3);
pandeo_eje_4 = {};
dictSet(pandeo_eje_4, 'ini', 80);
dictSet(pandeo_eje_4, 'end', 140);
console.log(pandeo_eje_4);
pandeo_eje_5 = {};
dictSet(pandeo_eje_5, 'ini', 50);
dictSet(pandeo_eje_5, 'end', 250);
console.log(pandeo_eje_5);
pandeo_eje_6 = {};
dictSet(pandeo_eje_6, 'ini', 1);
dictSet(pandeo_eje_6, 'end', 200);
console.log(pandeo_eje_6);
pandeo_eje_7 = {};
dictSet(pandeo_eje_7, 'ini', 220);
dictSet(pandeo_eje_7, 'end', 350);
console.log(pandeo_eje_7);
pandeo_eje_8 = {};
dictSet(pandeo_eje_8, 'ini', 1);
dictSet(pandeo_eje_8, 'end', 50);
console.log(pandeo_eje_8);

registerOnClick('brazo_2', false, false, [0,1,2], function() {
  changeVis(instancia_control, false);
  changeVis('instancia_mov_3', true);
}, function() {});

changeVis(instancia_control, false);

registerOnDrag('instancia_mov_2_b', false, [0,1,2], function() {}, function() {
  dragRotate('brazo_1_b', 'Y', false, 'Z/)hqvY/tL,EljOEa;{6', 'y|~DICfdf!MBF@e7tLZw');
  outline('instancia_mov_2_b', 'ENABLE');
  objConstraintAddLimit('limit 1', 'brazo_1_b', 'ROT_Y', 0, 360);
}, function() {
  outline('instancia_mov_2_b', 'DISABLE');
}, 'y|~DICfdf!MBF@e7tLZw');
registerOnDrag('instancia_rot_b', false, [0,1,2], function() {}, function() {
  dragRotate('brazo_1_b', 'Z', false, ']V.%?3kCw4=V{kavV%k0', 't1zF!i)ye!(+[A-bTFGc');
  outline('instancia_rot_b', 'ENABLE');
  objConstraintAddLimit('limit 2', 'brazo_1_b', 'ROT_Z', 0, 360);
}, function() {
  outline('instancia_rot_b', 'DISABLE');
}, 't1zF!i)ye!(+[A-bTFGc');
registerOnDrag('instancia_mov_b', false, [0,1,2], function() {}, function() {
  dragRotate('brazo_1_b', 'X', false, '/;_-1M#a5p215l)4]?u#', 'y%bUP8IzEAdg9Z;Ze!y-');
  outline('instancia_mov_b', 'ENABLE');
  objConstraintAddLimit('limit 3', 'brazo_1_b', 'ROT_X', 0, 360);
}, function() {
  outline('instancia_mov_b', 'DISABLE');
}, 'y%bUP8IzEAdg9Z;Ze!y-');
registerOnDrag('instancia_rot_2_b', false, [0,1,2], function() {}, function() {
  dragRotate('brazo_3_b', 'Z', false, 'w0Aoy[$AWGwh|1][mYOX', 'Xa+IPf/!IKKK_3SoK3[F');
  outline('instancia_rot_2_b', 'ENABLE');
  objConstraintAddLimit('limit 4', 'brazo_3_b', 'SCALE_Z', 0, 360);
}, function() {
  outline('instancia_rot_2_b', 'DISABLE');
}, 'Xa+IPf/!IKKK_3SoK3[F');
registerOnDrag('instancia_mov_4_b', false, [0,1,2], function() {}, function() {
  dragRotate('brazo_3_b', 'Y', false, 't7Q~wQu2eG]^thEH,`},', 'rZ?Sd=bN0=k/b_`Bd%Tp');
  outline('instancia_mov_4_b', 'ENABLE');
  objConstraintAddLimit('limit 5', 'brazo_3_b', 'ROT_Y', 0, 360);
}, function() {
  outline('instancia_mov_4_b', 'DISABLE');
}, 'rZ?Sd=bN0=k/b_`Bd%Tp');
registerOnDrag('instancia_mov_5_b', false, [0,1,2], function() {}, function() {
  dragRotate('brazo_3_b', 'X', false, 'q`],|}gdh)?Aw@/W_yb#', '?|YrhdF8$R}]chXw{Y,Z');
  outline('instancia_mov_5_b', 'ENABLE');
  objConstraintAddLimit('limit 6', 'brazo_3_b', 'ROT_X', 0, 360);
}, function() {
  outline('instancia_mov_5_b', 'DISABLE');
}, '?|YrhdF8$R}]chXw{Y,Z');
registerOnDrag('instancia_mov_3_b', false, [0,1,2], function() {}, function() {
  dragRotate('brazo_2_b', 'X', false, 'Ze.f/(2HCE~~g*S%(S|[', 'ysLdm?!]hi;c};VG?Xx/');
  outline('instancia_mov_3_b', 'ENABLE');
  objConstraintAddLimit('limit 7', 'brazo_2_b', 'ROT_X', -160, 160);
}, function() {
  outline('instancia_mov_3_b', 'DISABLE');
}, 'ysLdm?!]hi;c};VG?Xx/');
registerOnDrag('instancia_rot_vertebra_b', false, [0,1,2], function() {}, function() {
  dragRotate('vertebra_brazo_3_b', 'Z', false, '?..zjWY|N}tVgsB+ZT2T', 'TFb]H?@!FL07c4*TtqTD');
  outline('instancia_rot_vertebra_b', 'ENABLE');
  objConstraintAddLimit('limit 8', 'vertebra_brazo_3_b', 'ROT_Z', 360, 0);
}, function() {
  outline('instancia_rot_vertebra_b', 'DISABLE');
}, 'TFb]H?@!FL07c4*TtqTD');
// para rotar el reloj comparador
//
registerOnDrag('instancia_rot_3_b', false, [0,1,2], function() {}, function() {
  dragRotate('seguro_reloj_b', 'X', false, 'lLN#n9sx.BEy~u:/@zs3', 'G%e;kWBApb=?9xA}8kLR');
  outline('instancia_rot_3_b', 'ENABLE');
  objConstraintAddLimit('limit 10', 'seguro_reloj_b', 'ROT_X', 0, 360);
}, function() {
  outline('instancia_rot_3_b', 'DISABLE');
}, 'G%e;kWBApb=?9xA}8kLR');

registerOnDrag('instancia_mov_2', false, [0,1,2], function() {}, function() {
  dragRotate('brazo_1', 'Y', false, '?13pi^{i7*up+0K.i|wo', '}h.!eFc/DF^pbPr%R`j6');
  outline('instancia_mov_2', 'ENABLE');
  objConstraintAddLimit('limit 1', 'brazo_1', 'ROT_Y', 0, 360);
}, function() {
  outline('instancia_mov_2', 'DISABLE');
}, '}h.!eFc/DF^pbPr%R`j6');
registerOnDrag('instancia_rot', false, [0,1,2], function() {}, function() {
  dragRotate('brazo_1', 'Z', false, '*Oq#HR?7Sc@/lO,-%40v', 'fy;4y0xX,%!8mxWOxx#{');
  outline('instancia_rot', 'ENABLE');
  objConstraintAddLimit('limit 2', 'brazo_1', 'ROT_Z', 0, 360);
}, function() {
  outline('instancia_rot', 'DISABLE');
}, 'fy;4y0xX,%!8mxWOxx#{');
registerOnDrag('instancia_mov', false, [0,1,2], function() {}, function() {
  dragRotate('brazo_1', 'X', false, 'Kj9QN?ebw^l@tRtVld]T', 'jUyDU=E3CFOP^bDHYmzh');
  outline('instancia_mov', 'ENABLE');
  objConstraintAddLimit('limit 3', 'brazo_1', 'ROT_X', 0, 360);
}, function() {
  outline('instancia_mov', 'DISABLE');
}, 'jUyDU=E3CFOP^bDHYmzh');
registerOnDrag('instancia_rot_2', false, [0,1,2], function() {}, function() {
  dragRotate('brazo_3', 'Z', false, 'cq:nrgfhbIK9Q-MV.D(i', 'jV/])!N0nH:mkc2p.jr[');
  outline('instancia_rot_2', 'ENABLE');
  objConstraintAddLimit('limit 4', 'brazo_3', 'SCALE_Z', 0, 360);
}, function() {
  outline('instancia_rot_2', 'DISABLE');
}, 'jV/])!N0nH:mkc2p.jr[');
registerOnDrag('instancia_mov_4', false, [0,1,2], function() {}, function() {
  dragRotate('brazo_3', 'Y', false, '?d#Ju6M=M(|SYp40u`gN', 'W[F)RpP$b*i[#,#`{$_v');
  outline('instancia_mov_4', 'ENABLE');
  objConstraintAddLimit('limit 5', 'brazo_3', 'ROT_Y', 0, 360);
}, function() {
  outline('instancia_mov_4', 'DISABLE');
}, 'W[F)RpP$b*i[#,#`{$_v');
registerOnDrag('instancia_mov_5', false, [0,1,2], function() {}, function() {
  dragRotate('brazo_3', 'X', false, 'M+G(OA-#DZJ6VhMm]Sv|', 'b4uX?%@N}j#S9HeP*Y~j');
  outline('instancia_mov_5', 'ENABLE');
  objConstraintAddLimit('limit 6', 'brazo_3', 'ROT_X', 0, 360);
}, function() {
  outline('instancia_mov_5', 'DISABLE');
}, 'b4uX?%@N}j#S9HeP*Y~j');
registerOnDrag('instancia_mov_3', false, [0,1,2], function() {}, function() {
  dragRotate('brazo_2', 'X', false, ',PPP[qb[F74Vs[v~6~rR', '/$YA,%ouPWtf.R0qP0GG');
  outline('instancia_mov_3', 'ENABLE');
  objConstraintAddLimit('limit 7', 'brazo_2', 'ROT_X', -160, 160);
}, function() {
  outline('instancia_mov_3', 'DISABLE');
}, '/$YA,%ouPWtf.R0qP0GG');
registerOnDrag('instancia_rot_vertebra', false, [0,1,2], function() {}, function() {
  dragRotate('vertebra_brazo_3', 'Z', false, '993HNCp)y|Rmvzm4^-kV', 'rin=w^{8bw1Hp?qW9~})');
  outline('instancia_rot_vertebra', 'ENABLE');
  objConstraintAddLimit('limit 8', 'vertebra_brazo_3', 'ROT_Z', 360, 0);
}, function() {
  outline('instancia_rot_vertebra', 'DISABLE');
}, 'rin=w^{8bw1Hp?qW9~})');
// para rotar el reloj comparador
//
registerOnDrag('instancia_rot_3', false, [0,1,2], function() {}, function() {
  dragRotate('seguro_reloj', 'X', false, 'W;P9}t#5o}{oTaW[Fsr8', 't:$r~nP/IvNH8{@!=nQC');
  outline('instancia_rot_3', 'ENABLE');
  objConstraintAddLimit('limit 10', 'seguro_reloj', 'ROT_X', 0, 360);
}, function() {
  outline('instancia_rot_3', 'DISABLE');
}, 't:$r~nP/IvNH8{@!=nQC');

registerOnClick('brazo_3', false, false, [0,1,2], function() {
  changeVis(instancia_control, false);
  changeVis('instancia_rot_2', true);
  changeVis('instancia_mov_4', true);
  changeVis('instancia_mov_5', true);
  changeVis('instancia_rot_vertebra', true);
}, function() {});

varillas_cadena = ['varilla_a', 'varilla_b'];

animation_counter = 0;
eventHTMLElem('click', 'pro1-btn', true, function(event) {
  console.log('1. Pandeo del Eje del Motor');
  tweenCamera('camera_2_position', 'camera_2_direction', 3, function() {}, undefined);
});
eventHTMLElem('click', 'pro1-paso1', true, function(event) {
  pandeo_1();
});
eventHTMLElem('click', 'pro1-paso2', true, function(event) {
  if (animation_counter == 1) {
    setHTMLElemStyle('display', 'flex', 'juego', true);
    registerSetTimeout(20, function() {
      setHTMLElemStyle('color', '#fff', 'cerrar-juego', true);
      setHTMLElemStyle('display', 'flex', 'cerrar-juego', true);
      animation_counter = 2;
      setHTMLElemAttribute('value', animation_counter, 'estado_animacion', true);
      getJSFunction('emitirEstadoAnimacion')();
    });
  }
});
eventHTMLElem('click', 'pro1-paso3', true, function(event) {
  pandeo_2();
});
eventHTMLElem('click', 'pro1-paso4', true, function(event) {
  pandeo_3();
});
eventHTMLElem('click', 'pro1-paso5', true, function(event) {
  pandeo_4();
});
eventHTMLElem('click', 'pro1-paso6', true, function(event) {
  pandeo_5();
});
eventHTMLElem('click', 'pro1-paso7', true, function(event) {
  pandeo_6();
});
eventHTMLElem('click', 'cerrar-juego', true, function(event) {
  if (animation_counter == 2) {
    setHTMLElemStyle('display', 'none', 'juego', true);
  }
});

eventHTMLElem('click', 'pro2-btn', true, function(event) {
  console.log('2. Control del Acople');
  console.log(animation_counter);
  tweenCamera('camera_2_position', 'camera_2_direction', 3, function() {}, undefined);
});
eventHTMLElem('click', 'pro2-paso8', true, function(event) {
  acople_1();
});
eventHTMLElem('click', 'pro2-paso9', true, function(event) {
  acople_2();
});
eventHTMLElem('click', 'pro2-paso10', true, function(event) {
  acople_3();
});

eventHTMLElem('click', 'pro3-btn', true, function(event) {
  console.log('3. Control de la Pata coja');
  console.log(animation_counter);
  tweenCamera('camera_2_position', 'camera_2_direction', 3, function() {}, undefined);
});
eventHTMLElem('click', 'pro3-paso11', true, function(event) {
  pata_1();
});
eventHTMLElem('click', 'pro3-paso12', true, function(event) {
  pata_2();
});
eventHTMLElem('click', 'pro3-paso13', true, function(event) {
  pata_3();
});
eventHTMLElem('click', 'pro3-paso14', true, function(event) {
  pata_4();
});
eventHTMLElem('click', 'pro3-paso15', true, function(event) {
  pata_5();
});
eventHTMLElem('click', 'pro3-paso16', true, function(event) {
  pata_6();
});

eventHTMLElem('click', 'pro4-btn', true, function(event) {
  console.log('4. Alineamiento');
  changeVis('instance_mov_bomba', true);
  console.log(animation_counter);
  tweenCamera('camera_2_position', 'camera_2_direction', 3, function() {}, undefined);
});
eventHTMLElem('click', 'pro4-paso17', true, function(event) {
  alineamiento_1();
});
eventHTMLElem('click', 'pro4-paso18', true, function(event) {
  alineamiento_2();
});
eventHTMLElem('click', 'pro4-paso19', true, function(event) {
  alineamiento_3();
});
eventHTMLElem('click', 'pro4-paso20', true, function(event) {
  alineamiento_4();
});
eventHTMLElem('click', 'pro4-paso21', true, function(event) {
  alineamiento_5();
});
eventHTMLElem('click', 'pro4-paso22', true, function(event) {
  alineamiento_6();
});
eventHTMLElem('click', 'pro4-paso23', true, function(event) {
  alineamiento_7();
});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
